/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/comments": {
    /**
     * Comments List
     * @description Get a list of comments
     */
    get: operations["get-comments"];
    /**
     * Create a comment
     * @description Create a comment
     */
    post: operations["create-comment"];
  };
  "/comments/{id}": {
    /**
     * Get comment details
     * @description Fetch comment details
     */
    get: operations["get-comment"];
    /**
     * Update a comment
     * @description Udate a comment
     */
    put: operations["update-comment"];
    /**
     * Delete a comment
     * @description Remove a comment
     */
    delete: operations["delete-comment"];
    parameters: {
      path: {
        /** @description Comment id */
        id: number;
      };
    };
  };
  "/comments/search": {
    /**
     * Search comments
     * @description Search through comments
     */
    post: operations["search-comments"];
  };
  "/companies": {
    /**
     * Companies List
     * @description Get a list of companies
     */
    get: operations["get-companies"];
    /**
     * Create a company
     * @description Create a company
     */
    post: operations["create-company"];
  };
  "/companies/search": {
    /**
     * Search companies
     * @description Search companies
     */
    post: operations["search-companies"];
  };
  "/companies/favourite-filters": {
    /**
     * List companies favourite filters
     * @description List favourite filters for faster access to specific companies <br />> Favourite filters can be applied directly to company search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-company-favourite-filters"];
  };
  "/companies/{id}": {
    /**
     * Get Company
     * @description Fetch company informations
     */
    get: operations["get-company"];
    /**
     * Update Company
     * @description Update Company informations
     */
    put: operations["update-company"];
    /**
     * Delete company
     * @description Remove a company
     */
    delete: operations["delete-company"];
    parameters: {
      path: {
        /** @description Company id */
        id: number;
      };
    };
  };
  "/companies/{companyId}/addresses": {
    /** Get company addresses */
    get: operations["get-company-addresses"];
    /** Create a company address */
    post: operations["create-company-address"];
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
  };
  "/companies/{companyId}/addresses/{id}": {
    /** Get a company address */
    get: operations["get-company-address"];
    /** Update a company address */
    put: operations["update-company-address"];
    /** Delete a company address */
    delete: operations["delete-company-address"];
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Address id */
        id: number;
      };
    };
  };
  "/companies/{id}/payments": {
    /**
     * Record payment on a company
     * @description Record a payment on a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-company-payment"];
    parameters: {
      path: {
        /** @description Company identifier */
        id: number;
      };
    };
  };
  "/companies/{id}/contacts": {
    /** Get a company contacts */
    get: operations["get-company-contacts"];
    parameters: {
      path: {
        /** @description Company id */
        id: number;
      };
    };
  };
  "/companies/{companyId}/contacts/{contactId}": {
    /** Update a contact of company link */
    put: operations["update-company-contact"];
    /** Link a contact at one company */
    post: operations["link-company-contact"];
    /** Unlink a contact of company */
    delete: operations["unlink-company-contact"];
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/companies/{id}/custom-fields": {
    /**
     * Company custom fields List
     * @description Get list of custom fields for a company
     */
    get: operations["get-company-custom-fields"];
    /**
     * Update Company custom fields
     * @description Update list of custom fields for a company
     */
    put: operations["update-company-custom-fields"];
    parameters: {
      path: {
        /** @description Company id */
        id: number;
      };
    };
  };
  "/companies/{companyId}/smart-tags": {
    /**
     * Company smart tags List
     * @description Get list of smart tags for a company
     */
    get: operations["get-company-smart-tags"];
    /**
     * Link smart tags to company
     * @description Link a list of smart tag to a company
     */
    post: operations["link-company-smart-tags"];
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
  };
  "/companies/{companyId}/files": {
    /**
     * List directories and files of a company
     * @description List directories and files attached to a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-company-files"];
    /**
     * Attach file to a company
     * @description Attach file to a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-company-file"];
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
  };
  "/contacts/{id}/companies": {
    /**
     * Companies contact
     * @description Get the companies of a contact
     */
    get: operations["get-contact-companies"];
  };
  "/smart-tags/{linkedtype}/autocomplete": {
    /**
     * Smart tags autocomplete
     * @description Autocompled for smart tags
     */
    get: operations["autocomplete-smart-tags"];
    parameters: {
      query: {
        /** @description Word for the research of autocomplete */
        q: string;
      };
      path: {
        /** @description Linked type of smart tags searched */
        linkedtype: "company" | "contact" | "individual";
      };
    };
  };
  "/smart-tags/{id}": {
    /**
     * Delete a smart tags
     * @description Delete a smart tags <br><br><i>Note that deleting a smart tags will also remove it's presence on any object he was linked to.<br>To unlink a smart-tag (without deleting it), please use the "Link smart-tags to ..." endpoint</i>
     */
    delete: operations["delete-smart-tags"];
    parameters: {
      path: {
        /** @description Smart tags ID */
        id: number;
      };
    };
  };
  "/custom-fields": {
    /**
     * Custom Fields List
     * @description Get a list of custom fields
     */
    get: operations["get-custom-fields"];
  };
  "/custom-fields/{id}": {
    /**
     * Get custom field
     * @description Fetch a custom field informations
     */
    get: operations["get-custom-field"];
    parameters: {
      path: {
        /** @description Custom field id */
        id: number;
      };
    };
  };
  "/custom-fields/search": {
    /**
     * Custom Fields Search
     * @description Search custom fields
     */
    post: operations["search-custom-fields"];
  };
  "/estimates": {
    /** Get all estimates */
    get: operations["get-estimates"];
    /**
     * Create estimate
     * @description Create an estimate
     */
    post: operations["create-estimate"];
  };
  "/estimates/search": {
    /** Search estimates */
    post: operations["search-estimates"];
  };
  "/estimates/{id}/custom-fields": {
    /**
     * Estimate custom fields List
     * @description Get list of custom fields for an Estimate
     */
    get: operations["get-estimate-custom-fields"];
    /**
     * Update Estimate custom fields
     * @description Update list of custom fields for an estimate
     */
    put: operations["update-estimate-custom-fields"];
    parameters: {
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
  };
  "/estimates/favourite-filters": {
    /**
     * List estimates favourite filters
     * @description List favourite filters for faster access to specific estimates <br />> Favourite filters can be applied directly to estimate search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-estimate-favourite-filters"];
  };
  "/estimates/{id}": {
    /** Get an estimate */
    get: operations["get-estimate"];
    /**
     * Update estimate
     * @description Update an estimate
     */
    put: operations["update-estimate"];
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["EstimateOneEmbed"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
  };
  "/estimates/{id}/status": {
    /**
     * Update estimate status
     * @description Update an estimate status
     */
    put: operations["update-estimate-status"];
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["SaleEmbed"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
  };
  "/estimates/compute": {
    /**
     * Compute an estimate
     * @description Compute an estimate
     */
    post: operations["compute-estimate"];
  };
  "/estimates/{documentId}/files": {
    /**
     * List directories and files of an estimate
     * @description List directories and files attached to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-estimate-files"];
    /**
     * Attach file to an estimate
     * @description Attach file to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-estimate-file"];
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
  };
  "/estimates/{id}/payments": {
    /**
     * Estimate payments list
     * @description Get list of payments for an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-estimate-payments"];
    parameters: {
      path: {
        /** @description Estimate ID */
        id: number;
      };
    };
  };
  "/estimates/{documentId}/payments/{paymentId}": {
    /**
     * Link payment to estimate
     * @description Link a payment to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-estimate-payment"];
    /**
     * Unlink payment from estimate
     * @description Unlink a payment from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-estimate-payment"];
    parameters: {
      path: {
        /** @description Estimate identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
  };
  "/estimates/{id}/smart-tags": {
    /**
     * Estimate smart-tags list
     * @description Get list of smart-tags for an estimate
     */
    get: operations["get-estimate-smart-tags"];
    /**
     * Link smart tags to estimate
     * @description Link a list of smart-tags to an estimate
     */
    post: operations["link-estimate-smart-tags"];
    parameters: {
      path: {
        /** @description Estimate ID */
        id: number;
      };
    };
  };
  "/estimates/{estimateId}/primes/{primeId}": {
    /**
     * Link prime to estimate
     * @deprecated
     * @description Link a prime to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-estimate-prime"];
    /**
     * Unlink a prime from an estimate
     * @deprecated
     * @description Unlink a prime from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-estimate-prime"];
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
  };
  "/estimates/{estimateId}/discount-incl-taxes/{discountId}": {
    /**
     * Link discount including taxes to estimate
     * @description Link a discount including taxes to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-estimate-discount-incl-taxes"];
    /**
     * Unlink a discount including taxes from an estimate
     * @description Unlink a discount including taxes from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-estimate-discount-incl-taxes"];
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
  };
  "/orders": {
    /**
     * Get all orders
     * @description Get all orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-orders"];
    /**
     * Create an order
     * @description Create an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-order"];
  };
  "/orders/compute": {
    /**
     * Compute an order
     * @description Compute an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["compute-order"];
  };
  "/orders/{id}": {
    /**
     * Get order
     * @description Get an order by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-order"];
    /**
     * Update an order
     * @description Update a given order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-order"];
    parameters: {
      query?: {
        embed?: components["parameters"]["orderEmbedOne"];
      };
      path: {
        /** @description Order ID */
        id: number;
      };
    };
  };
  "/orders/search": {
    /**
     * Search orders
     * @description Search orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-orders"];
  };
  "/orders/{id}/payments": {
    /**
     * Order payments list
     * @description Get list of payments for an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-order-payments"];
    parameters: {
      path: {
        /** @description Order ID */
        id: number;
      };
    };
  };
  "/orders/{id}/smart-tags": {
    /**
     * Order smart tags List
     * @description Get list of smart tags for an order
     */
    get: operations["get-order-smart-tags"];
    /**
     * Link smart tags to an order
     * @description Link a list of smart tag to an order
     */
    post: operations["link-order-smart-tags"];
    parameters: {
      path: {
        /** @description Order id */
        id: number;
      };
    };
  };
  "/orders/{id}/custom-fields": {
    /**
     * Order custom fields List
     * @description Get list of custom fields for an order
     */
    get: operations["get-order-custom-fields"];
    /**
     * Update Order custom fields
     * @description Update list of custom fields for an order
     */
    put: operations["update-order-custom-fields"];
    parameters: {
      path: {
        /** @description Order id */
        id: number;
      };
    };
  };
  "/orders/favourite-filters": {
    /**
     * List orders favourite filters
     * @description List favourite filters for faster access to specific orders <br />> Favourite filters can be applied directly to order search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-order-favourite-filters"];
  };
  "/orders/{documentId}/payments/{paymentId}": {
    /**
     * Link payment to order
     * @description Link a payment to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-order-payment"];
    /**
     * Unlink payment from order
     * @description Unlink a payment from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-order-payment"];
    parameters: {
      path: {
        /** @description Order identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
  };
  "/orders/{documentId}/files": {
    /**
     * List directories and files of an orders
     * @description List directories and files attached to an orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-order-files"];
    /**
     * Attach file to an order
     * @description Attach file to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-order-file"];
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
  };
  "/orders/{orderId}/primes/{primeId}": {
    /**
     * Link prime to order
     * @deprecated
     * @description Link a prime to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-order-prime"];
    /**
     * Unlink a prime from an order
     * @deprecated
     * @description Unlink a prime from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-order-prime"];
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
  };
  "/orders/{orderId}/discount-incl-taxes/{discountId}": {
    /**
     * Link discount including taxes to order
     * @description Link a discount including taxes to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-order-discount-incl-taxes"];
    /**
     * Unlink a discount including taxes from an order
     * @description Unlink a discount including taxes from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-order-discount-incl-taxes"];
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
  };
  "/individuals": {
    /**
     * Individuals List
     * @description Get a list of individuals
     */
    get: operations["get-individuals"];
    /**
     * Create an individual
     * @description Create an individual
     */
    post: operations["create-individual"];
  };
  "/individuals/search": {
    /**
     * Search individuals
     * @description Search individuals
     */
    post: operations["search-individuals"];
  };
  "/individuals/favourite-filters": {
    /**
     * List individuals favourite filters
     * @description List favourite filters for faster access to specific individuals <br />> Favourite filters can be applied directly to individual search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-individual-favourite-filters"];
  };
  "/individuals/{individualId}/files": {
    /**
     * List directories and files of an individual
     * @description List directories and files attached to an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-individual-files"];
    /**
     * Attach file to an individual
     * @description Attach file to an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-individual-file"];
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
  };
  "/individuals/{id}/smart-tags": {
    /**
     * Individual smart tags List
     * @description Get list of smart tags for an individual
     */
    get: operations["get-individual-smart-tags"];
    /**
     * Link smart tags to individual
     * @description Link a list of smart tag to an individual
     */
    post: operations["link-individual-smart-tags"];
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
  };
  "/individuals/{id}": {
    /**
     * Get Individual
     * @description Fetch individual informations
     */
    get: operations["get-individual"];
    /**
     * Update Individual
     * @description Update Individual informations
     */
    put: operations["update-individual"];
    /**
     * Delete Individual
     * @description Remove a individual
     */
    delete: operations["delete-individual"];
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
  };
  "/individuals/{individualId}/addresses": {
    /** Get individual addresses */
    get: operations["get-individual-addresses"];
    /** Create an individual address */
    post: operations["create-individual-address"];
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
  };
  "/individuals/{individualId}/addresses/{id}": {
    /** Get an individual address */
    get: operations["get-individual-address"];
    /** Update an individual address */
    put: operations["update-individual-address"];
    /** Delete an individual address */
    delete: operations["delete-individual-address"];
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Address id */
        id: number;
      };
    };
  };
  "/individuals/{id}/payments": {
    /**
     * Record payment on an individual
     * @description Record a payment on an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-individual-payment"];
    parameters: {
      path: {
        /** @description Individual identifier */
        id: number;
      };
    };
  };
  "/individuals/{id}/contacts": {
    /** Get an individual contacts */
    get: operations["get-individual-contacts"];
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
  };
  "/individuals/{individualId}/contacts/{contactId}": {
    /** Link contact to individual */
    post: operations["link-individual-contact"];
    /** Delete link between contact and individual */
    delete: operations["unlink-individual-contact"];
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/individuals/{id}/custom-fields": {
    /**
     * Individual custom fields List
     * @description Get list of custom fields for an individual
     */
    get: operations["get-individual-custom-fields"];
    /**
     * Update Individual custom fields
     * @description Update list of custom fields for an individual
     */
    put: operations["update-individual-custom-fields"];
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
  };
  "/activities/crm": {
    /**
     * Get the CRM activity
     * @description Get the activity
     */
    get: operations["get-crm-activities"];
  };
  "/activities/crm/search": {
    /**
     * Search in CRM activity
     * @description Search the activity
     */
    post: operations["search-crm-activities"];
  };
  "/activities/crm/export": {
    /**
     * Export the CRM activity
     * @description Search the activity
     */
    post: operations["export-crm-activities"];
  };
  "/activities/crm/metas": {
    /**
     * Get meta informations for activity
     * @description Get metadata, ie everything you need to build the form (filter labels, static values aso..)
     */
    get: operations["meta-crm-activities"];
  };
  "/custom-activities/{id}": {
    /**
     * Get Custom Activity
     * @description Fetch custom activity informations
     */
    get: operations["get-custom-activities-id"];
    /**
     * Update Custom Activity
     * @description Edit a custom activity
     */
    put: operations["put-custom-activities-id"];
    /**
     * Delete Custom Activity
     * @description Delete a custom activity
     */
    delete: operations["delete-custom-activities-id"];
    parameters: {
      path: {
        /** @description Custom Activity ID */
        id: string;
      };
    };
  };
  "/custom-activities": {
    /**
     * Customs Activities List
     * @description Get a list of custom activities
     */
    get: operations["get-custom-activities"];
    /**
     * Create Custom Activity
     * @description Create a custom activity
     */
    post: operations["post-custom-activities"];
  };
  "/custom-activities/search": {
    /**
     * Search Custom Activities
     * @description Search Custom Activities
     */
    post: operations["post-custom-activities-search"];
  };
  "/custom-activity-types/{id}": {
    /**
     * Get Custom Activity Type
     * @description Get a custom activity type
     */
    get: operations["get-custom-activity-types-id"];
    /**
     * Update Custom Activity Type
     * @description Update a custom activity type
     */
    put: operations["put-custom-activity-types-id"];
    parameters: {
      path: {
        /** @description Custom activity type ID */
        id: string;
      };
    };
  };
  "/custom-activity-types": {
    /**
     * Custom Activity Types List
     * @description Get a list of custom actvity types
     */
    get: operations["get-custom-activity-types"];
    /**
     * Create Custom Activity Type
     * @description Create a custom activity type
     */
    post: operations["post-custom-activity-types"];
  };
  "/scopes": {
    /**
     * Scopes List
     * @description Get list of scopes
     */
    get: operations["get-scopes"];
  };
  "/scopes/tree": {
    /**
     * Get Scopes Tree
     * @description Get tree of scopes
     */
    get: operations["get-scopes-tree"];
  };
  "/clients": {
    /**
     * List OAuth clients
     * @description List the OAuth clients for API
     */
    get: operations["list-clients"];
    /**
     * Create OAuth client
     * @description Create OAuth2 client for API
     */
    post: operations["create-clients"];
  };
  "/clients/{id}": {
    /**
     * Get OAuth client
     * @description Fetch OAuth 2 client for API
     */
    get: operations["fetch-clients"];
    /**
     * Update OAuth client
     * @description Update OAuth2 client for API
     */
    put: operations["update-clients"];
    /**
     * Delete OAuth client
     * @description Delete OAuth 2 client for API
     */
    delete: operations["delete-clients"];
    parameters: {
      path: {
        /** @description OAuth client id */
        id: string;
      };
    };
  };
  "/personal-access-tokens": {
    /**
     * List personal access tokens
     * @deprecated
     * @description List the personal access tokens for API
     */
    get: operations["list-personal-access-tokens"];
    /**
     * Create personal access token
     * @deprecated
     * @description Create OAuth2 personal access token for API
     */
    post: operations["create-personal-access-tokens"];
  };
  "/personal-access-tokens/metas": {
    /**
     * Get meta informations for personal access tokens
     * @deprecated
     * @description Get metadata, ie everything you need to build the form
     */
    get: operations["personal-access-tokens-meta"];
  };
  "/personal-access-tokens/{id}": {
    /**
     * Get personal access token
     * @deprecated
     * @description Fetch OAuth2 personal access token for API
     */
    get: operations["fetch-personal-access-tokens"];
    /**
     * Delete personal access token
     * @deprecated
     * @description Delete OAuth2 personal access token for API
     */
    delete: operations["delete-personal-access-tokens"];
    parameters: {
      path: {
        /** @description Personal access token id */
        id: string;
      };
    };
  };
  "/accounting-codes": {
    /**
     * Get accounting codes
     * @description Get list of accounting codes
     */
    get: operations["get-accounting-codes"];
    /**
     * Create an accounting code
     * @description Create an accounting code
     */
    post: operations["create-accounting-code"];
  };
  "/accounting-codes/{id}": {
    /**
     * Delete an accounting code
     * @description Delete an accounting code
     */
    delete: operations["delete-accounting-code"];
    parameters: {
      path: {
        /** @description ID of the accounting code */
        id: number;
      };
    };
  };
  "/accounting-codes/search": {
    /**
     * Search accounting codes
     * @description Search in list of accouting codes
     */
    post: operations["search-accounting-codes"];
  };
  "/accounting-journal/{type}": {
    /**
     * Get accounting journal
     * @description Get list of accounting journal
     */
    get: operations["get-accounting-journal"];
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
  };
  "/accounting-journal/{type}/search": {
    /**
     * Search accounting journal
     * @description Search in list of accounting journal
     */
    post: operations["search-accounting-journal"];
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
  };
  "/accounting-journal/{type}/metas": {
    /** Get meta informations for accounting journal */
    get: operations["meta-accounting-journal"];
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
  };
  "/accounting-journal/{type}/export": {
    /**
     * Export accounting journal
     * @description Export list of accounting journal
     */
    post: operations["export-accounting-journal"];
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
  };
  "/taxes": {
    /**
     * Taxes list
     * @description Get list of taxes
     */
    get: operations["get-taxes"];
    /**
     * Create tax
     * @description Create a tax
     */
    post: operations["create-tax"];
  };
  "/taxes/search": {
    /**
     * Search taxes
     * @description Search taxes
     */
    post: operations["search-taxes"];
  };
  "/taxes/{id}": {
    /**
     * Get Tax
     * @description Fetch tax informations
     */
    get: operations["get-tax"];
    /**
     * Update tax
     * @description Update Tax informations
     */
    put: operations["update-tax"];
    /**
     * Delete tax
     * @description Remove a tax
     */
    delete: operations["delete-tax"];
    parameters: {
      path: {
        /** @description Tax id */
        id: number;
      };
    };
  };
  "/taxes/accounting-codes": {
    /**
     * Taxes accounting codes list
     * @description Get list of accounting codes
     */
    get: operations["get-taxes-accounting-charts"];
  };
  "/taxes/{id}/accounting-codes": {
    /**
     * Tax accounting codes list
     * @description Get tax accounting codes
     */
    get: operations["get-tax-accounting-chart"];
    /**
     * Update tax accounting codes
     * @description Update tax accounting codes
     */
    put: operations["update-tax-accounting-chart"];
    parameters: {
      path: {
        /** @description Tax id */
        id: number;
      };
    };
  };
  "/rate-categories": {
    /**
     * Rate categories list
     * @description Get list of rate categories
     */
    get: operations["get-rate-categories"];
    /**
     * Create rate category
     * @description Create a rate category
     */
    post: operations["create-rate-category"];
  };
  "/rate-categories/{id}": {
    /**
     * Get rate category
     * @description Fetch a rate category
     */
    get: operations["get-rate-category"];
    /**
     * Update a rate category
     * @description Update a rate category
     */
    put: operations["update-rate-category"];
    /**
     * Delete Rate category
     * @description Remove a rate category
     */
    delete: operations["delete-rate-category"];
    parameters: {
      path: {
        /** @description Rate category id */
        id: number;
      };
    };
  };
  "/payments/methods/{id}": {
    /**
     * Get the payment method
     * @description List of all payment methods
     */
    get: operations["get-payment-method"];
  };
  "/payments/methods": {
    /**
     * List of all payment methods
     * @description List of all payment methods
     */
    get: operations["get-payment-methods"];
  };
  "/payments/methods/search": {
    /**
     * Search methods of payment
     * @description Search method of payment
     */
    post: operations["search-payment-methods"];
  };
  "/ocr/pur-invoice": {
    /**
     * Ocr List - Purchase invoices
     * @description Get list of OCR documents for purchase invoices
     */
    get: operations["get-ocr-pur-invoice"];
  };
  "/ocr/pur-invoice/search": {
    /**
     * Search OCR - Purchase invoices
     * @description Search OCR document of purchase invoices
     */
    post: operations["search-ocr-pur-invoice"];
  };
  "/ocr/pur-invoice/metas": {
    /**
     * Get Metadata for purchase invoice OCR
     * @description Get metadata
     */
    get: operations["get-ocr-pur-invoice-metas"];
  };
  "/contacts": {
    /**
     * Contacts List
     * @description Get a list of contacts
     */
    get: operations["get-contacts"];
    /**
     * Create a contact
     * @description Create a contact
     */
    post: operations["create-contact"];
  };
  "/contacts/search": {
    /**
     * Search contacts
     * @description Search contacts
     */
    post: operations["search-contacts"];
  };
  "/contacts/favourite-filters": {
    /**
     * List contacts favourite filters
     * @description List favourite filters for faster access to specific contacts <br />> Favourite filters can be applied directly to contact search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-contact-favourite-filters"];
  };
  "/contacts/{id}": {
    /**
     * Get contact
     * @description Fetch contact informations
     */
    get: operations["get-contact"];
    /**
     * Update contact
     * @description Update contact informations
     */
    put: operations["update-contact"];
    /**
     * Delete contact
     * @description Remove a contact
     */
    delete: operations["delete-contact"];
    parameters: {
      path: {
        /** @description Contact id */
        id: number;
      };
    };
  };
  "/contacts/{contactId}/addresses": {
    /** Get contact addresses */
    get: operations["get-contact-addresses"];
    /** Create a contact address */
    post: operations["create-contact-address"];
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/contacts/{contactId}/addresses/{id}": {
    /** Get a contact address */
    get: operations["get-contact-address"];
    /** Update a contact address */
    put: operations["update-contact-address"];
    /** Delete a contact address */
    delete: operations["delete-contact-address"];
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
        /** @description Address id */
        id: number;
      };
    };
  };
  "/contacts/{contactId}/custom-fields": {
    /**
     * Contact custom fields List
     * @description Get list of custom fields for a contact
     */
    get: operations["get-contact-custom-fields"];
    /**
     * Update contact custom fields
     * @description Update list of custom fields for a contact
     */
    put: operations["update-contact-custom-fields"];
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/contacts/{contactId}/files": {
    /**
     * List directories and files of a contact
     * @description List directories and files attached to a contact <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-contact-files"];
    /**
     * Attach file to a contact
     * @description Attach file to a contact <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-contact-file"];
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/contacts/{contactId}/smart-tags": {
    /**
     * Contact smart tags List
     * @description Get list of smart tags for a contact
     */
    get: operations["get-contact-smart-tags"];
    /**
     * Link smart tags to contact
     * @description Link a list of smart tag to a contact
     */
    post: operations["link-contact-smart-tags"];
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
  };
  "/accounts/conformities": {
    /**
     * Retrieve invoicing conformity state
     * @description Get invoicing conformity state
     */
    get: operations["get-invoicing-conformity-state"];
    /**
     * Activate invoice conformity (Definitively)
     * @description Definitively activate invoice conformity
     */
    post: operations["activate-invoicing-conformity"];
  };
  "/document-layouts": {
    /**
     * Get all document layouts
     * @description Get all document layouts
     */
    get: operations["get-document-layouts"];
  };
  "/accounts/documents": {
    /**
     * Get your invoices and credit notes
     * @description Get your invoices and credit notes
     */
    get: operations["get-accounts-documents"];
  };
  "/opportunities/{id}": {
    /**
     * Get Opportunity
     * @description Get an opportunity
     */
    get: operations["get-opportunity"];
    /**
     * Update Opportunity
     * @description Update Opportunity informations
     */
    put: operations["update-opportunity"];
    /**
     * Delete an Opportunity
     * @description Delete an opportunity
     */
    delete: operations["delete-opportunity"];
    parameters: {
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
  };
  "/opportunities/{id}/step-rank": {
    /**
     * Update opportunity's rank and/or step
     * @description Update opportunity's rank in its pipeline step or in a new step <br />> To apply new rank according to the sibling, we consider to be in the default ascending sort on opportunities rank
     */
    patch: operations["update-opportunity-rank"];
    parameters: {
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
  };
  "/opportunities": {
    /**
     * Get Opportunities
     * @description Get list of opportunities
     */
    get: operations["get-opportunities"];
    /**
     * Create an opportunity
     * @description Create an opportunity
     */
    post: operations["create-opportunity"];
  };
  "/opportunities/{opportunityId}/files": {
    /**
     * List directories and files of an opportunity
     * @description List directories and files attached to an opportunity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-opportunity-files"];
    /**
     * Attach file to an opportunity
     * @description Attach file to an opportunity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-opportunity-file"];
    parameters: {
      path: {
        /** @description Opportunity id */
        opportunityId: number;
      };
    };
  };
  "/opportunities/search": {
    /**
     * Search Opportunities
     * @description Search opportunities
     */
    post: operations["search-opportunities"];
  };
  "/opportunities/favourite-filters": {
    /**
     * List opportunities favourite filters
     * @description List favourite filters for faster access to specific opportunities <br />> Favourite filters can be applied directly to opportunity search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-opportunity-favourite-filters"];
  };
  "/opportunities/sources": {
    /**
     * Get Opportunity Sources
     * @description Get list of opportunity sources
     */
    get: operations["get-opportunity-sources"];
  };
  "/opportunities/sources/search": {
    /**
     * Search Opportunity Sources
     * @description Search opportunity sources
     */
    post: operations["search-opportunity-sources"];
  };
  "/opportunities/categories/{sourceCategoryId}/sources": {
    /**
     * Get Opportunity Category Sources
     * @description Get list of opportunity category sources
     */
    get: operations["get-opportunity-category-sources"];
    parameters: {
      path: {
        /** @description ID of Opportunity Sources Category */
        sourceCategoryId: number;
      };
    };
  };
  "/opportunities/pipelines": {
    /**
     * Get Opportunity Pipelines
     * @description Get list of opportunity pipelines
     */
    get: operations["get-opportunity-pipelines"];
  };
  "/opportunities/pipelines/search": {
    /**
     * Search Opportunity Pipelines
     * @description Search opportunity pipelines
     */
    post: operations["search-opportunity-pipelines"];
  };
  "/opportunities/pipelines/{pipelineId}/steps": {
    /**
     * Get Opportunity Pipeline Steps
     * @description Get list of opportunity pipeline steps
     */
    get: operations["get-opportunity-pipeline-steps"];
    parameters: {
      path: {
        /** @description Pipeline id */
        pipelineId: number;
      };
    };
  };
  "/opportunities/pipelines/{pipelineId}/steps/search": {
    /**
     * Search Opportunity Pipeline Steps
     * @description Search opportunity pipeline steps
     */
    post: operations["search-opportunity-pipeline-steps"];
    parameters: {
      path: {
        /** @description Pipeline id */
        pipelineId: number;
      };
    };
  };
  "/opportunities/steps/search": {
    /**
     * Search All Opportunity Pipeline Steps
     * @description Search all opportunity pipeline steps
     */
    post: operations["search-all-opportunity-pipeline-steps"];
  };
  "/opportunities/categories": {
    /**
     * Get Opportunities Categories List
     * @description Get list of opportunities categories
     */
    get: operations["get-opportunities-categories"];
  };
  "/opportunities/categories/{id}": {
    /** Get Opportunities Category */
    get: operations["get-opportunities-category"];
    parameters: {
      query?: {
        embed?: components["parameters"]["opportuntiyCategoryEmbed"];
      };
      path: {
        /** @description Opportunities category id */
        id: number;
      };
    };
  };
  "/opportunities/{id}/custom-fields": {
    /**
     * Opportunity custom fields List
     * @description Get list of custom fields for an opportunity
     */
    get: operations["get-opportunity-custom-fields"];
    /**
     * Update opportunity custom fields
     * @description Update list of custom fields for an opportunity
     */
    put: operations["update-opportunity-custom-fields"];
    parameters: {
      path: {
        /** @description Opportunity id */
        id: number;
      };
    };
  };
  "/opportunities/{id}/smart-tags": {
    /**
     * Opportunity smart-tags list
     * @description Get list of smart-tags for an opportunity
     */
    get: operations["get-opportunity-smart-tags"];
    /**
     * Link smart tags to opportunity
     * @description Link a list of smart-tags to an opportunity
     */
    post: operations["link-opportunity-smart-tags"];
    parameters: {
      path: {
        /** @description Opportunity ID */
        id: number;
      };
    };
  };
  "/tasks/{id}": {
    /** Get a task */
    get: operations["get-task"];
    /** Update a task */
    put: operations["update-task"];
    /** Delete a task */
    delete: operations["delete-task"];
    parameters: {
      path: {
        /** @description Task id */
        id: number;
      };
    };
  };
  "/tasks": {
    /**
     * Tasks List
     * @description Get a list of tasks
     */
    get: operations["get-tasks"];
    /** Create a task */
    post: operations["create-task"];
  };
  "/tasks/search": {
    /**
     * Search Tasks
     * @description Search tasks
     */
    post: operations["search-tasks"];
  };
  "/tasks/labels": {
    /**
     * Get tasks labels
     * @description Get all tasks labels available
     */
    get: operations["get-tasks-labels"];
  };
  "/calendar-events/labels": {
    /**
     * Get calendar events labels
     * @description Get all calendar events labels available
     */
    get: operations["get-calendar-events-labels"];
  };
  "/staffs/{id}": {
    /**
     * Get Staff
     * @description Get a staff
     */
    get: operations["get-staff"];
    /**
     * Update Staff
     * @description Update staff informations
     */
    put: operations["update-staff"];
    parameters: {
      path: {
        /** @description Numerical identifier of the Staff. The logged-in Staff can also be retrieved by using the "/me" alias */
        id: string;
      };
    };
  };
  "/staffs": {
    /**
     * Get Staffs
     * @description Get a list of staffs.</br> The response may contain only your own staff, depending on your subscription plan.
     */
    get: operations["get-staffs"];
    /** Create a staff */
    post: operations["create-staff"];
  };
  "/staffs/search": {
    /**
     * Search Staffs
     * @description Search list of staffs.</br> The response may contain only your own staff, depending on your subscription plan.
     */
    post: operations["search-staffs"];
  };
  "/teams": {
    /**
     * Team List
     * @description Get a list of team
     */
    get: operations["get-teams"];
  };
  "/profiles": {
    /**
     * Profiles list
     * @description Get profiles list
     */
    get: operations["get-profiles"];
  };
  "/files/{id}": {
    /**
     * Get file
     * @description Get a file <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-file"];
    /**
     * Delete file
     * @description Delete a file <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["delete-file"];
    /**
     * Move a file to a new directory
     * @description Move a file to a new directory. The target specified could be as either a folder or a direct entity, such as "company". <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    patch: operations["move-file"];
    parameters: {
      path: {
        /** @description File identifier */
        id: number;
      };
    };
  };
  "/search": {
    /**
     * Search
     * @description Search for objects
     */
    get: operations["search"];
  };
  "/calendar-events": {
    /**
     * Calendar events List
     * @description Get a list of calendar event
     */
    get: operations["get-calendar-events"];
    /** Create a calendar event */
    post: operations["create-calendar-event"];
  };
  "/calendar-events/{id}": {
    /** Get calendar event */
    get: operations["get-calendar-event"];
    /** Update calendar event */
    put: operations["update-calendar-event"];
    /** Delete calendar event */
    delete: operations["delete-calendar-event"];
    parameters: {
      path: {
        /** @description Calendar event id */
        id: number;
      };
    };
  };
  "/calendar-events/search": {
    /**
     * Search calendar event
     * @description Search calendar events
     */
    post: operations["search-calendar-events"];
  };
  "/activities/search": {
    /**
     * Search in activity
     * @description Search in activity
     */
    post: operations["search-activities"];
  };
  "/timeline/{type}/{id}/search": {
    /**
     * Timeline search
     * @description Search in timeline activity of an object
     */
    post: operations["search-timeline"];
    parameters: {
      path: {
        /** @description Object identifier */
        id: string;
        /** @description Object type */
        type: "individual" | "company" | "contact" | "opportunity";
      };
    };
  };
  "/phone-calls/{id}": {
    /**
     * Get a phoneCall
     * @description Get a phoneCall
     */
    get: operations["get-phone-call"];
    /**
     * Update a phoneCall
     * @description Update a phoneCall
     */
    put: operations["update-phone-call"];
    /** Delete a phoneCall */
    delete: operations["delete-phone-call"];
    parameters: {
      path: {
        /** @description Numerical identifier of phone call */
        id: number;
      };
    };
  };
  "/phone-calls": {
    /**
     * PhoneCalls List
     * @description Get a list of phoneCalls
     */
    get: operations["get-phone-calls"];
    /** Create a phone call */
    post: operations["create-phone-call"];
  };
  "/phone-calls/search": {
    /**
     * Search phoneCalls
     * @description Search a list of phoneCalls
     */
    post: operations["search-phone-calls"];
  };
  "/emails/{id}": {
    /**
     * Get Email
     * @description Get an Email
     */
    get: operations["get-email"];
    parameters: {
      path: {
        /** @description identifier of email */
        id: string;
      };
    };
  };
  "/emails/threads/{id}": {
    /**
     * Get Emails Thread
     * @description Get the emails list of a thread
     */
    get: operations["get-email-thread"];
    parameters: {
      path: {
        /** @description Identifier of email thread */
        id: string;
      };
    };
  };
  "/email/authenticate": {
    /**
     * Get email's domain DNS data
     * @description Get DNS data for the domain extracted from the email
     */
    get: operations["get-email-domain-dns-data"];
    parameters: {
      query: {
        /**
         * @description email whose domain should be authenticated
         * @example jonh.doe@email.com
         */
        email: string;
      };
    };
  };
  "/email/domain/validate": {
    /**
     * Validate email's DNS
     * @description Validate an email DNS
     */
    post: operations["validate-email-domain-dns"];
  };
  "/webhooks": {
    /**
     * Get Webhooks
     * @description Get list of webhooks
     */
    get: operations["get-webhooks"];
    /**
     * Create Webhook
     * @description Create a webhook
     */
    post: operations["create-webhook"];
  };
  "/webhooks/search": {
    /**
     * Search Webhooks
     * @description Get list of webhooks
     */
    post: operations["search-webhooks"];
  };
  "/webhooks/{id}": {
    /**
     * Get Webhook
     * @description Get a webhook
     */
    get: operations["get-webhook"];
    /**
     * Update Webhook
     * @description Update Webhook informations
     */
    put: operations["update-webhook"];
    /**
     * Delete Webhook
     * @description Delete a webhook
     */
    delete: operations["delete-webhook"];
    parameters: {
      path: {
        /** @description ID of webhook */
        id: number;
      };
    };
  };
  "/webhooks/events": {
    /**
     * List Webhook Events
     * @description List all events' name available for a webhook
     */
    get: operations["get-webhook-events"];
  };
  "/units": {
    /**
     * Get Units
     * @description Get all units of the corp
     */
    get: operations["get-units"];
  };
  "/currencies": {
    /**
     * Get currencies
     * @description Get all currencies of the corp
     */
    get: operations["get-currencies"];
  };
  "/countries": {
    /**
     * Get countries list
     * @description Get a list of countries
     */
    get: operations["get-countries"];
  };
  "/settings/subscription": {
    /**
     * Get my Sellsy subscription informations
     * @description Retrieve the details of my Sellsy subscription
     */
    get: operations["get-account-subscription"];
  };
  "/items": {
    /**
     * Items List
     * @description Get a list of items
     */
    get: operations["get-items"];
    /**
     * Create an item
     * @description Create an item
     */
    post: operations["create-item"];
  };
  "/items/search": {
    /**
     * Search items
     * @description Search items
     */
    post: operations["search-items"];
  };
  "/items/favourite-filters": {
    /**
     * List items favourite filters
     * @description List favourite filters for faster access to specific items <br />> Favourite filters can be applied directly to item search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-item-favourite-filters"];
  };
  "/items/{id}": {
    /**
     * Get an item
     * @description Get an item
     */
    get: operations["get-item"];
    /**
     * Update an item
     * @description Update an item
     */
    put: operations["update-item"];
    /**
     * Delete item
     * @description Delete an item
     */
    delete: operations["delete-item"];
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
  };
  "/items/{id}/prices": {
    /**
     * Get item prices
     * @description Get prices list for an item
     */
    get: operations["get-item-prices"];
    /**
     * Update item prices
     * @description Update prices list for an item
     */
    put: operations["put-item-prices"];
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
  };
  "/items/{id}/declinations": {
    /**
     * Declinations List
     * @description Get the declination's list
     */
    get: operations["get-item-declinations"];
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
  };
  "/staffs/{id}/licenses": {
    /**
     * Put staff licenses
     * @description Put staff licenses. Need to pass all existing licenses if you want to keep licenses.
     */
    put: operations["put-staff-licenses"];
    /**
     * Delete licenses
     * @description Delete staff licenses
     */
    delete: operations["delete-staff-licenses"];
    parameters: {
      path: {
        /** @description ID of staff */
        id: number;
      };
    };
  };
  "/quotas": {
    /**
     * Get Quotas
     * @description Get quotas of the corp
     */
    get: operations["get-quotas"];
  };
  "/batch": {
    /**
     * Batch request
     * @description Create a batch request
     */
    post: operations["create-batch"];
  };
  "/notifications": {
    /**
     * Get User Notifications
     * @description Get notifications related to current user
     */
    get: operations["get-notifications"];
  };
  "/notifications/search": {
    /**
     * Search User Notifications
     * @description Search notifications related to current user
     */
    post: operations["search-notifications"];
  };
  "/notifications/{id}": {
    /**
     * Delete notification
     * @description Delete a notification
     */
    delete: operations["delete-notification"];
    parameters: {
      path: {
        /** @description ID of notification */
        id: number;
      };
    };
  };
  "/notifications/{id}/mark-as-read": {
    /**
     * Mark notification as read
     * @description Mark a notification as read or unread
     */
    patch: operations["mark-notification-as-read"];
    parameters: {
      path: {
        /** @description ID of notification */
        id: number;
      };
    };
  };
  "/notifications/mark-all-as-read": {
    /**
     * Mark all unread notifications as read
     * @description Mark all unread notifications as read
     */
    patch: operations["mark-all-notifications-as-read"];
  };
  "/notifications/settings": {
    /**
     * Get Notifications settings
     * @description Get notifications settings
     */
    get: operations["get-notifications-settings"];
    /**
     * Update Notifications settings
     * @description Update notifications settings
     */
    put: operations["put-notifications-settings"];
  };
  "/invoices/{id}": {
    /**
     * Get invoice
     * @description Get an invoice by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-invoice"];
    /**
     * Update invoice
     * @description Update an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-invoice"];
    parameters: {
      query?: {
        embed?: components["parameters"]["invoiceOneEmbed"];
      };
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
  };
  "/invoices": {
    /**
     * Invoices List
     * @description Get a list of invoices <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-invoices"];
    /**
     * Create invoice
     * @description Create an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-invoice"];
  };
  "/invoices/search": {
    /**
     * Search invoices
     * @description Search invoices <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-invoices"];
  };
  "/invoices/favourite-filters": {
    /**
     * List invoices favourite filters
     * @description List favourite filters for faster access to specific invoices <br />> Favourite filters can be applied directly to invoice search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-invoice-favourite-filters"];
  };
  "/invoices/compute": {
    /**
     * Compute an invoice
     * @description Compute an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["compute-invoice"];
  };
  "/invoices/{id}/smart-tags": {
    /**
     * Invoice smart-tags list
     * @description Get list of smart-tags for an invoice
     */
    get: operations["get-invoice-smart-tags"];
    /**
     * Link smart tags to invoice
     * @description Link a list of smart-tags to an invoice
     */
    post: operations["link-invoice-smart-tags"];
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
  };
  "/invoices/{id}/validate": {
    /**
     * Validate Invoice
     * @description Validate an invoice, which is in draft status, into due status. <strong>After validation, the invoice can no longer be edited.</strong><br/> You could provide a date if you want to change the invoice date. <br/> <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div><br/>
     */
    post: operations["validate-invoice"];
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
  };
  "/invoices/{id}/credit-notes": {
    /**
     * Get credit notes linked to invoice
     * @description Get list of credit notes linked to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div><br/>
     */
    get: operations["get-invoice-credit-notes"];
    parameters: {
      path: {
        /** @description Invoice id */
        id: number;
      };
    };
  };
  "/invoices/{invoiceId}/credit-notes/{creditNoteId}": {
    /**
     * Link a credit note to an invoice
     * @description Link a credit note to an invoice for a specific amount <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-credit-note-to-invoice"];
    /**
     * Unlink a credit note from an invoice
     * @description Unlink a credit note from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-invoices-credit-note"];
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Credit note identifier */
        creditNoteId: number;
      };
    };
  };
  "/invoices/{id}/payments": {
    /**
     * Invoice payments list
     * @description Get list of payments for an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-invoice-payments"];
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
  };
  "/invoices/{documentId}/payments/{paymentId}": {
    /**
     * Link payment to invoice
     * @description Link a payment to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-invoice-payment"];
    /**
     * Unlink payment from invoice
     * @description Unlink a payment from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-invoice-payment"];
    parameters: {
      path: {
        /** @description Invoice identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
  };
  "/invoices/{documentId}/files": {
    /**
     * List directories and files of an invoice
     * @description List directories and files attached to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-invoice-files"];
    /**
     * Attach file to an invoice
     * @description Attach file to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-invoice-file"];
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
  };
  "/invoices/{id}/custom-fields": {
    /**
     * Invoice custom fields List
     * @description Get list of custom fields for an invoice
     */
    get: operations["get-invoice-custom-fields"];
    /**
     * Update Invoice custom fields
     * @description Update list of custom fields for an invoice
     */
    put: operations["update-invoice-custom-fields"];
    parameters: {
      path: {
        /** @description Invoice id */
        id: number;
      };
    };
  };
  "/invoices/{invoiceId}/primes/{primeId}": {
    /**
     * Link prime to invoice
     * @deprecated
     * @description Link a prime to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-invoice-prime"];
    /**
     * Unlink a prime from an invoice
     * @deprecated
     * @description Unlink a prime from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-invoice-prime"];
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
  };
  "/invoices/{invoiceId}/discount-incl-taxes/{discountId}": {
    /**
     * Link discount including taxes to invoice
     * @description Link a discount including taxes to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-invoice-discount-incl-taxes"];
    /**
     * Unlink a discount including taxes from an invoice
     * @description Unlink a discount including from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-invoice-discount-incl-taxes"];
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
  };
  "/credit-notes/{id}": {
    /**
     * Get credit note
     * @description Get a credit note by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-note"];
    /**
     * Update credit note
     * @description Update a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-credit-note"];
    parameters: {
      query?: {
        embed?: components["parameters"]["creditNoteOneEmbed"];
      };
      path: {
        /** @description Credit Note ID */
        id: number;
      };
    };
  };
  "/credit-notes": {
    /**
     * Credit notes List
     * @description Get a list of credit notes <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-notes"];
    /**
     * Create credit note
     * @description Create a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-credit-note"];
  };
  "/credit-notes/search": {
    /**
     * Search credit notes
     * @description Search credit notes <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-credit-notes"];
  };
  "/credit-notes/favourite-filters": {
    /**
     * List credit-notes favourite filters
     * @description List favourite filters for faster access to specific credit-notes <br />> Favourite filters can be applied directly to credit-note search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-note-favourite-filters"];
  };
  "/credit-notes/compute": {
    /**
     * Compute a credit note
     * @description Compute a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["compute-credit-note"];
  };
  "/credit-notes/{id}/smart-tags": {
    /**
     * Credit note smart-tags list
     * @description Get list of smart-tags for a credit note
     */
    get: operations["get-credit-note-smart-tags"];
    /**
     * Link smart tags to credit note
     * @description Link a list of smart-tags to a credit note
     */
    post: operations["link-credit-note-smart-tags"];
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
  };
  "/credit-notes/{id}/validate": {
    /**
     * Validate credit note
     * @description Validate a credit note in status draft. Update the status to due. You could provide a date if you want to change the credit note date. <br/> <strong>Credit note can not be updated after validation.</strong> <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["validate-credit-note"];
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
  };
  "/credit-notes/{id}/custom-fields": {
    /**
     * Credit note custom fields List
     * @description Get list of custom fields for a credit note
     */
    get: operations["get-credit-note-custom-fields"];
    /**
     * Update credit note custom fields
     * @description Update list of custom fields for a credit note
     */
    put: operations["update-credit-note-custom-fields"];
    parameters: {
      path: {
        /** @description Credit note id */
        id: number;
      };
    };
  };
  "/credit-notes/{id}/invoices": {
    /**
     * Get invoices linked to credit note
     * @description Get list of invoices linked to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-note-invoices"];
    parameters: {
      path: {
        /** @description Credit note id */
        id: number;
      };
    };
  };
  "/credit-notes/{creditNoteId}/invoices/{invoiceId}": {
    /**
     * Link an invoice to a credit note
     * @description Link an invoice to a credit note for a specific amount <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-invoice-to-credit-note"];
    /**
     * Unlink an invoice from a credit note
     * @description Unlink an invoice from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-credit-note-invoices"];
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Invoice identifier */
        invoiceId: number;
      };
    };
  };
  "/credit-notes/{id}/payments": {
    /**
     * Credit note payments list
     * @description Get list of payments for an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-note-payments"];
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
  };
  "/credit-notes/{documentId}/payments/{paymentId}": {
    /**
     * Link payment to credit note
     * @description Link a payment to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-credit-note-payment"];
    /**
     * Unlink payment from credit note
     * @description Unlink a payment from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-credit-note-payment"];
    parameters: {
      path: {
        /** @description Credit note identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
  };
  "/credit-notes/{documentId}/files": {
    /**
     * List directories and files of a credit note
     * @description List directories and files attached to an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-credit-note-files"];
    /**
     * Attach file to an credit note
     * @description Attach file to an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-credit-note-file"];
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
  };
  "/credit-notes/{creditNoteId}/primes/{primeId}": {
    /**
     * Link prime to credit note
     * @deprecated
     * @description Link a prime to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-credit-note-prime"];
    /**
     * Unlink a prime from a credit note
     * @deprecated
     * @description Unlink a prime from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-credit-note-prime"];
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
  };
  "/credit-notes/{creditNoteId}/discount-incl-taxes/{discountId}": {
    /**
     * Link discount including taxes to credit note
     * @description Link a discount including taxes to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["link-credit-note-discount-incl-taxes"];
    /**
     * Unlink a discount including taxes from a credit note
     * @description Unlink a discount including taxes from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["unlink-credit-note-discount-incl-taxes"];
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
  };
  "/payments/{id}": {
    /**
     * Get a payment
     * @description Get a payment <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-payment"];
    /**
     * Delete payment
     * @description Delete a payment that is not linked to a document <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["delete-payment"];
    parameters: {
      query?: {
        /** @description Optional objects added through the embed parameter */
        embed?: ("acl" | "company" | "individual")[];
      };
      path: {
        /** @description Payment identifier */
        id: number;
      };
    };
  };
  "/payments": {
    /**
     * Get payments
     * @description Get a list of payments <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-payments"];
  };
  "/payments/search": {
    /**
     * Search payments
     * @description Search through payments <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-payments"];
  };
  "/settings/email": {
    /**
     * Get email settings
     * @description Get email settings
     */
    get: operations["get-email-settings"];
    /**
     * Update email settings
     * @description Update email settings
     */
    put: operations["put-email-settings"];
  };
  "/settings/email/tags": {
    /**
     * Get available tags for email signature settings
     * @description Get available tags for email signature settings
     */
    get: operations["get-email-signature-tags"];
  };
  "/fiscal-years": {
    /**
     * Get fiscal years
     * @description Get list of fiscal years of account
     */
    get: operations["get-fiscal-years"];
  };
  "/languages": {
    /**
     * Get the account languages
     * @description Get the account languages
     */
    get: operations["get-languages"];
  };
  "/directories": {
    /**
     * Create directory
     * @description Create a new directory and attach it to the provided parent entity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-directory"];
  };
  "/directories/{id}": {
    /**
     * Get directory
     * @description Fetch directory informations <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-directory"];
    /**
     * Update directory
     * @description Update a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-directory"];
    /**
     * Delete the directory and all items attached
     * @description Delete the directory and all items attached <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["delete-directory"];
    parameters: {
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
  };
  "/directories/{id}/files": {
    /**
     * List directories and files in a directory
     * @description List directories and files belonging to a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-directory-files"];
    /**
     * Attach file to a directory
     * @description Attach file to a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["upload-directory-file"];
    parameters: {
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
  };
  "/subscriptions": {
    /**
     * Fetch list of subscriptions
     * @description Fetch list of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-subscriptions"];
    /**
     * Create a subscription
     * @description Create a subscription <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-subscription"];
  };
  "/subscriptions/search": {
    /**
     * Search subscriptions
     * @description Search subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-subscriptions"];
  };
  "/subscriptions/{id}": {
    /**
     * Get subscription
     * @description Get a subscription <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-subscription"];
    /**
     * Delete a subscription
     * @description Delete a subscription and all future payment installments <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["delete-subscription"];
    parameters: {
      path: {
        /** @description Subscription identifier */
        id: number;
      };
    };
  };
  "/subscriptions/{id}/payment-installments": {
    /**
     * Add payment installment for a subscription
     * @description Allows to add a certain number of payment installment to an existing subscription. The new payment installment will take the frequency defined on the subscription and will follow the date of the last existing payment installment <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    patch: operations["patch-subscription-payment-installment"];
    parameters: {
      path: {
        /** @description Subscription identifier */
        id: number;
      };
    };
  };
  "/subscriptions/payment-installments": {
    /**
     * Get all payment installments of subscriptions
     * @description Get all payment installments of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-subscriptions-payment-installments"];
  };
  "/subscriptions/payment-installments/search": {
    /**
     * Search payment installments of subscriptions
     * @description Search payment installments of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["search-subscriptions-payment-installments"];
  };
  "/documents/models": {
    /**
     * List document models
     * @description Fetch a list of document models <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-models"];
    /**
     * Create a document model
     * @description Create a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-model"];
  };
  "/documents/models/{id}": {
    /**
     * Get document model
     * @description Get a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-model"];
    /**
     * Update document model
     * @description Update a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-model"];
    parameters: {
      path: {
        /** @description Model identifier */
        id: number;
      };
    };
  };
  "/documents/models/search": {
    /**
     * Search document models
     * @description Search document models
     */
    post: operations["search-models"];
  };
  "/documents/models/{id}/convert": {
    /**
     * Convert a document model into a document
     * @description Build the request body expected by document create endpoint with prefilled properties from the document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["convert-model"];
    parameters: {
      path: {
        /** @description Document model identifier */
        id: number;
      };
    };
  };
  "/documents/models/tags": {
    /**
     * Get available tags for document models
     * @description Get available tags that could be used on a document model, as variable, that will be replaced when compute a concrete document.<br>Tag could be used on subject and row's descriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-model-tags"];
  };
  "/primes": {
    /**
     * Get list of primes
     * @deprecated
     * @description Get primes list <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-primes"];
  };
  "/discount-incl-taxes": {
    /**
     * Get list of discounts including taxes
     * @description Get discounts including taxes list <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-discounts-incl-taxes"];
    /**
     * Create a discount including taxes
     * @description Create a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    post: operations["create-discount-incl-taxes"];
  };
  "/discount-incl-taxes/{id}": {
    /**
     * Get a discount including taxes
     * @description Get a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    get: operations["get-discount-incl-taxes"];
    /**
     * Update a discount including taxes
     * @description Update a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    put: operations["update-discount-incl-taxes"];
    /**
     * Delete a discount including taxes
     * @description Delete a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
     */
    delete: operations["delete-discount-incl-taxes"];
    parameters: {
      path: {
        /** @description Discount including taxes id */
        id: number;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Predict */
    PredictPlan: {
      /**
       * @description Plan predicted. If the pricing version is < 4, return `null`
       * @example essential
       */
      predicted_plan?: string | null;
      /**
       * @description Marketing plan predicted. If the pricing version is < 5, return `null`
       * @example pack_marketing_starter
       */
      predicted_marketing_plan?: string | null;
    };
    /** Create model */
    CreateModel: {
      /**
       * @description Name of model
       * @example model#1
       */
      number: string;
      /**
       * Format: date-time
       * @description Created date of model
       * @example 2018-02-21T12:00:00Z
       */
      created?: string;
      /**
       * @description Subject of model <br><br><b>Note:</b> Date variables, called "tag", can be integrated in this property, they will be replaced by the real value when converting the document template to a document <br>> Refer to endpoint's description of list available tags for document model.
       *
       * @example Subject
       */
      subject?: string;
      /**
       * @description Currency code of the model
       * @example EUR
       */
      currency?: string;
      /** @description Global discount applied on the model */
      discount?: {
        /**
         * @example amount
         * @enum {string}
         */
        type?: "percent" | "amount";
        /**
         * @description value of discount
         * @example 25.20
         */
        value?: string;
      };
      /**
       * @description Invoice's owner (staff id)
       * @example 145
       */
      owner_id?: number;
      rows?: ((({
          /** @enum {string} */
          type?: "single";
          /** @description Row description <br><br><b>Note:</b> Date variables, called "tag", can be integrated in this property, they will be replaced by the real value when converting the document template to a document <br>> Refer to endpoint's description of list available tags for document model. */
          description?: unknown;
        } & components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["0"]["allOf"]["1"]) | ({
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "shipping" | "packaging";
          /** @description Related shipping or packaging */
          related: {
            /** @description item identifier */
            id: number;
            /**
             * @description Type of item
             * @enum {string}
             */
            type?: "shipping" | "packaging";
          };
          /**
           * @description Unit amount without tax.
           * @example 90.22
           */
          unit_amount?: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @deprecated
           * @description Row reference - get name of shipping/packaging
           * @example MB880174910
           */
          reference?: string;
          /**
           * @deprecated
           * @description No row description for this type
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @description Type of the discount. Express her in percentage or with an amount
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        }) | ({
          /** @enum {string} */
          type?: "catalog";
          /** @description Row description <br><br><b>Note:</b> Date variables, called "tag", can be integrated in this property, they will be replaced by the real value when converting the document template to a document <br>> Refer to endpoint's description of list available tags for document model. */
          description?: unknown;
        } & components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["2"]["allOf"]["1"]) | ({
          /** @enum {string} */
          type?: "comment";
          /** @description Comment content <br><br><b>Note:</b> Date variables, called "tag", can be integrated in this property, they will be replaced by the real value when converting the document template to a document <br>> Refer to endpoint's description of list available tags for document model. */
          text?: unknown;
        } & components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["3"]["allOf"]["1"]) | {
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "title";
          text?: string;
        } | {
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "sub-total";
          /** @description Amount of the sub-total */
          amount?: string;
        } | {
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "break-line";
        } | {
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "break-page";
        })[]) | null;
      /**
       * @description Rate Category to apply on document
       * @example 777
       */
      rate_category_id: number;
    };
    /** Model */
    Model: {
      /**
       * @description Identifier of model
       * @example 7
       */
      id?: number;
      /**
       * @description Name of model
       * @example model#1
       */
      number?: string;
      /**
       * Format: date-time
       * @description Created date of model
       * @example 2018-02-21T12:00:00Z
       */
      created?: string;
      /**
       * @description Subject of model<br> > <i>the property can include custom tags, the list of available ones is available on response for endpoint `get./documents/models/tags`</i>
       *
       * @example Subject
       */
      subject?: string;
      /** @description Amounts of invoice, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the model
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the invoice */
      taxes?: readonly {
          id: number;
          label: string;
          rate: string;
          amount: string;
        }[];
      /** @description Global discount applied on the invoice */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: {
        /**
         * @description Unique ID
         * @example 6657
         */
        id?: number;
        /**
         * @description Type of owner
         * @example staff
         */
        type?: string;
      } & Record<string, never>;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
    };
    ModelOne: ({
      /**
       * @description Identifier of model
       * @example 7
       */
      id?: number;
      /**
       * @description Name of model
       * @example model#1
       */
      number?: string;
      /**
       * Format: date-time
       * @description Created date of model
       * @example 2018-02-21T12:00:00Z
       */
      created?: string;
      /**
       * @description Subject of model<br> > <i>the property can include custom tags, the list of available ones is available on response for endpoint `get./documents/models/tags`</i>
       *
       * @example Subject
       */
      subject?: string;
      /** @description Amounts of invoice, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the model
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the invoice */
      taxes?: readonly {
          id: number;
          label: string;
          rate: string;
          amount: string;
        }[];
      /** @description Global discount applied on the invoice */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
    }) & ({
      rows?: ((({
          /**
           * @description Row description<br> > <i>the property can include custom tags, the list of available ones is available on response for endpoint `get./documents/models/tags`</i>
           *
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
        }) & ({
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "single";
          /** @description Id of unit of measurement of quantity */
          unit_id?: number;
          /** @description Purchase amount */
          purchase_amount?: string;
          /**
           * @description Unit amount without tax.
           * @example 22.20
           */
          unit_amount: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @description Type of the discount. Express her in percentage or with an amount
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description Total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description Total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description Accounting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        })) | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["1"] | (({
          /**
           * @description Row description<br> > <i>the property can include custom tags, the list of available ones is available on response for endpoint `get./documents/models/tags`</i>
           *
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
        }) & ({
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "catalog";
          /** @description Related product or service */
          related: {
            /** @description item identifier */
            id: number;
            /**
             * @description Type of item
             * @enum {string}
             */
            type?: "product" | "service";
            /** @description declination identifier */
            declination_id?: number | null;
          };
          /**
           * @description Unit amount
           * @example 29.28
           */
          unit_amount?: string;
          /** @description Eco tax applied on the row */
          eco_tax?: ({
            /** @enum {string} */
            type?: "inc" | "excl";
            /** @example 22.44 */
            value?: string;
          }) | null;
          /** @description Purchase amount */
          purchase_amount?: string;
          /** @description Id of unit of measurement of quantity */
          unit_id?: number;
          /** @description Warehouse identifier */
          warehouse_id?: number | null;
          /** @description Bar code id */
          sku_id?: number | null;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        })) | ({
          /**
           * @description Comment<br> > <i>the property can include custom tags, the list of available ones is available on response for endpoint `get./documents/models/tags`</i>
           *
           * @example Aluminium rail 4x3m
           */
          text?: string;
        } & {
          /** @description Row Identifier */
          id?: number;
          /** @enum {string} */
          type: "comment";
          text?: string;
        }) | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["4"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["5"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["6"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["7"])[];
    });
    /** Account document collection */
    AccountDocumentCollection: {
      /**
       * pagination
       * @description The pagination
       */
      pagination: {
        /** @example 25 */
        limit: number;
        /** @example 152 */
        total: number;
        /** @example 25 */
        count: number;
        offset: number | string;
      };
      data: ({
          /**
           * Format: date
           * @description Date of the document
           */
          date: string;
          /**
           * @description Status of the invoice and credit note
           * @example draft
           * @enum {string}
           */
          status: "due" | "payinprogress" | "paid" | "late" | "stored" | "partialspend" | "spent" | "cancelled";
          /**
           * @description Document number
           * @example INV-20210611-0010
           */
          number?: string;
          /**
           * @description Total amount with taxes
           * @example 898.97
           */
          amount: string;
          /** @description Public link of document */
          public_link: string | null;
          /**
           * Format: uri
           * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
           */
          pdf_link: string;
        })[];
    };
    /** Document layouts collection */
    DocumentLayoutsCollection: {
      pagination: components["schemas"]["AccountDocumentCollection"]["pagination"];
      data: {
          /** @example 1 */
          id: number;
          /**
           * @description Name of the document layout
           * @example Document Layout no. 42
           */
          label: string;
          /**
           * @description True if the document layout is the default one
           * @example true
           */
          is_default: boolean;
        }[];
    };
    /**
     * CommentItem
     * @description Contains all properties + _embed for an Item endpoint
     */
    CommentItem: ({
      /**
       * @description Internal Comment ID
       * @example 1
       */
      id?: number;
      /** @description Owner of the comment */
      owner?: {
        /** @example 123 */
        id?: number;
        /**
         * @example staff
         * @enum {string}
         */
        type?: "staff" | "contact";
      };
      /** @description Comment content */
      description?: string;
      /**
       * Format: date-time
       * @description Modification date of the comment
       * @example 1970-01-01T00:00:00+00:00
       */
      updated?: string;
      /**
       * Format: date-time
       * @description Creation date of the comment
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /** @description Comment parent ID */
      parent_id?: number | null;
      /** @description Main object related to the comment (limit to 1) */
      related?: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact" | "item" | "estimate" | "creditnote" | "order" | "delivery" | "proforma" | "invoice" | "model" | "purchase-order" | "purchase-delivery" | "purchase-invoice" | "purchase-creditnote" | "redactor-template" | "redactor-document" | "campaign";
        })[];
      /**
       * @description Company linked to the comment
       * @example 123
       */
      company_id?: number | null;
      /**
       * @description Individual linked to the comment
       * @example 123
       */
      individual_id?: number | null;
      /**
       * @description Contact linked to the comment
       * @example 123
       */
      contact_id?: number | null;
      timetracking?: ({
        /**
         * @description Timetracking duration in seconds
         * @example 3600
         */
        duration?: number;
        /**
         * @description Timetracking service ID related
         * @example 6352439
         */
        service?: number;
        /**
         * @description Timetracking service name
         * @example Service name
         */
        name?: string | null;
      }) | null;
    }) & ({
      _embed?: {
        /** Owner (staff) assigned to the comment */
        readonly owner?: (components["schemas"]["Activity"]["_embed"]["author"] & Record<string, never>) | null;
        /** @description Objects linked to the comment */
        readonly related?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["2"])[];
        readonly company?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] & Record<string, never>) | null;
        readonly individual?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] & Record<string, never>) | null;
        readonly contact?: (components["schemas"]["ContactItem"]["allOf"]["0"] & Record<string, never>) | null;
        readonly acl?: Record<string, never> & components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["4"];
      };
    });
    /**
     * CommentFilters
     * @description The Comment filters
     */
    CommentFilters: {
      filters: {
        /**
         * Owners
         * @description Filter the comments list by owners
         */
        owners?: number[];
        /**
         * Created at
         * @description Filter the comments list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2021-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2021-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Updated at
         * @description Filter the comments list by modification date
         */
        updated?: {
          /**
           * Format: date-time
           * @example 2021-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2021-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Parent ID
         * @description Filter the comments list by parent ID
         * @example 123
         */
        parent_id?: number;
        /**
         * Related Objects
         * @description Filter the comments list by related objects
         */
        related_objects?: {
            /** @example opportunity */
            type?: string;
            /** @example 123 */
            id?: number;
          }[];
        /**
         * Companies
         * @description Filter the comments list by companies
         */
        companies?: number[];
        /**
         * Individuals
         * @description Filter the comments list by individuals
         */
        individuals?: number[];
        /**
         * Contacts
         * @description Filter the comments list by contacts
         */
        contacts?: number[];
      };
    };
    /**
     * Comment
     * @description Comment creation object
     */
    CommentCreateItem: ({
      /**
       * @description Comment content
       * @example Lorem ipsum dolor sit amet, consectetur adipiscing elit.
       */
      description?: string;
      /** @description if null provided, it'll delete existing timetracking entry for existing comment */
      timetracking?: components["schemas"]["CommentUpdateItem"]["timetracking"]["allOf"]["0"] | null;
    }) & Record<string, never> & ({
      /** @description Main object related to the comment (limit to 1) */
      related?: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact" | "item" | "estimate" | "creditnote" | "order" | "delivery" | "proforma" | "invoice" | "model" | "purchase-order" | "purchase-delivery" | "purchase-invoice" | "purchase-creditnote" | "redactor-template" | "redactor-document" | "campaign";
        })[];
      /** @description Comment parent ID */
      parent_id?: number;
      /** @description Ids of staffs mentioned in the comment */
      mentioned_staff_ids?: number[] | null;
      /**
       * Format: date-time
       * @description Date of creation of the comment
       */
      created?: string;
    });
    /**
     * Comment
     * @description Comment update object
     */
    CommentUpdateItem: {
      /**
       * @description Comment content
       * @example Lorem ipsum dolor sit amet, consectetur adipiscing elit.
       */
      description?: string;
      /** @description if null provided, it'll delete existing timetracking entry for existing comment */
      timetracking?: {
        /**
         * @description Timetracking duration in seconds
         * @example 3600
         */
        duration: number;
        /**
         * @description Timetracking service ID related
         * @example 6352439
         */
        service: number;
      } | null;
    };
    /** Contact */
    ContactItem: ({
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Civility of staff
       * @example mrs
       * @enum {string|null}
       */
      civility?: "mr" | "mrs" | "ms" | null;
      /**
       * @description Contact first name
       * @example John
       */
      first_name?: string | null;
      /**
       * @description Contact name
       * @example Doe
       */
      last_name?: string | null;
      /**
       * Format: email
       * @description Contact email
       * @example john.doe@example-company.com
       */
      email?: string | null;
      /**
       * Format: url
       * @description Contact website
       * @example http://example-john-doe.com
       */
      website?: string | null;
      /**
       * @description Contact phone number
       * @example +33100000000
       */
      phone_number?: string | null;
      /**
       * @description Contact mobile number
       * @example +33600000000
       */
      mobile_number?: string | null;
      /**
       * @description Contact Fax number
       * @example +33100000000
       */
      fax_number?: string | null;
      /**
       * @description Contact job
       * @example Financial
       */
      position?: string | null;
      /**
       * @description Contact birth date
       * @example 2000-05-29
       */
      birth_date?: string | null;
      /**
       * Format: url
       * @description Contact avatar
       * @example http://example-john-doe.com/avatar
       */
      avatar?: string | null;
      /**
       * @description Note on contact
       * @example An handed-written note describing this contact
       */
      note?: string;
      /**
       * @description Invoicing address unique ID
       * @example 9987
       */
      invoicing_address_id?: number | null;
      /**
       * @description Delivery address unique ID
       * @example 6547
       */
      delivery_address_id?: number | null;
      social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
      sync?: {
        /** @description Activate the mailchimp synchronization */
        mailchimp?: boolean;
        /** @description Activate the mailjet synchronization */
        mailjet?: boolean;
        /** @description Activate the simplemail synchronization */
        simplemail?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /**
       * @description Datetime of creating contact
       * @example 2020-05-29T11:22:03+02:00
       */
      created?: string;
      /**
       * @description Datetime of updating contact
       * @example 2020-05-29T11:22:03+02:00
       */
      updated?: string;
      /**
       * @description Status archived or not
       * @example false
       */
      is_archived?: boolean;
      /** @description list of campaign type subcribed */
      marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
    }) & ({
      _embed?: (({
        /** @description Invoicing address */
        invoicing_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
        /** @description Delivery address */
        delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
        /**
         * @description Count of opportunities
         * @example 2
         */
        opportunities?: number | null;
        /**
         * @description Count of estimates
         * @example 2
         */
        estimates?: number | null;
        /**
         * @description Count of invoices
         * @example 2
         */
        invoices?: number | null;
        /**
         * @description Count of orders
         * @example 2
         */
        orders?: number | null;
        /**
         * @description Count of deliveries
         * @example 2
         */
        deliveries?: number | null;
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"]) & ({
        /** @description Contact ACL */
        acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["1"] | null;
      });
    });
    /** ContactCollectionItem.yaml */
    ContactCollectionItem: components["schemas"]["ContactItem"]["allOf"]["0"] & {
      _embed?: components["schemas"]["ContactItem"]["allOf"]["1"]["_embed"]["allOf"]["0"]["allOf"]["0"];
    };
    /** contactCreateItem.yaml */
    ContactCreateItem: (components["schemas"]["ContactItem"]["allOf"]["0"] & {
      _embed?: components["schemas"]["ContactItem"]["allOf"]["1"]["_embed"]["allOf"]["0"];
    }) & ({
      /**
       * @description Contact name
       * @example Doe
       */
      last_name: string;
      /**
       * @description Owner of the contact (Staff id expected)
       * @example 112
       */
      owner_id?: number | null;
    });
    /** updateItem.yaml */
    ContactUpdateItem: components["schemas"]["ContactCreateItem"]["allOf"]["0"] & ({
      /**
       * @description Contact name
       * @example Doe
       */
      last_name?: string;
      /**
       * @description Datetime of creating contact
       * @example 2020-05-29T11:22:03+02:00
       */
      created?: string;
      /**
       * @description Owner of the contact (Staff id expected)
       * @example 112
       */
      owner_id?: number | null;
    });
    /**
     * contactFilters
     * @description The contact filters
     */
    ContactFilters: {
      /** @description contact filters */
      filters: {
        /**
         * Companies
         * @description Filter the contacts list by companies ID
         * @example [
         *   12,
         *   22
         * ]
         */
        companies?: number[];
        /**
         * Individuals
         * @description Filter the contacts list by individuals ID
         * @example [
         *   12,
         *   22
         * ]
         */
        individuals?: number[];
        /**
         * Created at
         * @description Filter the contact list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Updated at
         * @description Filter the contact list by last update date
         */
        updated?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Lastname
         * @description Filter the contact list by lastname (exact search)
         * @example John Doe
         */
        last_name?: string;
        /**
         * Birth date
         * @description Filter the contact list by birth date-time
         */
        birth_date?: {
          /**
           * Format: date
           * @example 2020-01-01
           */
          start?: string;
          /**
           * Format: date
           * @example 2020-02-01
           */
          end?: string;
        };
        /**
         * Email
         * @description Filter the contact list by email (exact search)
         * @example john.doe@example.com
         */
        email?: string;
        /**
         * Phone number
         * @description Filter the contact list by phone number (exact search)
         * @example +33100000000
         */
        phone_number?: string;
        /**
         * Mobile phone
         * @description Filter contact list by mobile number (exact search)
         * @example +33100000000
         */
        mobile_number?: string;
        /**
         * Contacts
         * @description Filter the contacts list by contacts ID
         * @example [
         *   12,
         *   22
         * ]
         */
        id?: number[];
        /**
         * Favourite filters
         * @description Id of favourite filters <br><i>(see endpoint to list favourite filters)</i>
         *
         * @example 10
         */
        favourite_filter?: number;
        /**
         * Is linked to a company or an individual
         * @description Filter contacts according to whether or not they are related to companies and individuals
         * @example false
         */
        is_linked?: boolean;
        /**
         * Country code
         * @description Filter the contacts list by country code (main address only)
         * @example FR
         */
        country_code?: string;
        /**
         * Postal code
         * @description Filter the contacts list by postal code (main address only)
         * @example [
         *   "17001",
         *   "17002"
         * ]
         */
        postal_code?: string[];
      };
    };
    /** Estimate */
    Estimate: ({
      /**
       * Format: date
       * @description Date of the estimate
       */
      date?: string;
      /**
       * @description Objects linked to the estimate :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only of type `client` or `prospect`
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       */
      related?: ({
          /** @enum {string} */
          type: "company" | "individual" | "opportunity";
          id: number;
        })[];
      /** @description Contact of company linked to the estimate */
      contact_id?: number | null;
      /** @description Staff in charge of the estimate */
      assigned_staff_id?: number;
      /**
       * @description Status of the estimate (draft if not provided at the creation)
       * @example draft
       * @enum {string}
       */
      status?: "draft" | "sent" | "read" | "accepted" | "refused" | "expired" | "advanced" | "partialinvoiced" | "invoiced" | "cancelled";
      /**
       * @description Estimate number
       * @example EST-20210611-0010
       */
      number?: string;
      /** @description Amounts of estimate with and without taxe */
      amounts?: {
        /**
         * @description Total shipping amount
         * @example 128.54
         */
        readonly shipping: string;
        /**
         * @description Total packaging amount
         * @example 40.24
         */
        readonly packaging: string;
        /**
         * @description Total without tax and without global discount
         * @example 933.07
         */
        readonly total_raw_excl_tax: string;
        /**
         * @description Total without tax and after discount applied
         * @example 821.10
         */
        readonly total_after_discount_excl_tax: string;
        /**
         * @description Total net without tax
         * @example 843.10
         */
        readonly total_excl_tax: string;
        /**
         * @description Total amount with taxes
         * @example 898.97
         */
        readonly total: string;
        /**
         * @description Total of primes added on document
         * @example 10.00
         */
        readonly total_primes_incl_tax?: string;
      };
      /** @description Currency code of estimate */
      currency?: string;
      /** @description Subject of estimate */
      subject?: string;
      /** @description Public link of estimate */
      public_link?: string | null;
      /** @description Public link is enabled */
      public_link_enabled?: boolean;
      /** @description payments methods allowed on the estimate */
      payment_method_ids?: number[] | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * Format: uri
       * @description Link to the pdf of estimate. /!\ Link is regenerate after an update of estimate
       */
      pdf_link?: string;
      /**
       * Format: date
       * @description Expiry date of the estimate
       */
      expiry_date?: string;
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document* */
        readonly enabled?: boolean;
      };
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id?: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id?: number;
      /**
       * @description Notes of the estimate
       * @example This estimate is very important<br />
       */
      note?: string;
      /**
       * Format: date
       * @description Date of the shipping
       * @example 2024-01-31
       */
      shipping_date?: string | null;
    }) & ({
      /**
       * @description Document ID
       * @example 6657
       */
      id: number;
      owner: {
        type: string;
        id: number;
      };
      /**
       * Format: date-time
       * @description Date of creation of document
       */
      created: string;
      /** @description Global discount applied on the document */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /** @description ID of the estimate's fiscal year */
      fiscal_year_id: number | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id: number;
      /** @description List of taxes used on the estimate */
      taxes?: {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * Format: date
       * @description Date of the shipping
       */
      shipping_date?: string | null;
    });
    EstimateCreate: components["schemas"]["Estimate"]["allOf"]["0"] & ({
      /** @description Owner of the estimate (staff id) */
      owner_id?: number;
      /** @description Document's rows */
      rows?: ((components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["0"]["allOf"]["1"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["1"] | components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["2"]["allOf"]["1"] | components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["3"]["allOf"]["1"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["4"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["5"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["6"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["7"])[]) | null;
      /** @description Global discount applied on the estimate */
      discount?: {
        /**
         * @example amount
         * @enum {string}
         */
        type?: "percent" | "amount";
        /**
         * @description value of discount
         * @example 25.20
         */
        value?: string;
      };
      parent?: OneOf<[{
        /** @enum {string} */
        type?: "model";
        /** @description Parent object id */
        id?: number;
      }, null]>;
      /**
       * @description Rate Category to apply on document (By default, the rate_category_id will be that of company)
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         * @example 2023-01-31
         */
        end?: string;
      } | null;
    });
    EstimateUpdate: components["schemas"]["Estimate"]["allOf"]["0"] & ({
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      rows?: ((components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["0"]["allOf"]["1"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["1"] | components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["2"]["allOf"]["1"] | components["schemas"]["ModelOne"]["allOf"]["1"]["rows"]["items"]["oneOf"]["3"]["allOf"]["1"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["4"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["5"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["6"] | components["schemas"]["CreateModel"]["rows"]["items"]["oneOf"]["7"] | ({
          /** @description Row Identifier */
          id: number;
          /** @description Id of unit of measurement of quantity */
          unit?: number;
          /** @description Purchase amount */
          purchase_amount?: string;
          /**
           * @description Unit amount without tax.
           * @example 22.20
           */
          unit_amount?: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @deprecated
           * @description Tax identifier. This field will be removed on 1 July 2022, use tax_id instead
           * @example 12
           */
          tax?: number;
          /**
           * @description Quantity
           * @example 7
           */
          quantity?: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
          }) | null;
          /**
           * @description Accouting code of row
           * @example 7576
           */
          accounting_code?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        }) | ({
          /** @description Row Identifier */
          id?: number;
          /**
           * @description Unit amount without tax.
           * @example 90.22
           */
          unit_amount?: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7
           */
          quantity: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
          }) | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        }) | ({
          /** @description Row Identifier */
          id: number;
          /**
           * @description Unit amount
           * @example 29.28
           */
          unit_amount?: string;
          /** @description Eco tax applied on the row */
          eco_tax?: ({
            /** @enum {string} */
            type?: "inc" | "excl";
            /** @example 22.44 */
            value?: string;
          }) | null;
          /** @description Purchase amount */
          purchase_amount?: string;
          /** @description Id of unit of measurement of quantity */
          unit?: number;
          /** @description Warehouse identifier */
          warehouse_id?: number | null;
          /** @description Bar code id */
          sku_id?: number | null;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @deprecated
           * @description Tax identifier. This field will be removed on 1 July 2022, use tax_id instead
           * @example 12
           */
          tax?: number;
          /**
           * @description Quantity
           * @example 7
           */
          quantity?: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
          }) | null;
          /**
           * @description Accouting code of row
           * @example 7576
           */
          accounting_code?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description If row is optional<br/> The special feature of these lines is that they are not taken into account in the calculation of the document.
           *
           * @example true
           */
          is_optional?: boolean;
        }) | {
          /** @description Row Identifier */
          id: number;
          text?: string;
        } | {
          /** @description Row Identifier */
          id: number;
        })[]) | null;
    });
    EstimateStatusUpdate: {
      /**
       * @description Status of the estimate
       * @example sent
       * @enum {string}
       */
      status?: "draft" | "sent" | "read" | "accepted" | "refused" | "expired" | "partialinvoiced" | "invoiced" | "cancelled";
    };
    /** Estimate collection item */
    EstimateCollection: {
      pagination: components["schemas"]["AccountDocumentCollection"]["pagination"];
      data: (components["schemas"]["EstimateOne"]["allOf"]["0"] & ({
          _embed?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["0"] & ({
            company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
            individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
            contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
            invoicing_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"];
            delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"];
            currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"];
            /** EstimateAcl */
            acl?: {
              /**
               * @description Document can be updated
               * @example true
               */
              can_be_updated?: boolean | null;
              /**
               * @description Document can be deleted
               * @example true
               */
              can_be_deleted?: boolean | null;
            };
            payment_method_ids?: {
                /** @description Payment method identifier */
                id?: number;
                /** @description Payment method label */
                label?: string;
              }[];
            fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
            /** @description Smart-tags linked */
            smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
          }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"];
        }))[];
    };
    /** Document aggregations */
    EstimateAggregations: {
      /** @description Total amount of document by status, require `currency` filter */
      amount_sum_by_status?: Record<string, never>;
      /** @description Number of document by status */
      count_by_status?: Record<string, never>;
    };
    EstimateOne: (components["schemas"]["Estimate"]["allOf"]["0"] & ({
      /**
       * @description Document ID
       * @example 6657
       */
      id: number;
      owner: {
        type: string;
        id: number;
      };
      /**
       * Format: date-time
       * @description Date of creation of document
       */
      created: string;
      /** @description Global discount applied on the document */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /** @description ID of the estimate's fiscal year */
      fiscal_year_id: number | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id: number;
      /** @description List of taxes used on the estimate */
      taxes?: {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * Format: date
       * @description Date of the shipping
       */
      shipping_date?: string | null;
    })) & {
      rows: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][];
    };
    EstimateCompute: {
      owner: {
        type: string;
        id: number;
      };
      rows?: (({
          /** @enum {string} */
          type: "single";
          /** @description Id of unit of measurement of quantity */
          unit_id?: number;
          /** @description Purchase amount */
          purchase_amount?: string;
          /**
           * @description Unit amount without tax.
           * @example 22.20
           */
          unit_amount: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @description Type of the discount. Express her in percentage or with an amount
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
        }) | ({
          /** @enum {string} */
          type: "shipping" | "packaging";
          /** @description Related shipping or packaging */
          related: {
            /** @description item identifier */
            id?: number;
            /**
             * @description Type of item
             * @enum {string}
             */
            type?: "shipping" | "packaging";
          };
          /**
           * @description Unit amount without tax.
           * @example 90.22
           */
          unit_amount?: string;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @deprecated
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @deprecated
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @description Type of the discount. Express her in percentage or with an amount
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
        }) | ({
          /** @enum {string} */
          type: "catalog";
          /** @description Related product or service */
          related: {
            /** @description item identifier */
            id?: number;
            /**
             * @description Type of item
             * @enum {string}
             */
            type?: "product" | "service";
          };
          /**
           * @description Unit amount
           * @example 29.28
           */
          unit_amount?: string;
          /** @description Eco tax applied on the row */
          eco_tax?: ({
            /** @enum {string} */
            type?: "inc" | "excl";
            /** @example 22.44 */
            value?: string;
          }) | null;
          /** @description Purchase amount */
          purchase_amount?: string;
          /** @description Id of unit of measurement of quantity */
          unit_id?: number;
          /** @description Warehouse identifier */
          warehouse_id?: number | null;
          /** @description Bar code id */
          sku_id?: number | null;
          /**
           * @description Tax identifier
           * @example 12
           */
          tax_id?: number;
          /**
           * @description Quantity
           * @example 7.2
           */
          quantity: string;
          /**
           * @description Row reference
           * @example MB880174910
           */
          reference?: string;
          /**
           * @description Row description
           * @example Aluminium rail 4x3m
           */
          description?: string | null;
          /** @description Discount applied on the row */
          discount?: ({
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            value?: string;
            /**
             * @description Total of all discount for this row
             * @example 400
             */
            total?: string;
          }) | null;
          /**
           * @description Tax rate
           * @example 20.00
           */
          tax_rate?: string;
          /**
           * @description Tax amount
           * @example 23.44
           */
          tax_amount?: string;
          /**
           * @description Tax label
           * @example tva
           */
          tax_label?: string;
          /**
           * @description total amount of row tax included
           * @example 1229.93
           */
          amount_tax_inc?: string;
          /**
           * @description total amount of row without tax
           * @example 445.33
           */
          amount_tax_exc?: string;
          /**
           * @description Accouting code id of row
           * @example 7576
           */
          accounting_code_id?: number;
          /**
           * @description Analytic code of row
           * @example divers
           */
          analytic_code?: string | null;
        }) | {
          /** @enum {string} */
          type: "comment";
          text?: string;
        } | {
          /** @enum {string} */
          type: "title";
          text?: string;
        } | {
          /** @enum {string} */
          type: "sub-total";
          /** @description Amount of the sub-total */
          amount?: string;
        } | {
          /** @enum {string} */
          type: "break-line";
        } | {
          /** @enum {string} */
          type: "break-page";
        })[];
      /**
       * Format: date
       * @description Date of the estimate
       */
      date: string;
      /**
       * @description Objects linked to the estimate :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only of type `client` or `prospect`
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       */
      related: ({
          /** @enum {string} */
          type: "company" | "individual";
          id: number;
        })[];
      /** @description Contact of company linked to the estimate */
      contact_id: number | null;
      /** @description Staff in charge of the estimate */
      assigned_staff_id: number;
      /**
       * @description Status of the estimate (draft if not provided at the creation)
       * @example draft
       * @enum {string}
       */
      status: "draft" | "sent" | "read" | "accepted" | "refused" | "expired" | "advanced" | "partialinvoiced" | "invoiced" | "cancelled";
      /**
       * @description Estimate number
       * @example EST-20210611-0010
       */
      number: string;
      /** @description Amounts of estimate with and without taxe */
      amounts: {
        /**
         * @description Total shipping amount
         * @example 128.54
         */
        readonly shipping: string;
        /**
         * @description Total packaging amount
         * @example 40.24
         */
        readonly packaging: string;
        /**
         * @description Total without tax and without global discount
         * @example 933.07
         */
        readonly total_raw_excl_tax: string;
        /**
         * @description Total without tax and after discount applied
         * @example 821.10
         */
        readonly total_after_discount_excl_tax: string;
        /**
         * @description Total net without tax
         * @example 843.10
         */
        readonly total_excl_tax: string;
        /**
         * @description Total amount with taxes
         * @example 898.97
         */
        readonly total: string;
      };
      /** @description Currency code of estimate */
      currency: string;
      /** @description Subject of estimate */
      subject: string;
      /** @description Public link of estimate */
      public_link: string | null;
      /** @description Public link is enabled */
      public_link_enabled: boolean;
      /** @description payments methods allowed on the estimate */
      payment_method_ids: number[] | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * Format: uri
       * @description Link to the pdf of estimate. /!\ Link is regenerate after an update of estimate
       */
      pdf_link?: string;
      /**
       * Format: date
       * @description Expiry date of the estimate
       */
      expiry_date?: string | null;
      /** @description List of taxes used on the estimate */
      taxes?: {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /** @description Global discount applied on the document */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
    };
    /**
     * estimate filters
     * @description The estimates filters
     */
    EstimateFilters: {
      /** @description estimates filters */
      filters: {
        /**
         * Created at
         * @description Filter the estimate list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Owners
         * @description Filter the estimate list by owner (staff id)
         */
        owners?: number[];
        /**
         * Document date
         * @description Filter the estimate list by date
         */
        date?: {
          /**
           * Format: date
           * @example 2020-01-01
           */
          start?: string;
          /**
           * Format: date
           * @example 2020-02-01
           */
          end?: string;
        };
        /** Related Objects */
        related_objects?: ({
            /**
             * @example company
             * @enum {string}
             */
            type?: "company" | "individual" | "opportunity";
            /** @example 22 */
            id?: number;
          })[];
        /**
         * Contact
         * @description Filter the estimate list by contact (contact id)
         */
        contacts?: number[];
        /**
         * Assigned staffs
         * @description Filter the estimate list by assigned staffs (staff id)
         */
        assigned_staff_ids?: number[];
        /**
         * Status
         * @description Filter the estimate list by status
         * @example [
         *   "draft",
         *   "sent",
         *   "read"
         * ]
         */
        status?: ("draft" | "sent" | "read" | "accepted" | "refused" | "expired" | "advanced" | "partialinvoiced" | "invoiced" | "cancelled")[];
        /**
         * number
         * @description Filter the estimate list by number (exact search)
         * @example DEVIS-0001
         */
        number?: string;
        /**
         * currency
         * @description Currency code (exact search)
         * @example EUR
         */
        currency?: string;
        favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
      };
    };
    /**
     * Embed for Estimate
     * @description Objects add to response. Use embed parameter
     */
    SaleEmbed: {
      _embed?: ({
        /**
         * Document Payment Terms
         * @description Terms of payment of document
         */
        payment_terms?: {
          /**
           * Payment terms configuration
           * @description Description payment configuration applied to the document
           */
          settings?: {
            /**
             * @description Type of payment terms generation method
             * @enum {string}
             */
            type?: "settings";
            /** @description Parameters of payment terms */
            value?: {
              /** @description Id of payment terms setting */
              id: number;
              /**
               * @description label of payment terms setting
               * @example Deadlines
               */
              label: string;
              /** @description Number of days added to document date for determine the due date */
              x_days?: number;
              /** @description Does the due date have to be fixed to the end of the month? (After the addition of x_days) */
              end_of_month?: boolean;
              /** @description Can the due date be overwritten in addition to the parameters ? */
              override_date?: boolean;
            };
          };
        } & {
          /** @description List of deadlines computed with the payment terms settings */
          computed_instalment_plan?: {
              /**
               * Format: date
               * @description due date
               */
              date?: string;
              /** @description Total amount */
              amount?: string;
            }[];
        };
      }) & ({
        /** Company */
        company?: {
          /**
           * @description Unique ID
           * @example 6657
           */
          id?: number;
          /** @enum {string} */
          type?: "prospect" | "client" | "supplier";
          /**
           * @description Company name
           * @example Example company
           */
          name?: string;
          /**
           * Format: email
           * @description Company email
           * @example contact@example-company.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Company website
           * @example http://example-company.com
           */
          website?: string | null;
          /**
           * @description Company phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Company mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Company Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          legal_france?: paths["/contacts/%7Bid%7D/companies"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["legal_france"];
          /**
           * @description Company Capital
           * @example 4000
           */
          capital?: string | null;
          /**
           * @description Company reference
           * @example CLI-1654
           */
          reference?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
          /**
           * @description Company Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Main contact unique ID
           * @example 6654
           */
          main_contact_id?: number | null;
          /**
           * @description Dunning contact unique ID
           * @example 6654
           */
          dunning_contact_id?: number | null;
          /**
           * @description Invoicing contact unique ID
           * @example 6654
           */
          invoicing_contact_id?: number | null;
          /**
           * @description Invoicing address unique ID
           * @example 9987
           */
          invoicing_address_id?: number | null;
          /**
           * @description Delivery address unique ID
           * @example 6547
           */
          delivery_address_id?: number | null;
          /**
           * @description Company accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Company accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
          /**
           * Format: date-time
           * @description Datetime of creating company
           * @example 2020-05-29T11:22:03+02:00
           */
          created?: string;
          /**
           * Format: date-time
           * @description Datetime of the last update of the company
           * @example 2020-05-29T11:22:03+02:00
           */
          updated_at?: string;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description Company business segment */
          business_segment?: {
            /** @example 3 */
            id?: number;
            /** @example Software publisher / Digital services company */
            label?: string;
          } | null;
          /** @description Number of employees of company */
          number_of_employees?: {
            /** @example 1 */
            id?: number;
            /** @example From 1 to 5 */
            label?: string;
          } | null;
          /** @description list of campaign type subcribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
        };
        /** Individual */
        individual?: {
          /**
           * @description Unique ID
           * @example 6657
           */
          id?: number;
          /** @enum {string} */
          type?: "prospect" | "client" | "supplier";
          /**
           * @description Individual contact lastname
           * @example Martin
           */
          last_name?: string;
          /**
           * @description Individual contact firstname
           * @example Jean
           */
          first_name?: string | null;
          /**
           * @description Civility of individual
           * @example mr
           * @enum {string|null}
           */
          civility?: "mr" | "mrs" | "ms" | null;
          /**
           * Format: email
           * @description Individual email
           * @example jean.martin@personal-example.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Individual website
           * @example http://personal-example.com
           */
          website?: string | null;
          /**
           * @description Phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          /**
           * @description Internal reference
           * @example IND-1654
           */
          reference?: string | null;
          /**
           * @description Note on individual
           * @example An handed-written note describing this individual
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
          /**
           * @description Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Main contact unique ID
           * @example 6654
           */
          main_contact_id?: number | null;
          /**
           * @description Dunning contact unique ID
           * @example 6654
           */
          dunning_contact_id?: number | null;
          /**
           * @description Invoicing contact unique ID
           * @example 6654
           */
          invoicing_contact_id?: number | null;
          /**
           * @description Invoicing address unique ID
           * @example 9987
           */
          invoicing_address_id?: number | null;
          /**
           * @description Delivery address unique ID
           * @example 6547
           */
          delivery_address_id?: number | null;
          /**
           * @description Accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
          /**
           * Format: date-time
           * @description Datetime of creation
           * @example 2020-05-29T11:22:03+02:00
           */
          created?: string;
          /**
           * Format: date-time
           * @description Datetime of the last update of the individual
           * @example 2020-05-29T11:22:03+02:00
           */
          updated_at?: string;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description list of campaign type subcribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
          sync?: {
            /** @description Activate the mailchimp synchronization */
            mailchimp?: boolean;
            /** @description Activate the mailjet synchronization */
            mailjet?: boolean;
            /** @description Activate the simplemail synchronization */
            simplemail?: boolean;
          };
        };
        contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
        /** Address */
        invoicing_address?: {
          /**
           * @description Unique ID
           * @example 6657
           */
          id?: number;
          /**
           * @description Address name
           * @example Main office
           */
          name?: string;
          /**
           * @description Address line one
           * @example 30 Commercial Road
           */
          address_line_1?: string | null;
          /**
           * @description Address line two
           * @example Finance and Accounting
           */
          address_line_2?: string | null;
          /**
           * @description Address line three
           * @example Lighthouse Promotions
           */
          address_line_3?: string | null;
          /**
           * @description Address line four
           * @example PO Box 215
           */
          address_line_4?: string | null;
          /**
           * @description Address postal code
           * @example 75012
           */
          postal_code?: string | null;
          /**
           * @description Address city name
           * @example Paris
           */
          city?: string;
          /**
           * @description Address country
           * @example France
           */
          country?: string | null;
          /**
           * @description Address country code
           * @example FR
           */
          country_code?: string;
          is_invoicing_address?: boolean;
          is_delivery_address?: boolean;
          geocode?: {
            /** @example 46.140862 */
            lat?: number | null;
            /** @example -1.168249 */
            lng?: number | null;
          };
        };
        delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"];
        /** Currency */
        currency?: {
          /**
           * @description Currency Identifier
           * @example 13
           */
          id?: number;
          /**
           * @description Currency code (EUR, USD..)
           * @example EUR
           */
          code?: string;
          /**
           * @description Currency symbol (€, $)
           * @example €
           */
          symbol?: string;
          /**
           * @description Is default currency?
           * @example true
           */
          is_default?: boolean;
        };
        /** EstimateAcl */
        acl?: {
          /**
           * @description Document can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Document can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
        };
        payment_method_ids?: {
            /** @description Payment method identifier */
            id?: number;
            /** @description Payment method label */
            label?: string;
          }[];
        /** Fiscal year */
        fiscal_year?: {
          /** @description Fiscal year's ID */
          id?: number;
          /**
           * Format: date
           * @description Start date of the fiscal yaer
           */
          start_at?: string;
          /**
           * Format: date
           * @description End date of the fiscal year
           */
          end_at?: string;
        };
        /** @description Smart-tags linked */
        smart_tags?: {
            /**
             * @description value of smart tags
             * @example smart tag
             */
            value?: string;
            /**
             * @description id of smart tags
             * @example 55
             */
            id?: number;
          }[] | null;
      }) & ({
        /** @description Custom-fields values requested */
        custom_fields?: ((paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["1"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["2"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["3"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["4"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["5"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["6"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["7"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["8"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["9"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["10"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["11"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["12"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["13"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["14"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["15"] | paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["16"])[]) | null;
      });
    };
    /**
     * Embed for Estimate
     * @description Objects add to response. Use embed parameter
     */
    EstimateOneEmbed: {
      _embed?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["0"] & ({
        /** @description Discount including taxes of document */
        discount_incl_taxes?: {
          /**
           * @description identifier of discount
           * @example 31
           */
          id?: number;
          /**
           * @description Reference of discount
           * @example Halloween five last day
           */
          reference?: string;
          /**
           * @description Name of discount
           * @example Halloween promotion
           */
          name?: string;
          /**
           * @description Description visible on the document
           * @example For purchases made during the last five days of October
           */
          description?: string;
          /**
           * @description Unit id
           * @example 31
           */
          unit_id?: number;
          /**
           * @description Amount of unit
           * @example 31
           */
          unit_amount?: string;
          /**
           * @description Quantity of discounts
           * @example 2
           */
          quantity?: number;
          /**
           * @description Unit amount multiplied by quantity
           * @example 62
           */
          total_amount?: string;
          /**
           * @description <ul><li>If the accounting code is not empty, we use it.</li> <li>If the accounting code is empty AND if the account has activated dedicated accounting codes for discounts including VAT, we use it.</li> <li>Otherwise, we use the default accounting code for companies.</li></ul>
           *
           * @example 31
           */
          accounting_code_id?: number | null;
        };
      }) & ({
        company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
        invoicing_address?: unknown;
        delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"];
        currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"];
        /** EstimateAcl */
        acl?: {
          /**
           * @description Document can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Document can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
        };
        payment_method_ids?: {
            /** @description Payment method identifier */
            id?: number;
            /** @description Payment method label */
            label?: string;
          }[];
        fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"];
    };
    /** Address */
    Address: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Address name
       * @example Main office
       */
      name?: string;
      /**
       * @description Address line one
       * @example 30 Commercial Road
       */
      address_line_1?: string | null;
      /**
       * @description Address line two
       * @example Finance and Accounting
       */
      address_line_2?: string | null;
      /**
       * @description Address line three
       * @example Lighthouse Promotions
       */
      address_line_3?: string | null;
      /**
       * @description Address line four
       * @example PO Box 215
       */
      address_line_4?: string | null;
      /**
       * @description Address postal code
       * @example 75012
       */
      postal_code?: string | null;
      /**
       * @description Address city name
       * @example Paris
       */
      city?: string;
      /**
       * @description Address country
       * @example France
       */
      country?: string | null;
      /**
       * @description Address country code
       * @example FR
       */
      country_code?: string;
      is_invoicing_address?: boolean;
      is_delivery_address?: boolean;
      geocode?: {
        /** @example 46.140862 */
        lat?: number | null;
        /** @example -1.168249 */
        lng?: number | null;
      };
    };
    AddressCreate: {
      /**
       * @description Address name
       * @example Main office
       */
      name: string;
      /**
       * @description Address line one
       * @example 30 Commercial Road
       */
      address_line_1: string;
      /**
       * @description Address line two
       * @example Finance and Accounting
       */
      address_line_2?: string | null;
      /**
       * @description Address line three
       * @example Lighthouse Promotions
       */
      address_line_3?: string | null;
      /**
       * @description Address line four
       * @example PO Box 215
       */
      address_line_4?: string | null;
      /**
       * @description Address postal code
       * @example 75012
       */
      postal_code: string;
      /**
       * @description Address city name
       * @example Paris
       */
      city: string;
      /**
       * @description Address country code
       * @example FR
       */
      country_code: string;
      /** @description default to true if no invoicing address is already defined, false otherwise */
      is_invoicing_address?: boolean;
      /** @description default to true if no delivery address is already defined, false otherwise */
      is_delivery_address?: boolean;
      geocode?: {
        /** @example 46.140862 */
        lat?: number | null;
        /** @example -1.168249 */
        lng?: number | null;
      };
    };
    AddressUpdate: {
      /**
       * @description Address name
       * @example Main office
       */
      name?: string;
      /**
       * @description Address line one
       * @example 30 Commercial Road
       */
      address_line_1?: string;
      /**
       * @description Address line two
       * @example Finance and Accounting
       */
      address_line_2?: string | null;
      /**
       * @description Address line three
       * @example Lighthouse Promotions
       */
      address_line_3?: string | null;
      /**
       * @description Address line four
       * @example PO Box 215
       */
      address_line_4?: string | null;
      /**
       * @description Address postal code
       * @example 75012
       */
      postal_code?: string;
      /**
       * @description Address city name
       * @example Paris
       */
      city?: string;
      /**
       * @description Address country code
       * @example FR
       */
      country_code?: string;
      is_invoicing_address?: boolean;
      is_delivery_address?: boolean;
      geocode?: {
        /** @example 46.140862 */
        lat?: number | null;
        /** @example -1.168249 */
        lng?: number | null;
      };
    };
    /**
     * Staff Schemas
     * @description Staff schemas according of current user level of visibility on staffs
     */
    Staff: ({
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Staff last name
       * @example Smith
       */
      lastname?: string | null;
      /**
       * @description Staff first name
       * @example John
       */
      firstname?: string | null;
      /**
       * Format: email
       * @description Staff email address
       * @example john@example-company.com
       */
      email?: string;
      /**
       * Format: uri
       * @description Avatar url
       */
      avatar?: string | null;
      /**
       * @description Staff status
       * @enum {string}
       */
      status?: "ok" | "blocked" | "deleted";
      /**
       * @description Staff position
       * @example Sales manager
       */
      position?: string | null;
    }) & ({
      /**
       * @description Staff phone number
       * @example +33100000000
       */
      phone_number?: string | null;
      /**
       * @description Staff mobile number
       * @example +33600000000
       */
      mobile_number?: string | null;
      /**
       * @description Staff fax number
       * @example +33500000000
       */
      fax_number?: string | null;
      /** @description Staff groups */
      groups?: (readonly {
          /** @example 1 */
          id?: number;
          /** @example Sales */
          name?: string;
        }[]) | null;
      /**
       * @description Civility of staff
       * @example mrs
       * @enum {string|null}
       */
      civility?: "mr" | "mrs" | "ms" | null;
      /**
       * Format: date-time
       * @description Creation date of the staff
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * @description Staff privilège profile
       * @example 3443
       */
      profile?: number;
      /** @description Staff team position */
      team?: {
        /** @example -1 */
        id?: number;
        /** @example Commercial */
        name?: string;
      } | null;
      /** @description Staff job */
      job?: {
        /** @example -1 */
        id?: number;
        /** @example Office manager */
        name?: string;
      } | null;
      /**
       * @description Staff time zone
       * @example Europe/Paris
       */
      timezone?: string;
      /**
       * @description Staff language
       * @example fr
       */
      language?: string;
    });
    /** Staff restricted visibility */
    StaffRestrictedView: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Staff last name
       * @example Smith
       */
      lastname?: string | null;
      /**
       * @description Staff first name
       * @example John
       */
      firstname?: string | null;
      /**
       * Format: email
       * @description Staff email address
       * @example john@example-company.com
       */
      email?: string;
      /**
       * Format: uri
       * @description Avatar url
       */
      avatar?: string | null;
      /**
       * @description Staff status
       * @enum {string}
       */
      status?: "ok" | "blocked" | "deleted";
      /**
       * @description Staff position
       * @example Sales manager
       */
      position?: string | null;
    };
    /**
     * Staff
     * @description Staff update request body
     */
    StaffUpdateItem: {
      /**
       * @description Staff last name
       * @example Smith
       */
      lastname?: string;
      /**
       * @description Staff first name
       * @example John
       */
      firstname?: string;
      /**
       * Format: email
       * @description Staff email address
       * @example john@example-company.com
       */
      email?: string;
      /**
       * @description Staff phone number
       * @example +33100000000
       */
      phone_number?: string | null;
      /**
       * @description Staff mobile number
       * @example +33600000000
       */
      mobile_number?: string | null;
      /**
       * @description Staff fax number
       * @example +33500000000
       */
      fax_number?: string | null;
      /**
       * @description Civility of staff
       * @example mrs
       * @enum {string|null}
       */
      civility?: "mr" | "mrs" | "ms" | null;
      /**
       * @description Staff position
       * @example Sales manager
       */
      position?: string | null;
      /**
       * @description Staff privilège profile
       * @example 3443
       */
      profile?: number;
      /**
       * @description Staff team position
       * @example -1
       */
      team?: number;
      /**
       * @description Staff job
       * @example -1
       */
      job?: number;
      /**
       * @description Staff time zone
       * @example Europe/Paris
       */
      timezone?: string;
      /**
       * @description Staff language
       * @example fr
       */
      language?: string;
      /** Licenses */
      licenses?: {
          /**
           * @description License identifier
           * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
           */
          id?: string;
        }[];
      /**
       * @description Status of the staff access <br>If your account contains licenses, those already attached to this collaborator will remain so, you will have to specify the "licenses" property to free the licenses
       *
       * @example true
       */
      is_active?: boolean;
    };
    /** Staff preferences */
    StaffPreferences: {
      /**
       * @description Staff timezone
       * @example Europe/Paris
       */
      timezone?: string;
      /**
       * @description display phone number format
       * @example international
       * @enum {string}
       */
      format_phone_number?: "international" | "national";
      /**
       * @description display date format
       * @example DD-MM-YYYY
       * @enum {string}
       */
      format_date?: "MM-DD-YYYY" | "DD-MM-YYYY";
      /**
       * @description display hour format
       * @example 24
       * @enum {string}
       */
      format_hour?: 12 | 24;
      /**
       * @description current currency for staff
       * @example EUR
       */
      currency?: string;
    };
    /** Staff ACL */
    StaffAcl: {
      /**
       * @description Is allowed to view companies
       * @example true
       */
      view_companies?: boolean;
      /**
       * @description Is allowed to create companies
       * @example true
       */
      create_companies?: boolean;
      /**
       * @description Is allowed to update companies
       * @example true
       */
      update_companies?: boolean;
      /**
       * @description Is allowed to delete companies
       * @example true
       */
      delete_companies?: boolean;
      /**
       * @description Is allowed to view individuals
       * @example true
       */
      view_individuals?: boolean;
      /**
       * @description Is allowed to create individuals
       * @example true
       */
      create_individuals?: boolean;
      /**
       * @description Is allowed to update individuals
       * @example true
       */
      update_individuals?: boolean;
      /**
       * @description Is allowed to delete individuals
       * @example true
       */
      delete_individuals?: boolean;
      /**
       * @description Is allowed to view clients
       * @example true
       */
      view_clients?: boolean;
      /**
       * @description Is allowed to create clients
       * @example true
       */
      create_clients?: boolean;
      /**
       * @description Is allowed to update clients
       * @example true
       */
      update_clients?: boolean;
      /**
       * @description Is allowed to delete clients
       * @example true
       */
      delete_clients?: boolean;
      /**
       * @description Is allowed to view prospects
       * @example true
       */
      view_prospects?: boolean;
      /**
       * @description Is allowed to create prospects
       * @example true
       */
      create_prospects?: boolean;
      /**
       * @description Is allowed to update prospects
       * @example true
       */
      update_prospects?: boolean;
      /**
       * @description Is allowed to delete prospects
       * @example true
       */
      delete_prospects?: boolean;
      /**
       * @description Is allowed to view suppliers
       * @example true
       */
      view_suppliers?: boolean;
      /**
       * @description Is allowed to create suppliers
       * @example true
       */
      create_suppliers?: boolean;
      /**
       * @description Is allowed to update suppliers
       * @example true
       */
      update_suppliers?: boolean;
      /**
       * @description Is allowed to delete suppliers
       * @example true
       */
      delete_suppliers?: boolean;
      /**
       * @description Is allowed to view contacts
       * @example true
       */
      view_contacts?: boolean;
      /**
       * @description Is allowed to create contacts
       * @example true
       */
      create_contacts?: boolean;
      /**
       * @description Is allowed to update contacts
       * @example true
       */
      update_contacts?: boolean;
      /**
       * @description Is allowed to delete contacts
       * @example true
       */
      delete_contacts?: boolean;
      /**
       * @description Is allowed to view opportunities
       * @example true
       */
      view_opportunities?: boolean;
      /**
       * @description Is allowed to create opportunities
       * @example true
       */
      create_opportunities?: boolean;
      /**
       * @description Is allowed to update opportunities
       * @example true
       */
      update_opportunities?: boolean;
      /**
       * @description Is allowed to delete opportunities
       * @example true
       */
      delete_opportunities?: boolean;
      /**
       * @description Is allowed to view estimates
       * @example true
       */
      view_estimates?: boolean;
      /**
       * @description Is allowed to create estimates
       * @example true
       */
      create_estimates?: boolean;
      /**
       * @description Is allowed to update estimates
       * @example true
       */
      update_estimates?: boolean;
      /**
       * @description Is allowed to delete estimates
       * @example true
       */
      delete_estimates?: boolean;
      /**
       * @description Is allowed to view phone calls
       * @example true
       */
      view_phone_calls?: boolean;
      /**
       * @description Is allowed to create phone calls
       * @example true
       */
      create_phone_calls?: boolean;
      /**
       * @description Is allowed to update phone calls
       * @example true
       */
      update_phone_calls?: boolean;
      /**
       * @description Is allowed to delete phone calls
       * @example true
       */
      delete_phone_calls?: boolean;
      /**
       * @description Is allowed to view document models
       * @example true
       */
      view_document_models?: boolean;
      /**
       * @description Is allowed to create document models
       * @example true
       */
      create_document_models?: boolean;
      /**
       * @description Is allowed to update document models
       * @example true
       */
      update_document_models?: boolean;
      /**
       * @description Is allowed to delete document models
       * @example true
       */
      delete_document_models?: boolean;
      /**
       * @description Is allowed to view invoices
       * @example true
       */
      view_invoices?: boolean;
      /**
       * @description Is allowed to create invoices
       * @example true
       */
      create_invoices?: boolean;
      /**
       * @description Is allowed to update invoices
       * @example true
       */
      update_invoices?: boolean;
      /**
       * @description Is allowed to delete invoices
       * @example true
       */
      delete_invoices?: boolean;
      /** @description Is allowed to validate invoices */
      validate_invoices?: boolean;
      /**
       * @description Is allowed to view credit notes
       * @example true
       */
      view_credit_notes?: boolean;
      /**
       * @description Is allowed to create credit notes
       * @example true
       */
      create_credit_notes?: boolean;
      /**
       * @description Is allowed to update credit notes
       * @example true
       */
      update_credit_notes?: boolean;
      /**
       * @description Is allowed to delete credit notes
       * @example true
       */
      delete_credit_notes?: boolean;
      /**
       * @description Is allowed to validate credit notes
       * @example true
       */
      validate_credit_notes?: boolean;
      /**
       * @description Is allowed to view orders
       * @example true
       */
      view_orders?: boolean;
      /**
       * @description Is allowed to create orders
       * @example true
       */
      create_orders?: boolean;
      /**
       * @description Is allowed to update orders
       * @example true
       */
      update_orders?: boolean;
      /**
       * @description Is allowed to delete orders
       * @example true
       */
      delete_orders?: boolean;
      /**
       * @description Is allowed to view deliveries
       * @example true
       */
      view_deliveries?: boolean;
      /**
       * @description Is allowed to view proformas
       * @example true
       */
      view_proformas?: boolean;
      /**
       * @description Is allowed to view purchase invoices
       * @example true
       */
      view_purchase_invoices?: boolean;
      /**
       * @description Is allowed to view purchase credit notes
       * @example true
       */
      view_purchase_credit_notes?: boolean;
      /**
       * @description Is allowed to view purchase deliveries
       * @example true
       */
      view_purchase_deliveries?: boolean;
      /**
       * @description Is allowed to view purchase orders
       * @example true
       */
      view_purchase_orders?: boolean;
      /**
       * @description Is allowed to view items
       * @example true
       */
      view_items?: boolean;
      /**
       * @description Is allowed to create items
       * @example true
       */
      create_items?: boolean;
      /**
       * @description Is allowed to update items
       * @example true
       */
      update_items?: boolean;
      /**
       * @description Is allowed to delete items
       * @example true
       */
      delete_items?: boolean;
      /**
       * @description Is allowed to view payments
       * @example true
       */
      view_payments?: boolean;
      /**
       * @description Is allowed to create payments
       * @example true
       */
      create_payments?: boolean;
      /**
       * @description Is allowed to update payments
       * @example true
       */
      update_payments?: boolean;
      /**
       * @description Is allowed to delete payments
       * @example true
       */
      delete_payments?: boolean;
      /**
       * @description Is allowed to attach existing payments to objects
       * @example true
       */
      attach_payments?: boolean;
      /**
       * @description Is allowed to view subscriptions
       * @example true
       */
      view_subscriptions?: boolean;
      /**
       * @description Is allowed to create subscriptions
       * @example true
       */
      create_subscriptions?: boolean;
      /**
       * @description Is allowed to update subscriptions
       * @example true
       */
      update_subscriptions?: boolean;
      /**
       * @description Is allowed to delete subscriptions
       * @example true
       */
      delete_subscriptions?: boolean;
      /**
       * @description Is allowed to view cashflow
       * @example true
       */
      view_cashflow?: boolean;
      /**
       * @description Is allowed to create cashflow
       * @example true
       */
      create_cashflow?: boolean;
      /**
       * @description Is allowed to view files
       * @example true
       */
      view_files?: boolean;
      /**
       * @description Is allowed to attach files
       * @example true
       */
      attach_files?: boolean;
      /**
       * @description Is allowed to delete files
       * @example true
       */
      delete_files?: boolean;
      /**
       * @description Is allowed to view support tickets
       * @example true
       */
      view_tickets?: boolean;
    };
    /**
     * Staff
     * @description Staff creation request body
     */
    StaffCreateItem: {
      /**
       * @description Staff last name
       * @example Smith
       */
      lastname: string;
      /**
       * @description Staff first name
       * @example John
       */
      firstname: string;
      /**
       * Format: email
       * @description Staff email address
       * @example john@example-company.com
       */
      email: string;
      /**
       * @description Staff phone number
       * @example +33100000000
       */
      phone_number?: string | null;
      /**
       * @description Staff mobile number
       * @example +33600000000
       */
      mobile_number?: string | null;
      /**
       * @description Staff fax number
       * @example +33500000000
       */
      fax_number?: string | null;
      /**
       * @description Civility of staff
       * @example mrs
       * @enum {string|null}
       */
      civility: "mr" | "mrs" | "ms" | null;
      /**
       * @description Staff position
       * @example Sales manager
       */
      position?: string | null;
      /**
       * @description Staff privilège profile
       * @example 3443
       */
      profile: number;
      /**
       * @description Staff team position
       * @example -1
       */
      team: number;
      /**
       * @description Staff job
       * @example -1
       */
      job: number;
      /**
       * @description Staff time zone
       * @example Europe/Paris
       */
      timezone: string;
      /**
       * @description Staff language
       * @example fr
       */
      language: string;
      /**
       * @description Staff onboarding on first connection
       * @example true
       */
      first_connection_onboarding: boolean;
      /** Licenses */
      licenses?: {
          /**
           * @description License identifier
           * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
           */
          id?: string;
        }[];
    };
    /** Staff search result */
    StaffAutocompleteResultItem: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: string;
      /** @description Main object */
      object?: {
        /** @default staff */
        type?: string;
        /** @default staff */
        sub_type?: string | null;
        /** @example 11 */
        id?: number;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /**
       * Format: datetime
       * @description Created datetime of object
       * @example 2020-05-29T11:22:03+02:00
       */
      created?: string;
      /**
       * Format: datetime
       * @description updated datetime of object
       * @example 2020-05-29T11:22:03+02:00
       */
      updated?: string;
      /**
       * @description Staff status is archived
       * @example false
       */
      is_archived?: boolean;
      /**
       * Format: text
       * @description Staff first name
       * @example John
       */
      first_name?: string | null;
      /**
       * Format: text
       * @description Staff last name
       * @example Doe
       */
      last_name?: string | null;
      /**
       * @description Staff phone number
       * @example +33100000000
       */
      phone_number?: string | null;
      /**
       * @description Staff mobile number
       * @example +33100000000
       */
      mobile_number?: string | null;
      /** @description Staff active status */
      blocked?: boolean;
      /**
       * Format: email
       * @description Staff email
       * @example john.doe@example-company.com
       */
      email?: string | null;
      /**
       * @description Staff job
       * @example Financial
       */
      position?: string | null;
    };
    Social: {
      /**
       * Format: url
       * @description Twitter account
       * @example https://twitter.com/example
       */
      twitter?: string | null;
      /**
       * Format: url
       * @description Facebook account
       * @example https://facebook.com/example
       */
      facebook?: string | null;
      /**
       * Format: url
       * @description Linkedin account
       * @example https://linkedin.com/example
       */
      linkedin?: string | null;
      /**
       * Format: url
       * @description Viadeo account
       * @example https://viadeo.com/example
       */
      viadeo?: string | null;
    };
    Owner: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Type of owner
       * @example staff
       */
      type?: string;
    };
    /**
     * pagination
     * @description The pagination
     */
    Pagination: {
      /** @example 25 */
      limit: number;
      /** @example 152 */
      total: number;
      /** @example 25 */
      count: number;
      offset: number | string;
    };
    /**
     * Favourite filters
     * @description Favourite filters for entity
     */
    FavouriteFilters: {
        /**
         * @description Favourite filters name
         * @example Created this year
         */
        type?: string;
        /**
         * @description Favourite filters id
         * @example 1
         */
        id?: number;
      }[];
    /** @description The deals activity */
    Deals: {
      /**
       * @description Id of activity
       * @example 2wto807ysxa
       */
      id?: string;
      /**
       * @description Event type
       * @example task.created
       */
      event?: string;
      author?: {
        /**
         * @example staff
         * @enum {string}
         */
        type?: "staff";
        /** @example 1024 */
        id?: number;
      };
      /**
       * Format: date-time
       * @description Date of activity
       */
      event_date?: string;
      /**
       * Format: date-time
       * @description Due date of activity
       */
      due_date?: string;
      /** @description Details of events */
      event_details?: {
        [key: string]: unknown;
      };
      /**
       * @description Additional informations
       * @example {
       *   "old": "client",
       *   "new": "prospect"
       * }
       */
      event_more?: {
        [key: string]: unknown;
      };
      /** @description Event object of activity */
      object?: {
        /** @example task */
        type: string;
        id: string | number;
        model?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | ({
          /**
           * @description Internal Opportunity ID
           * @example 1
           */
          id?: number;
          /**
           * @description External Opportunity ID
           * @example OPP-1155
           */
          number?: string;
          /**
           * @description Opportunity name
           * @example New website
           */
          name?: string;
          /** @description Source of opportunity creation */
          source?: {
            /** @example 1 */
            id?: number;
            /** @example Internal */
            name?: string;
          };
          /**
           * Format: date
           * @description Due date of the opportunity
           * @example 1970-01-01
           */
          due_date?: string | null;
          /**
           * Format: date-time
           * @description Creation date of the opportunity
           * @example 1970-01-01T00:00:00+00:00
           */
          created?: string;
          /**
           * Format: date-time
           * @description Date of last opportunity status update
           * @example 1970-01-01T00:00:00+00:00
           */
          updated_status?: string | null;
          /**
           * @description Opportunity status
           * @example won
           * @enum {string}
           */
          status?: "open" | "won" | "lost" | "cancelled" | "closed" | "late";
          /** @description Potential amount of the opportunity with the currency */
          amount?: {
            /**
             * @description Amount
             * @example 72000.99
             */
            value?: string;
            /**
             * @description Currency (ISO 4217)
             * @example EUR
             */
            currency?: string;
          };
          /** @description Current pipeline */
          pipeline?: {
            /** @example 9763 */
            id?: number;
            /** @example Commercial North */
            name?: string;
          };
          /** @description Current step */
          step?: {
            /** @example 299 */
            id?: number;
            /** @example Prospection */
            name?: string;
          };
          /**
           * @description Opportunity probability
           * @example 75
           */
          probability?: number;
          /** @description Opportunity note */
          note?: string;
          /** @description Staff owning the opportunity */
          owner?: {
            /** @example 12 */
            id?: number;
            /**
             * @example staff
             * @enum {string}
             */
            type?: "staff" | "thirdcontact";
          };
          /**
           * @description Staff(s) ID assigned to the opportunity
           * @example [
           *   133,
           *   299
           * ]
           */
          assigned_staff_ids?: number[] | null;
          /**
           * @description Contact(s) ID responsible for the opportunity
           * @example [
           *   222,
           *   876
           * ]
           */
          contact_ids?: number[] | null;
          /**
           * @description Company linked to the opportunity
           * @example 1220
           */
          company_id?: number | null;
          /**
           * @description Individual linked to the opportunity
           * @example 299
           */
          individual_id?: number | null;
          /**
           * @description Internal ID of the main opportunity document
           * @example 22
           */
          main_doc_id?: number | null;
          related?: components["schemas"]["OpportunityUpdate"]["related"];
          _embed?: components["schemas"]["OpportunityItem"]["_embed"];
        }) | ({
          /**
           * @description Task ID
           * @example 6657
           */
          id?: number;
          /**
           * @description Task title
           * @example Meeting
           */
          title?: string | null;
          /**
           * @description Task description
           * @example Monthly meeting with consulting team
           */
          description?: string | null;
          /**
           * @description Task status
           * @example todo
           * @enum {string}
           */
          status?: "todo" | "done";
          /**
           * @description Task is private or public
           * @default false
           */
          is_private?: boolean;
          /**
           * Format: date-time
           * @description due date and time of task
           * @example 2020-01-01T00:00:00+01:00
           */
          due_date?: string;
          assigned_staff_ids?: number[] | null;
          label?: components["schemas"]["LabelBaseItem"]["label"];
          /**
           * Format: date-time
           * @description Updated date of task (system)
           * @example 2020-01-01T00:00:00+01:00
           */
          updated?: string;
          /**
           * Format: date-time
           * @description Created date of task (system)
           * @example 2020-01-01T00:00:00+01:00
           */
          created?: string;
          /** @description Main object related to the task (limit to 1). */
          related?: ({
              /** @example 1 */
              id?: number;
              /**
               * @example opportunity
               * @enum {string}
               */
              type?: "opportunity" | "company" | "individual" | "contact" | "invoice" | "creditnote" | "estimate" | "order";
            })[];
          /** @description Owner of the task */
          owner?: {
            /**
             * @description owner type
             * @enum {string}
             */
            type?: "staff";
            /**
             * @description Owner id
             * @example 51
             */
            id?: number;
          };
          /**
           * @description Company linked to the task
           * @example 1
           */
          company_id?: number | null;
          /**
           * @description Individual linked to the task
           * @example 92
           */
          individual_id?: number | null;
          /**
           * @description Contact linked to the task
           * @example 958
           */
          contact_id?: number | null;
          /**
           * @description Priority level of the task
           * @example 1
           */
          priority?: number;
        }) | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | ({
          /** @description Id of calendar event */
          id?: number;
          owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
          /** @description Title of calendar event */
          title?: string;
          /** @description Description for calendar event */
          description?: string;
          /** @description Calendar Event is private or public */
          is_private?: boolean;
          /**
           * @description Calendar event is scheduled for the whole day
           * @default false
           */
          all_day?: boolean;
          /**
           * Format: date-time
           * @description Calendar Event starting date / hour
           * @example 2020-01-01T00:00:00+01:00
           */
          datetime_start?: string;
          /**
           * Format: date-time
           * @description Calendar Event ending date / hour
           * @example 2020-01-01T00:00:00+01:00
           */
          datetime_end?: string;
          /** @description Participants (Staff, Contact or External Participants) */
          participants?: ({
              /** @description Id of participant */
              id?: number | string;
              /**
               * @description Type of participant
               * @enum {string}
               */
              type?: "staff" | "contact" | "external";
            })[];
          label?: components["schemas"]["LabelBaseItem"]["label"];
          /**
           * Format: date-time
           * @description Creation date / hour
           * @example 2020-05-29T11:22:03+02:00
           */
          created?: string;
          /**
           * Format: date-time
           * @description Last update date / hour
           * @example 2020-05-29T11:22:03+02:00
           */
          updated?: string;
          /** @description Calendar */
          provider_calendar?: {
            id?: string;
            name?: string;
          } | null;
          /** @description Main object related to the calendar event (limit to 1). */
          related?: ({
              /** @example 1 */
              id?: number;
              /**
               * @example opportunity
               * @enum {string}
               */
              type?: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
            })[];
          /** @description Company linked to calendar event */
          company_id?: number | null;
          /** @description Individual linked to calendar event */
          individual_id?: number | null;
          /** @description Contact linked to calendar event */
          contact_id?: number | null;
          /** @description Priority level of the calendar event */
          priority?: number;
        }) | (components["schemas"]["EmailItem"]["allOf"]["0"] & {
          /** @description Short description */
          snippet?: string;
        }) | null;
      };
      /** @description List all direct and indirect relations of the activity’s main object */
      related?: (OneOf<[{
          id?: components["schemas"]["Deals"]["object"]["id"];
          /**
           * @description related type
           * @example people
           * @enum {string}
           */
          type?: "people";
          /**
           * @description related name
           * @example Customer
           */
          name?: string;
          /**
           * @description phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description mobile phone number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description email address
           * @example john@example-company.com
           */
          email?: string | null;
        }, {
          id?: components["schemas"]["Deals"]["object"]["id"];
          /**
           * @description related type
           * @example client
           * @enum {string}
           */
          type?: "prospect" | "client" | "supplier";
          /**
           * @description related name
           * @example Customer
           */
          name?: string;
          /**
           * @description phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description mobile phone number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description email address
           * @example john@example-company.com
           */
          email?: string | null;
          /** @example false */
          is_individual?: boolean;
        }, {
          id?: components["schemas"]["Deals"]["object"]["id"];
          /**
           * @description related type
           * @example opportunity
           */
          type?: string;
          /**
           * @description related name
           * @example OPP-003
           */
          name?: string;
        }]>)[];
    };
    /**
     * dealsFilter
     * @description The deals filters
     */
    DealsFilters: {
      /** @description Activity filters */
      filters: {
        /** @description The filter by due date */
        due_date?: {
          /** Format: date-time */
          start?: string;
          /** Format: date-time */
          end?: string;
        } | null;
        /**
         * @description The filter by entities
         * @example [
         *   "calendar_event",
         *   "task",
         *   "phonecall"
         * ]
         */
        entities?: ("calendar_event" | "task" | "phonecall")[];
        /** @description Labels filters (will filter all activities with one of the labels) */
        labels?: {
          /**
           * @description The filter by event labels
           * @example [
           *   5,
           *   15
           * ]
           */
          events?: number[] | null;
          /**
           * @description The filter by task labels
           * @example [
           *   5,
           *   15
           * ]
           */
          tasks?: number[] | null;
          /**
           * @description The filter by phonecall labels
           * @example [
           *   5,
           *   15
           * ]
           */
          phonecalls?: number[] | null;
        };
        /**
         * @description The completed filter
         * @example true
         */
        completed?: boolean | null;
        /**
         * @description The filter by staffs
         * @example [
         *   5,
         *   15
         * ]
         */
        staffs?: number[] | null;
      };
    };
    /** @description The CRM activity */
    CrmActivity: {
      /** @description Id of activity */
      id: string;
      /**
       * Format: date-time
       * @description Due date of activity
       */
      due_date: string;
      /**
       * Format: date-time
       * @description Date of activity
       */
      date: string;
      /** @description Related object of activity */
      related: ({
        /** @example third */
        type: string;
        /** @example My companies */
        name: string;
        id: string | number | ((string | number)[]);
      }) | null;
      /** @description Related companies of activity */
      companies: ({
          /**
           * @example client
           * @enum {string}
           */
          type: "prospect" | "client" | "supplier";
          /** @example 1056 */
          id: number;
          /** @example My companies */
          name: string;
        })[];
      /** @description Related people of activity */
      people: {
        /** @example 1056 */
        id: number;
        /** @example My companies */
        name: string;
      } | null;
      /**
       * @description Event type
       * @enum {string}
       */
      event: "email.sent" | "email.link.sent" | "task.completed" | "phonecall.created" | "calendar_event.created" | "email.scheduled.sent";
      author: components["schemas"]["Activity"]["_embed"]["author"];
      /** @description Event object of activity */
      object: {
        /** @example task */
        type: string;
        id: string | number | ((string | number)[]);
      };
      /**
       * @description Additional informations
       * @example {
       *   "old": "client",
       *   "new": "prospect"
       * }
       */
      more: {
        [key: string]: unknown;
      };
    };
    /**
     * activityFilter
     * @description The activity filters
     */
    CrmActivityFilters: {
      /** @description Activity filters */
      filters: {
        /** @description The filter by date */
        date?: {
          /** Format: date-time */
          start?: string;
          /** Format: date-time */
          end?: string;
        } | null;
        due_date?: components["schemas"]["DealsFilters"]["filters"]["due_date"];
        /**
         * @description The filter by events
         * @example [
         *   "email.sent",
         *   "annotation.created"
         * ]
         */
        events?: string[] | null;
        /**
         * @description The filter by authors
         * @example [
         *   5,
         *   15
         * ]
         */
        authors?: number[] | null;
        /** @description The filter by companies */
        companies?: ({
          /**
           * @description Search activities related to one or more companies. If empty, search activities without related companies.
           *
           * @example [
           *   58,
           *   105
           * ]
           */
          match?: number[] | null;
          /**
           * @description Search activities not related to one or more companies. If empty, search activities with one or more related companies
           *
           * @example []
           */
          not_match?: number[] | null;
        }) | null;
        /** @description The filter by peoples */
        peoples?: ({
          /**
           * @description Search activities related to one or more peoples. If empty, search activities without related peoples.
           *
           * @example [
           *   58,
           *   105
           * ]
           */
          match?: number[] | null;
          /**
           * @description Search activities not related to one or more peoples. If empty, search activities with one or more related peoples
           *
           * @example []
           */
          not_match?: number[] | null;
        }) | null;
        "event.labels"?: components["schemas"]["DealsFilters"]["filters"]["labels"]["events"];
        "task.labels"?: components["schemas"]["DealsFilters"]["filters"]["labels"]["tasks"];
        /**
         * @description The filter by phonecall statuses
         * @example [
         *   "busy",
         *   "wrongnumber"
         * ]
         */
        "phonecall.statuses"?: string[] | null;
        /**
         * @description The filter by phonecall sources
         * @example [
         *   "incoming",
         *   "outcoming"
         * ]
         */
        "phonecall.sources"?: string[] | null;
        "phonecall.labels"?: components["schemas"]["DealsFilters"]["filters"]["labels"]["phonecalls"];
        /** @description The filter by related types */
        "related.types"?: ({
          /**
           * @description Search activities related to one or more types.
           *
           * @example [
           *   "document",
           *   "third"
           * ]
           */
          match?: (("document" | "third" | "opportunity" | "people")[]) | null;
          /**
           * @description Search activities not related to one or more types.
           *
           * @example []
           */
          not_match?: (("document" | "third" | "opportunity" | "people")[]) | null;
        }) | null;
      };
    };
    /**
     * activityAggregations
     * @description The activity aggregations
     */
    CrmActivityAggregations: {
      /** @description Count activity by event */
      by_event?: {
        /** @example 5 */
        "email.sent"?: number;
        /** @example 5 */
        "email.link.sent"?: number;
        /** @example 1 */
        "calendar_event.created"?: number;
        /** @example 0 */
        "phonecall.created"?: number;
        /** @example 6 */
        "task.completed"?: number;
        [key: string]: unknown;
      };
      /**
       * @description Count activity by month and by event. Key are the first day of the month
       * @example {
       *   "2021-05-01": {
       *     "event.created": 36,
       *     "email.sent": 75
       *   },
       *   "2021-06-01": {
       *     "event.created": 12,
       *     "email.sent": 25
       *   }
       * }
       */
      by_month_and_event?: {
        [key: string]: unknown;
      };
      /**
       * @description Count activity by week and by event. Key are the first day of the week
       * @example {
       *   "2021-05-24": {
       *     "email.sent": 13,
       *     "task.completed": 27
       *   },
       *   "2021-05-31": {
       *     "email.sent": 8,
       *     "task.completed": 4
       *   }
       * }
       */
      by_week_and_event?: {
        [key: string]: unknown;
      };
      /**
       * @description Count activity by day and by event.
       * @example {
       *   "2021-06-29": {
       *     "event.created": 2
       *   },
       *   "2021-06-30": {
       *     "email.sent": 6
       *   }
       * }
       */
      by_day_and_event?: {
        [key: string]: unknown;
      };
      /**
       * @description Count activity by author and event.
       * @example {
       *   "1": {
       *     "phonecall.created": 57,
       *     "event.created": 24,
       *     "email.sent": 5
       *   },
       *   "95": {
       *     "task.completed": 1
       *   }
       * }
       */
      by_author_and_event?: {
        [key: string]: unknown;
      };
      /**
       * @description Count activity by author and event then by label id.
       * @example {
       *   "1": {
       *     "event.created": {
       *       "0": 17,
       *       "2377730": 1
       *     },
       *     "phonecall.created": [],
       *     "task.completed": {
       *       "5": 1
       *     }
       *   },
       *   "95": {
       *     "task.completed": []
       *   }
       * }
       */
      by_author_and_label?: {
        [key: string]: unknown;
      };
    };
    /**
     * listingMeta
     * @description The listing meta
     */
    CrmActivityMetas: {
      /** @description List of authors */
      authors: components["schemas"]["CrmActivity"]["author"][];
      /** @description The task metas */
      task: {
        /** @description List of event labels */
        labels: ({
            /**
             * @description Label identifier
             * @example 156
             */
            id: number;
            /**
             * @description Label
             * @example Remember
             */
            label: string;
            /**
             * @description Color of label
             * @example #f7dcf5
             */
            color?: string | null;
          })[];
      };
      /** @description The event metas */
      event: {
        /** @description List of event labels */
        labels: components["schemas"]["CrmActivityMetas"]["task"]["labels"]["items"][];
      };
      /** @description The phonecall metas */
      phonecall: {
        /** @description List of phonecall labels */
        labels: components["schemas"]["CrmActivityMetas"]["task"]["labels"]["items"][];
        /** @description List of statuses */
        statuses: {
            /**
             * @description Label identifier
             * @example connected
             */
            id: string;
            /**
             * @description Label
             * @example Remember
             */
            label: string;
          }[];
      };
      /** @description The permissions */
      permissions: {
        /** @description Can access to export */
        favorite: boolean;
        /** @description Can access to favorite */
        export: boolean;
      };
      /**
       * @description The working days (Sunday - Saturday : 0 - 6)
       * @example [
       *   1,
       *   2,
       *   3,
       *   4,
       *   5
       * ]
       */
      working_days: number[];
      /** @description The working hours */
      working_hours: {
        /**
         * @description The start time
         * @example 09:00:00
         */
        start_time: string | null;
        /**
         * @description The end time
         * @example 18:00:00
         */
        end_time: string | null;
      };
    };
    /**
     * exportParams
     * @description The output params
     */
    ExportParams: {
      /**
       * @description Output format of file
       * @default pdf
       * @enum {string}
       */
      output_format: "csv" | "pdf";
      /**
       * @description Output charset for export
       * @default UTF-8
       * @enum {string}
       */
      charset: "UTF-8" | "ISO-8859-1";
      /** @description List of specifics columns to export */
      columns?: string[] | null;
    };
    /**
     * exportParams
     * @description The output params
     */
    AccountingJournalExportParams: {
      /**
       * @description Output format of file
       * @default csv
       * @enum {string}
       */
      output_format: "csv" | "fec";
      /**
       * @description Output charset for export
       * @default UTF-8
       * @enum {string}
       */
      charset: "UTF-8" | "ISO-8859-1";
      /** @description List of specifics columns to export. */
      columns?: (("type" | "document.public_link" | "company-individual.reference" | "document.service_end_date" | "document.service_start_date" | "document.currency" | "date" | "document.subject" | "company-individual.name" | "documents.linked" | "code.label" | "document.external_reference" | "debit" | "credit" | "analytic_code" | "analytic_plan" | "code.value" | "document.due_date" | "auxiliary_code" | "document.number" | "label" | "amount.direction" | "amount.value" | "accounting_type")[]) | null;
    };
    /**
     * listingUserContext
     * @description The saved user context for listings
     */
    ListingUserContext: {
      /** @description The listing sorting */
      sorting: ({
        field: string;
        /** @enum {string} */
        direction: "asc" | "desc";
      }) | null;
      /** @description The listing pagination */
      pagination: {
        /** @example 1 */
        current_page: number;
        /** @example 15 */
        per_page: number;
      } | null;
      /**
       * @description The listing selected columns
       * @example [
       *   "id",
       *   "name"
       * ]
       */
      columns: string[] | null;
      /**
       * @description The listing filters
       * @example {
       *   "name": {
       *     "mode": "contain",
       *     "value": "search"
       *   }
       * }
       */
      filters: {
        [key: string]: unknown;
      } | null;
      /** @description The listing columns size */
      columns_size: {
          /** @example name */
          name: string;
          /** @example 534 */
          width: number;
        }[] | null;
      /** @description The listing display */
      display: Record<string, unknown> | null;
    };
    /**
     * customActivity
     * @description Custom Activity Object
     */
    CustomActivity: {
      /** @example xZk348lb2 */
      id?: string;
      /**
       * @description Activity type identifier
       * @example vJ340fF1
       */
      type_id?: string;
      /** @example Jean-pierre has opened a new ticket on Xeno. */
      action?: string;
      /** @description Object linked to custom activity */
      relation?: {
        /**
         * @example prospect
         * @enum {string}
         */
        type?: "client" | "prospect" | "supplier" | "opportunity" | "contact";
        /** @example 123 */
        id?: number;
      };
      /**
       * Format: date-time
       * @description Date of activity (ISO 8601)
       * @default Current datetime
       * @example 1970-01-01T00:00:00+00:00
       */
      date?: string;
      /** @description Author of the custom activity */
      author?: {
        /**
         * @default staff
         * @enum {string}
         */
        readonly type?: "staff";
        /** @example 11 */
        readonly id?: number;
      };
      /**
       * Format: date-time
       * @description Creation date of custom activity (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * Format: date-time
       * @description Updated date of custom activity (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      updated?: string;
    };
    CustomActivityCreate: components["schemas"]["CustomActivity"];
    /**
     * customActivityFilters
     * @description Available filters for Custom Events Search
     */
    CustomActivityFilters: {
      filters: {
        date?: {
          /**
           * Format: date-time
           * @example 1970-01-01T00:00:00+00:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 1970-01-01T00:00:00+00:00
           */
          end?: string;
        };
        /**
         * @description ID of custom activity type
         * @example Voluptates aspernatur
         */
        type_id?: string;
        /** @example 1 */
        staff_id?: number;
      };
    };
    /**
     * customActivityType
     * @description Represents a type of custom activity
     */
    CustomActivityType: {
      /**
       * @description Activity type identifier
       * @example xZk348lb2
       */
      id?: string;
      /**
       * @description Activity type name
       * @example Xeni
       */
      name: string;
      /**
       * Format: date-time
       * @description Creation date of custom activity type (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * Format: date-time
       * @description Updated date of custom activity type (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      updated?: string;
      /** @description Author of the custom activity type */
      author?: {
        /**
         * @default staff
         * @enum {string}
         */
        readonly type?: "staff";
        /** @example 11 */
        readonly id?: number;
      };
    };
    /**
     * personalAccessToken
     * @description The personal access token for api
     */
    PersonalAccessTokenCreateItem: {
      /**
       * @description The personal access token name
       * @example MyToken
       */
      name: string;
      /**
       * @description The linked user
       * @example 1257
       */
      user_id: number | "me";
      /**
       * @description The allowed scopes
       * @example [
       *   "companies.read",
       *   "companies.write"
       * ]
       */
      scopes: string[];
    };
    /** personalAccessTokenItem */
    PersonalAccessTokenItem: {
      /**
       * @description The access token id
       * @example 091d4c6200421657090c8ef5e5349172e668f507050a13e6ae0e3f2ff4b743acf5092f48faa1f98d
       */
      id: string;
      /**
       * @description The OAuth client id
       * @example 670fadef-576e-47a1-9358-62784605c024
       */
      client_id: string;
      /** @description The linked user */
      user: {
        /**
         * @description The user id
         * @example 154
         */
        id: number;
        /**
         * @description User type
         * @enum {string}
         */
        type: "staff";
      };
      /**
       * Format: date-time
       * @description The token expiration date
       * @example 2120-05-25T17:28:29+0100
       */
      expiration: string;
      /**
       * @description The allowed scopes
       * @example [
       *   "companies.read",
       *   "companies.write"
       * ]
       */
      scopes: string[];
    } & {
      /**
       * @description The token name
       * @example My Token 7
       */
      name: string;
    };
    /**
     * listingMeta
     * @description The personal access tokens metas
     */
    PersonalAccessTokenMetas: {
      /** @description List of staffs */
      staffs: components["schemas"]["CrmActivity"]["author"][];
      /** @description The permissions */
      permissions: {
        /** @description Can access to export */
        favorite: boolean;
        /** @description Can access to favorite */
        export: boolean;
      };
    };
    /**
     * client
     * @description The OAuth client for Sellsy API
     */
    Client: WithRequired<({
      /**
       * @description The OAuth client type
       * @enum {string}
       */
      type?: "public" | "private" | "personal" | "personal_access_token";
    }) & ({
      /**
       * @description The OAuth client id
       * @example 670fadef-576e-47a1-9358-62784605c024
       */
      id?: string;
      /**
       * @description OAuth client name
       * @example MyToken
       */
      name?: string;
      /** @description Redirect URIs */
      redirect_uri?: string[];
      /**
       * @description Allowed scopes for OAuth client
       * @example [
       *   "companies.read",
       *   "companies.write"
       * ]
       */
      scopes?: string[];
      /**
       * @description <i>For `personal` type only.</i> <br /><br />Indicates if the token can impersonate other staffs using the `X-Switch-User` header. <br />
       * For example, use the header `X-Switch-User: staff:1` to send API requests on behalf of the staff with identifier = 1.<br /><br />
       * <i>Only administrators can create such accesses, and only active staffs can be impersonated. Be careful by using this feature, as it generates real actions for impersonated users.</i>
       * @default false
       */
      delegated?: boolean | null;
      /**
       * @description <i>For `public` or `private` type only.</i> <br /><br />If set to `true`, generating an access token for this client will revoke all previous tokens linked to this client and the current user.
       * @default false
       */
      single_login?: boolean | null;
      /** @description The linked user */
      user?: {
        /**
         * @description The user id
         * @example 154
         */
        readonly id: number;
        /**
         * @description User type
         * @enum {string}
         */
        readonly type: "staff";
      } | null;
      /**
       * Format: date-time
       * @description date the OAuth client was approved by Sellsy
       */
      validated_at?: string | null;
    }), "id" | "name" | "type" | "user" | "scopes" | "redirect_uri" | "validated_at">;
    /** API Client */
    ClientWSecret: (WithRequired<({
      /**
       * @description The OAuth client type
       * @enum {string}
       */
      type?: "public" | "private" | "personal" | "personal_access_token";
    }) & components["schemas"]["Client"]["allOf"]["1"], "id" | "name" | "type" | "user" | "scopes" | "redirect_uri" | "validated_at">) & {
      /**
       * @description Client secret<br>> <strong>This property is only exposed on response for the create endpoint. Remember to save the value.</strong>
       *
       * @example 9f8d07fd0eb80016476c6fc283505b5d95bcbcf39f24eb4b506af256a280c272
       */
      secret?: string;
    };
    /**
     * clientCreate
     * @description The OAuth client for API
     */
    ClientCreate: WithRequired<({
      /**
       * @description The OAuth client type
       * @enum {string}
       */
      type?: "public" | "private" | "personal" | "personal_access_token";
    }) & (({
      /**
       * @description For `personal` type only, linked user id.
       * @example 1257
       */
      user_id?: number | "me" | null;
    }) & components["schemas"]["Client"]["allOf"]["1"]), "name" | "type" | "redirect_uri" | "user_id" | "scopes">;
    /**
     * clientUpdate
     * @description The OAuth client for API
     */
    ClientUpdate: ({
      /**
       * @description For `personal` type only, linked user id.
       * @example 1257
       */
      user_id?: number | "me" | null;
    }) & components["schemas"]["Client"]["allOf"]["1"];
    AccountingCode: {
      /**
       * @description Id of accounting code
       * @example 6657
       */
      id?: number;
      /**
       * @description accounting code
       * @example 411000
       */
      code: string;
      /**
       * @description Label of accounting code
       * @example Provision of services
       */
      label: string;
      /** @description List of views where accounting code is usable */
      views: ("third" | "purchase" | "sell" | "bank" | "reconciliation")[];
    };
    /** Accounting code */
    AccountingCodeCreate: {
      /**
       * @description accounting code
       * @example 411000
       */
      code: string;
      /**
       * @description Label of accounting code
       * @example Provision of services
       */
      label?: string;
      /** @description List of views where accounting code is usable */
      views?: ("third" | "purchase" | "sell" | "bank" | "reconciliation")[];
    };
    /** Accounting Entry */
    AccountingJournal: {
      /**
       * @description Id of accounting entry
       * @example 6657
       */
      id?: number;
      /** @description Objects linked to the accounting entry */
      related?: ({
          /**
           * @description Object type
           * @enum {string}
           */
          type?: "company" | "individual" | "invoice" | "creditnote" | "purInvoice" | "purCreditNote" | "expense" | "bankDeposit";
          /** @description Object ID */
          id?: number;
        })[];
      /** @description Analytic code */
      analytic_code?: string | null;
      /** @description Amount of the accounting entry */
      amount?: {
        /**
         * @description Direction of the accounting entry (debit or credit)
         * @enum {string}
         */
        direction?: "debit" | "credit";
        /**
         * @description Amount value of the accounting entry
         * @example 123.22
         */
        value?: string;
      };
      /** @description Accounting code */
      code?: {
        /**
         * @description Label of accounting code
         * @example Sales Income
         */
        label?: string;
        /**
         * @description Accounting code
         * @example 4000
         */
        value?: string;
      };
      /** @example SALES */
      type?: string;
      /**
       * Format: date
       * @description Date of accounting entry
       */
      date?: string;
      /**
       * @description Label of accounting entry
       * @example Invoice n°FACT-20210811-00362 - Acme Corporation
       */
      label?: string;
      /** @description Accounting entry has ben exported or not */
      recorded?: boolean;
      /**
       * @description Type of accounting (for Sage export)
       * @enum {integer}
       */
      accounting_type?: 1 | 2;
      /**
       * @description Analytic plan number (for Sage export)
       * @enum {integer}
       */
      analytic_plan?: 1;
      /**
       * @description Auxiliary code
       * @example 0EX11C
       */
      auxiliary_code?: string | null;
      /** @deprecated */
      document?: ({
        /**
         * @description Document type
         * @example invoice
         * @enum {string}
         */
        type?: "invoice" | "creditnote" | "purInvoice" | "purCreditNote";
        /**
         * @description Unique ID
         * @example 6657
         */
        id?: number;
        /**
         * @description Document number
         * @example INV-20210810-00331
         */
        number?: string;
        /**
         * Format: date
         * @example Due date of document
         */
        due_date?: string;
        /**
         * @description Document Subject
         * @example null
         */
        subject?: string;
        /**
         * Format: uri
         * @description Public link of document
         */
        public_link?: string | null;
        /**
         * Format: date
         * @description Service start date of document
         */
        service_start_date?: string | null;
        /**
         * Format: date
         * @description Service end date of document
         */
        service_end_date?: string | null;
        /**
         * @description Currency of document
         * @example €
         */
        currency?: string;
        /**
         * @description External reference of document
         * @example EXT-INV-20210810-00331
         */
        external_reference?: string | null;
      }) | null;
      /** @description Documents linked to the accounting entry */
      documents?: components["schemas"]["AccountingJournal"]["document"]["allOf"]["0"][] | null;
      /** @description Companies linked to the accounting entry */
      companies?: {
          /**
           * @description Name of company
           * @example Acme Corporation
           */
          name?: string;
          /** @description Company reference */
          reference?: string;
        }[] | null;
      /** @description Individuals linked to the accounting entry */
      individuals?: {
          /**
           * @description Name of individual
           * @example Acme Corporation
           */
          name?: string;
          /** @description Individual reference */
          reference?: string;
        }[] | null;
    };
    TaxSettingsInput: {
      /**
       * @description Id of taxe
       * @example 6657
       */
      vat_id: number;
      /**
       * @description VAT Mode
       * @example debit
       * @enum {string}
       */
      vat_mode: "debit" | "collection";
      /**
       * @description VAT Mention
       * @example mention
       */
      vat_mention: string | null;
      /**
       * @description If true, show tax mention
       * @example true
       */
      display_tax_mention: boolean;
      /**
       * @description Rate category ID
       * @example 57
       */
      rate_category_id: number;
      /** @description Default discount */
      discount: {
        /**
         * @description Type of discount
         * @example percent
         * @enum {string}
         */
        type: "amount" | "percent";
        /**
         * @description Value of discount
         * @example 55
         */
        value: string;
        /**
         * @description If True, each row can have different discount
         * @example false
         */
        by_rows: boolean;
      };
      /**
       * @description If True, using ecotax
       * @example true
       */
      use_ecotax: boolean;
      /**
       * @description If True, using tax bonuses
       * @example false
       */
      use_bonuses: boolean;
    };
    TaxSettingsOutput: {
      /**
       * @description Id of taxe
       * @example 6657
       */
      vat_id: number;
      /**
       * @description VAT Mode
       * @example debit
       * @enum {string}
       */
      vat_mode: "debit" | "collection";
      /**
       * @description VAT Mention
       * @example mention
       */
      vat_mention: string | null;
      /**
       * @description If true, show tax mention
       * @example true
       */
      display_tax_mention: boolean;
      /**
       * @description Rate category ID
       * @example 57
       */
      rate_category_id: number;
      /** @description Default discount */
      discount: {
        /**
         * @description Type of discount
         * @example percent
         * @enum {string}
         */
        type: "amount" | "percent";
        /**
         * @description Value of discount
         * @example 55
         */
        value: string;
        /**
         * @description If True, each row can have different discount
         * @example false
         */
        by_rows: boolean;
      };
      /**
       * @description If True, using ecotax
       * @example true
       */
      use_ecotax: boolean;
      /**
       * @description If True, using tax bonuses
       * @example false
       */
      use_bonuses: boolean;
    };
    /**
     * taxFilter
     * @description The tax filters
     */
    TaxFilter: {
      /** @description Tax filters */
      filters?: {
        /** @description Filter the taxes list by rate amount */
        rate?: {
          /**
           * @description Minimum tax rate amount
           * @example 10
           */
          min?: number;
          /**
           * @description Maximum tax rate amount
           * @example 20
           */
          max?: number;
        };
        /**
         * @description Filter the taxes list by label
         * @example TVA UK
         */
        label?: string;
        /**
         * @description Filter the taxes list by active state
         * @example true
         */
        is_active?: boolean;
      };
    };
    /** Rate category Meta */
    RateCategoryMetadata: {
      /** @description Available layouts for the rate categories */
      available_layouts: ("estimates" | "invoices" | "credit_notes" | "models" | "deliveries" | "orders" | "proformas")[];
      /** Accounting */
      accounting: {
        /**
         * @description if the plugin accounting if enabled
         * @example true
         */
        enabled?: boolean;
        /** @description list of sell accounting codes */
        accounting_codes?: {
            /**
             * @description label of accounting code
             * @example Clients
             */
            label?: string;
            /**
             * @description id of accounting code
             * @example 1234567
             */
            value?: number;
            /**
             * @description accounting code
             * @example 445000
             */
            code?: string;
          }[];
        /**
         * @description if specific code are used for discount
         * @example false
         */
        use_specific_code_for_discount?: boolean;
      };
      /** @description List of currencies */
      currencies: {
          /**
           * @description Label of currency
           * @example EUR
           */
          label: string;
          /**
           * @description Id of currency
           * @example 12
           */
          value: number;
        }[];
      /** @description List of document layouts */
      document_layouts: {
          /**
           * @description Label of the layout
           * @example Apparence par défaut
           */
          label: string;
          /**
           * @description Id of the layout
           * @example 42
           */
          value: number;
        }[];
    };
    /**
     * ocr
     * @description Represents an OCR document
     */
    Ocr: {
      /** @example 1 */
      id?: number;
      /**
       * @description ID of staff who created ocr document
       * @example 1
       */
      staff_id?: number;
      /**
       * @description File name of uploaded OCR document
       * @example myfile.png
       */
      file_name?: string;
      /**
       * @description Type of linked object
       * @example purInvoice
       * @enum {string}
       */
      linked_type?: "purInvoice";
      /**
       * @description Id of linked object
       * @example 123
       */
      linked_id?: number | null;
      /**
       * Format: date-time
       * @description Creation date of OCR document (ISO 8601)
       * @default Current datetime
       * @example 1970-01-01T00:00:00+00:00
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Completion date of OCR process (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      completed_at?: string | null;
      /**
       * @description state of OCR process
       * @enum {string}
       */
      state?: "pending" | "processing" | "completed" | "error";
      /**
       * @description Error code
       * * `1` - Too many page error
       * * `2` - Technical error
       * * `3` - File error
       *
       * @enum {integer|null}
       */
      error_code?: 1 | 2 | 3 | null;
    };
    /** Metadata */
    OcrPurInvoiceMetas: {
      /** @description Use can validate a purchase invoice */
      user_can_validate_pur_invoice: boolean;
    };
    /**
     * conformityState
     * @description Invoice conformity state informations
     */
    InvoicingConformityState: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /** @description Invoice conformity state */
      active?: boolean;
      activated_by?: components["schemas"]["CrmActivity"]["author"] | null;
      /**
       * Format: date-time
       * @description Activation date (ISO 8601)
       * @default Current datetime
       * @example 1970-01-01T00:00:00+00:00
       */
      activated_at?: string | null;
      /**
       * Format: uri
       * @description PDF url
       */
      pdf?: string | null;
    };
    /** Opportunity */
    OpportunityCreate: ({
      /**
       * @description Opportunity name
       * @example New website
       */
      name?: string;
      /** @description Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default. */
      owner_id?: number;
      /**
       * @description Opportunity status
       * @default open
       * @example won
       * @enum {string}
       */
      status?: "open" | "won" | "lost" | "cancelled" | "closed" | "late";
      /**
       * @description Pipeline
       * @example 9763
       */
      pipeline?: number;
      /**
       * @description Pipeline Step
       * @example 299
       */
      step?: number;
      /**
       * @description Potential Opportunity Amount (in the default currency selected for the account)
       * @example 72000.99
       */
      amount?: string;
      /**
       * @description Opportunity probability
       * @example 75
       */
      probability?: number;
      /**
       * @description Source of opportunity creation (null will use the default defined in account preferences)
       * @example 1
       */
      source?: number;
      /**
       * Format: date
       * @description Due date of the opportunity
       * @example 2020-02-01
       */
      due_date?: string | null;
      /** @description Opportunity note */
      note?: string;
      /**
       * @description Internal ID of the main opportunity document
       * @example 22
       */
      main_doc_id?: number | null;
      /**
       * @description Staff(s) ID assigned to the opportunity<br/> The same staff cannot be present more than once
       *
       * @example [
       *   133,
       *   299
       * ]
       */
      assigned_staff_ids?: number[] | null;
      /**
       * @description Contact(s) ID responsible for the opportunity
       * @example [
       *   222,
       *   876
       * ]
       */
      contact_ids?: number[] | null;
      related?: components["schemas"]["OpportunityUpdate"]["related"];
    }) & {
      /**
       * @description Opportunity number
       * @example OPP-1155
       */
      number?: string;
      /** @description Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default. */
      owner_id?: number;
      /**
       * Format: date-time
       * @description Date of creation of the opportunity
       */
      created?: string;
    };
    /**
     * Opportunity
     * @description Describe input body to update an Opportunity
     */
    OpportunityUpdate: {
      /**
       * @description Opportunity name
       * @example New website
       */
      name?: string;
      /** @description Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default. */
      owner_id?: number;
      /**
       * @description Opportunity status
       * @default open
       * @example won
       * @enum {string}
       */
      status?: "open" | "won" | "lost" | "cancelled" | "closed" | "late";
      /**
       * @description Pipeline
       * @example 9763
       */
      pipeline?: number;
      /**
       * @description Pipeline Step
       * @example 299
       */
      step?: number;
      /**
       * @description Potential Opportunity Amount (in the default currency selected for the account)
       * @example 72000.99
       */
      amount?: string;
      /**
       * @description Opportunity probability
       * @example 75
       */
      probability?: number;
      /**
       * @description Source of opportunity creation (null will use the default defined in account preferences)
       * @example 1
       */
      source?: number;
      /**
       * Format: date
       * @description Due date of the opportunity
       * @example 2020-02-01
       */
      due_date?: string | null;
      /** @description Opportunity note */
      note?: string;
      /**
       * @description Internal ID of the main opportunity document
       * @example 22
       */
      main_doc_id?: number | null;
      /**
       * @description Staff(s) ID assigned to the opportunity<br/> The same staff cannot be present more than once
       *
       * @example [
       *   133,
       *   299
       * ]
       */
      assigned_staff_ids?: number[] | null;
      /**
       * @description Contact(s) ID responsible for the opportunity
       * @example [
       *   222,
       *   876
       * ]
       */
      contact_ids?: number[] | null;
      /**
       * Related
       * @description Related objects :
       *   - There can be only one company or one individual at a time (required)
       *   - Contact should be linked to company/individual linked
       */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example company
           * @enum {string}
           */
          type: "company" | "individual" | "contact";
        })[];
    };
    /**
     * Opportunity
     * @description Describe opportunity object
     */
    OpportunityItem: {
      /**
       * @description Internal Opportunity ID
       * @example 1
       */
      id?: number;
      /**
       * @description External Opportunity ID
       * @example OPP-1155
       */
      number?: string;
      /**
       * @description Opportunity name
       * @example New website
       */
      name?: string;
      /** @description Source of opportunity creation */
      source?: {
        /** @example 1 */
        id?: number;
        /** @example Internal */
        name?: string;
      };
      /**
       * Format: date
       * @description Due date of the opportunity
       * @example 1970-01-01
       */
      due_date?: string | null;
      /**
       * Format: date-time
       * @description Creation date of the opportunity
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * Format: date-time
       * @description Date of last opportunity status update
       * @example 1970-01-01T00:00:00+00:00
       */
      updated_status?: string | null;
      /**
       * @description Opportunity status
       * @example won
       * @enum {string}
       */
      status?: "open" | "won" | "lost" | "cancelled" | "closed" | "late";
      /** @description Potential amount of the opportunity with the currency */
      amount?: {
        /**
         * @description Amount
         * @example 72000.99
         */
        value?: string;
        /**
         * @description Currency (ISO 4217)
         * @example EUR
         */
        currency?: string;
      };
      /** @description Current pipeline */
      pipeline?: {
        /** @example 9763 */
        id?: number;
        /** @example Commercial North */
        name?: string;
      };
      /** @description Current step */
      step?: {
        /** @example 299 */
        id?: number;
        /** @example Prospection */
        name?: string;
      };
      /**
       * @description Opportunity probability
       * @example 75
       */
      probability?: number;
      /** @description Opportunity note */
      note?: string;
      /** @description Staff owning the opportunity */
      owner?: {
        /** @example 12 */
        id?: number;
        /**
         * @example staff
         * @enum {string}
         */
        type?: "staff" | "thirdcontact";
      };
      /**
       * @description Staff(s) ID assigned to the opportunity
       * @example [
       *   133,
       *   299
       * ]
       */
      assigned_staff_ids?: number[] | null;
      /**
       * @description Contact(s) ID responsible for the opportunity
       * @example [
       *   222,
       *   876
       * ]
       */
      contact_ids?: number[] | null;
      /**
       * @description Company linked to the opportunity
       * @example 1220
       */
      company_id?: number | null;
      /**
       * @description Individual linked to the opportunity
       * @example 299
       */
      individual_id?: number | null;
      /**
       * @description Internal ID of the main opportunity document
       * @example 22
       */
      main_doc_id?: number | null;
      related?: components["schemas"]["OpportunityUpdate"]["related"];
      /**
       * Opportunity embed
       * @description Opportunity embed
       */
      _embed?: ({
        /** @description Staff(s) assigned to the opportunity */
        assigned_staffs?: components["schemas"]["CrmActivity"]["author"][];
        /** @description Company object related to opportunity */
        company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        /** @description Contact(s) responsible for the opportunity */
        contacts?: components["schemas"]["ContactCreateItem"]["allOf"]["0"][];
        /**
         * @description Number of linked estimates
         * @example 2
         */
        estimates?: number | null;
        /** @description Individual object related to opportunity object */
        individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        /**
         * @description Number of linked invoices
         * @example 1
         */
        invoices?: number | null;
        /**
         * @description Number of linked orders
         * @example 0
         */
        orders?: number | null;
        /**
         * @description Number of linked deliveries
         * @example 8
         */
        deliveries?: number | null;
        /**
         * @description Number of linked credit notes
         * @example 1
         */
        credit_notes?: number | null;
        /**
         * @description Number of linked proforma
         * @example 0
         */
        proforma?: number | null;
        /** @description Currency object related to opportunity */
        currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"];
        /** @description Opportunity ACL */
        acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["5"];
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"];
    };
    /**
     * OpportunityFilters
     * @description The opportunity filters
     */
    OpportunityFilters: {
      /** @description Opportunity filters */
      filters: {
        /**
         * Created at
         * @description Filter the opportunity list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Updated status
         * @description Filter the opportunity list by updated status date
         */
        updated_status?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Due Date
         * @description Filter the opportunity list by due date
         */
        due_date?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Name
         * @description Filter the opportunity list by name
         * @example Website
         */
        name?: string;
        /**
         * Pipeline
         * @description Filter the opportunity list by pipeline ID
         * @example [
         *   12,
         *   22
         * ]
         */
        pipeline?: number[];
        /**
         * Step
         * @description Filter the opportunity list by step ID
         * @example [
         *   2,
         *   7
         * ]
         */
        step?: number[];
        /**
         * Amount
         * @description Filter the opportunity list by amount
         */
        amount?: {
          /** @example 10.5 */
          min?: number;
          /** @example 150 */
          max?: number;
        };
        /** @description Filter the opportunity list by an array of related objects */
        related_objects?: ({
            /**
             * @description Type of related object
             * @enum {string}
             */
            type?: "company" | "individual";
            /**
             * @description Identifier of related object
             * @example 742
             */
            id?: number;
          })[];
        /**
         * Assigned staffs
         * @description Filter by assigned staffs
         */
        assigned_staffs?: number[];
        /** Filter the opportunity list by an array of statuses */
        statuses?: (("open" | "won" | "lost" | "cancelled" | "closed" | "late")[]) | null;
        favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
      };
    };
    /** Opportunities aggregations */
    OpportunitiesAggregations: {
      /**
       * @description Potential amount of opportunities by status
       * @example {
       *   "open": {
       *     "number": 123,
       *     "amount": "14400.000000000"
       *   },
       *   "won": {
       *     "number": 89,
       *     "amount": "12300.000000000"
       *   },
       *   "lost": {
       *     "number": 78,
       *     "amount": "11200.000000000"
       *   },
       *   "late": {
       *     "number": 67,
       *     "amount": "9400.000000000"
       *   },
       *   "cancelled": {
       *     "number": 56,
       *     "amount": "8600.000000000"
       *   },
       *   "closed": {
       *     "number": 45,
       *     "amount": "7500.000000000"
       *   }
       * }
       */
      amount_sum_by_status?: {
        /** @description Number and total amount of opportunities with status open */
        open?: {
          /** @description number of opportunities */
          number?: number;
          /** @description Total amount of opportunities */
          amount?: {
            /**
             * @description Amount
             * @example 38446.90
             */
            value?: string;
            /**
             * @description Currency code
             * @example EUR
             */
            currency?: string;
          };
        };
        /** @description Number and total amount of opportunities with status won */
        won?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status lost */
        lost?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status late */
        late?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status cancelled */
        cancelled?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status closed */
        closed?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
      };
      /**
       * @description Potential amount of opportunities by status due this week
       * @example {
       *   "open": {
       *     "number": 123,
       *     "amount": "14400.000000000"
       *   },
       *   "won": {
       *     "number": 89,
       *     "amount": "12300.000000000"
       *   },
       *   "lost": {
       *     "number": 78,
       *     "amount": "11200.000000000"
       *   },
       *   "late": {
       *     "number": 67,
       *     "amount": "9400.000000000"
       *   },
       *   "cancelled": {
       *     "number": 56,
       *     "amount": "8600.000000000"
       *   },
       *   "closed": {
       *     "number": 45,
       *     "amount": "7500.000000000"
       *   }
       * }
       */
      amount_sum_by_status_due_at_seven?: {
        /** @description Number and total amount of opportunities with status "open" */
        open?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status "won" */
        won?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status "lost" */
        lost?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status "late" */
        late?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status "cancelled" */
        cancelled?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
        /** @description Number and total amount of opportunities with status "closed" */
        closed?: {
          /** @description number of opportunities */
          number?: number;
          amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
        };
      };
      /**
       * @description number of opportunities by pipeline and step
       * @example {
       *   "7923": {
       *     "8": 12,
       *     "24": 25
       *   },
       *   "12344": {
       *     "7": 245,
       *     "12": 75
       *   }
       * }
       */
      number_by_pipeline_and_step?: {
        [key: string]: unknown;
      };
      /**
       * @description Potential amount of opportunities
       * @example {
       *   "number": 123,
       *   "amount": "14400.000000000"
       * }
       */
      amount_sum?: {
        /** @description number of opportunities */
        number?: number;
        amount?: components["schemas"]["OpportunitiesAggregations"]["amount_sum_by_status"]["open"]["amount"];
      };
    };
    /**
     * OpportunitySourceCollectionItem
     * @description Represents an Opportunity Source
     */
    OpportunitySourceCollectionItem: {
      /**
       * @description Internal Opportunity Source ID
       * @example 1
       */
      id?: number;
      /**
       * @description Opportunity Source name
       * @example Showroom 2020
       */
      name?: string;
      /**
       * @description Is default source
       * @example true
       */
      is_default?: boolean;
      /**
       * @description Is hidden source
       * @example true
       */
      is_hidden?: boolean;
      /**
       * @description Source category
       * @example 1
       */
      category_id?: number;
      /**
       * @description Source rank
       * @example 2
       */
      rank?: number;
    };
    /**
     * OpportunitySourceFilters
     * @description The opportunity sources filters
     */
    OpportunitySourceFilters: {
      filters: {
        /**
         * Category
         * @description Filter the opportunity sources list by category
         * @example [
         *   10,
         *   20
         * ]
         */
        category_id?: number[];
      };
    };
    /**
     * OpportunityPipelineCollectionItem
     * @description Represents an Opportunity Pipeline
     */
    OpportunityPipelineCollectionItem: {
      /**
       * @description Internal Opportunity Pipeline ID
       * @example 1
       */
      id?: number;
      /**
       * @description Opportunity Pipeline name
       * @example New website
       */
      name?: string;
      /**
       * @description Is default pipeline define for account
       * @example true
       */
      is_default?: boolean;
      /**
       * @description Count of steps
       * @example 2
       */
      step?: number;
      /**
       * @description Pipeline rank in preferences
       * @example 2
       */
      rank?: number;
    };
    /**
     * OpportunityPipelineFilters
     * @description The opportunity pipelines filters
     */
    OpportunityPipelineFilters: {
      /** @description Opportunity Pipelines filters */
      filters: {
        /**
         * Name
         * @description Filter the opportunity pipelines list by name
         * @example Website
         */
        name?: string;
        /**
         * Is default opportunity pipeline
         * @description Filter the opportunity pipelines list by is_default
         * @example false
         */
        is_default?: boolean;
      };
    };
    /**
     * Opportunity Category
     * @description Opportunities Category
     */
    OpportunitiesCategoryItem: {
      /**
       * @description Opportunities category id
       * @example 1
       */
      id?: number;
      /**
       * @description Opportunities category label
       * @example Event
       */
      label?: string;
      /**
       * @description Opportunities category color
       * @example #000000
       */
      color?: string;
      /**
       * @description Opportunities category icon
       * @example fa-anchor
       */
      icon?: string;
      /**
       * @description True if this opportunity category contains the default source
       * @example false
       */
      is_default?: boolean;
      _embed?: {
        /** @description Sources of the category */
        sources?: {
            /**
             * @description Internal Opportunity Source ID
             * @example 1
             */
            id?: number;
            /**
             * @description Opportunity Source name
             * @example Showroom 2020
             */
            name?: string;
            /**
             * @description Is default source
             * @example true
             */
            is_default?: boolean;
            /**
             * @description Is hidden source
             * @example true
             */
            is_hidden?: boolean;
            /**
             * @description Source category
             * @example 1
             */
            category_id?: number;
            /**
             * @description Source rank
             * @example 2
             */
            rank?: number;
          }[] | null;
      };
    };
    /** Opportunity rank update */
    OpportunityRankUpdate: {
      /**
       * @description ID of opportunity before which to place the opportunity specified in query parameters<br /> > if not specified, opportunity will be placed at the last rank of the step
       *
       * @example 57
       */
      before_sibling?: number | null;
      /**
       * @description Pipeline Step
       * @example 299
       */
      step: number;
    };
    /**
     * Step filters
     * @description The opportunity pipeline steps filters
     */
    PipelineStepFilters: {
      /** @description Opportunity Pipeline Steps filters */
      filters: {
        /**
         * Name
         * @description Filter the opportunity pipeline steps list by name
         * @example Website
         */
        name?: string;
        /**
         * Id
         * @description Filter the opportunity pipeline steps list by id
         * @example [
         *   45,
         *   47
         * ]
         */
        id?: number[];
      };
    };
    /** Task Item */
    TaskItem: components["schemas"]["Deals"]["object"]["model"]["oneOf"]["2"] & ({
      _embed?: ({
        /** Owner of the task */
        readonly owner?: components["schemas"]["Activity"]["_embed"]["author"];
        /** Staffs assigned to the task */
        readonly assigned_staffs?: components["schemas"]["Activity"]["_embed"]["author"][] | null;
        /** @description Objects linked to the task */
        readonly related?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] | components["schemas"]["InvoiceOne"]["allOf"]["0"] | components["schemas"]["CreditNoteOne"]["allOf"]["0"] | components["schemas"]["EstimateOne"]["allOf"]["0"])[];
        /** Company linked to the task */
        readonly company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        /** Individual linked to the task */
        readonly individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        /** Contact linked to the task */
        readonly contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
      }) & ({
        /** @description Task ACL */
        acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["3"] | null;
      });
    });
    /** Task Collection Item */
    TaskCollectionItem: components["schemas"]["Deals"]["object"]["model"]["oneOf"]["2"] & {
      _embed?: components["schemas"]["TaskItem"]["allOf"]["1"]["_embed"]["allOf"]["0"]["allOf"]["0"];
    };
    /** TaskCreateItem */
    TaskCreateItem: WithRequired<({
      /**
       * @description Task title
       * @example Meeting
       */
      title?: string | null;
      /**
       * @description Task description
       * @example Monthly meeting with consulting team
       */
      description?: string | null;
      /**
       * @description Task is private or public
       * @default false
       */
      is_private?: boolean;
      /**
       * Format: date-time
       * @description due date and time of task
       * @example 2020-01-01T00:00:00+01:00
       */
      due_date?: string;
      /**
       * @description Task status
       * @example todo
       * @enum {string}
       */
      status?: "todo" | "done";
      assigned_staff_ids?: number[] | null;
      /** @description Task label */
      label_id?: number;
      /** @description Main object related to the task (limit to 1). If empty, the link with the existing related object will be removed. */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
        })[];
      /** @description Owner of the task (Staff id expected) */
      owner_id?: number;
      /** @description Priority level of the task */
      priority?: number;
    }) & ({
      /** @description Main object related to the task (limit to 1). */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
        })[];
      /**
       * Format: date-time
       * @description Date of creation of the calendar event
       */
      created?: string;
      /**
       * @description Priority level of the task
       * @default 0
       */
      priority?: number;
    }), "related">;
    /** @description Task update object */
    TaskUpdateItem: {
      /**
       * @description Task title
       * @example Meeting
       */
      title?: string | null;
      /**
       * @description Task description
       * @example Monthly meeting with consulting team
       */
      description?: string | null;
      /**
       * @description Task is private or public
       * @default false
       */
      is_private?: boolean;
      /**
       * Format: date-time
       * @description due date and time of task
       * @example 2020-01-01T00:00:00+01:00
       */
      due_date?: string;
      /**
       * @description Task status
       * @example todo
       * @enum {string}
       */
      status?: "todo" | "done";
      assigned_staff_ids?: number[] | null;
      /** @description Task label */
      label_id?: number;
      /** @description Main object related to the task (limit to 1). If empty, the link with the existing related object will be removed. */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
        })[];
      /** @description Owner of the task (Staff id expected) */
      owner_id?: number;
      /** @description Priority level of the task */
      priority?: number;
    };
    /**
     * taskFilter
     * @description The task filters
     */
    TaskFilter: {
      /** @description task filters */
      filters: {
        /**
         * Created at
         * @description Filter the tasks list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Due date
         * @description Filter the tasks list by due date
         */
        due_date?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Owners
         * @description Filter the tasks list by owners
         */
        owners?: number[];
        /**
         * Assigned staffs
         * @description Filter the tasks list by assigned staffs
         */
        assigned_staffs?: number[];
        /**
         * Statuses
         * @description Filter the tasks list by statuses
         */
        statuses?: ("todo" | "done")[];
        /**
         * Labels
         * @description Filter the tasks list by labels
         */
        labels?: number[];
        /**
         * Related Objects
         * @description Filter the tasks list by related objects
         */
        related_objects?: {
            /** @example company */
            type?: string;
            /** @example 22 */
            id?: number;
          }[];
        /**
         * Companies
         * @description Filter the tasks list by companies
         */
        companies?: number[];
        /**
         * Individuals
         * @description Filter the tasks list by individuals
         */
        individuals?: number[];
        /**
         * Contacts
         * @description Filter the tasks list by contacts
         */
        contacts?: number[];
        /** @description Priority level of tasks */
        priority?: {
          /**
           * @description Inclusive minimum priority level of tasks
           * @example 1
           */
          min?: number;
          /**
           * @description Inclusive maximum priority level of tasks
           * @example 1
           */
          max?: number;
        };
      };
    };
    /** @description Label */
    Label: {
      /**
       * @description Label id
       * @example 6657
       */
      id?: number;
      /**
       * @description Label title
       * @example Reminder
       */
      name?: string;
      /**
       * @description Color of label
       * @example #f7dcf5
       */
      color?: string | null;
      /**
       * @description If label is active
       * @example true
       */
      is_active?: boolean;
      /**
       * @description Label rank
       * @example 1
       */
      rank?: number;
    };
    /**
     * Task
     * @description Task base object
     */
    LabelBaseItem: {
      /**
       * @description Task ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Task title
       * @example Meeting
       */
      title?: string | null;
      /**
       * @description Task description
       * @example Monthly meeting with consulting team
       */
      description?: string | null;
      /**
       * @description Task status
       * @example todo
       * @enum {string}
       */
      status?: "todo" | "done";
      /**
       * @description Task is private or public
       * @default false
       */
      is_private?: boolean;
      /**
       * Format: date-time
       * @description due date and time of task
       * @example 2020-01-01T00:00:00+01:00
       */
      due_date?: string;
      assigned_staff_ids?: number[] | null;
      /** @description Label */
      label?: {
        /**
         * @description Label id
         * @example 6657
         */
        id?: number;
        /**
         * @description Label title
         * @example Reminder
         */
        name?: string;
        /**
         * @description Color of label
         * @example #f7dcf5
         */
        color?: string | null;
        /**
         * @description If label is active
         * @example true
         */
        is_active?: boolean;
        /**
         * @description Label rank
         * @example 1
         */
        rank?: number;
      };
      /**
       * Format: date-time
       * @description Updated date of task (system)
       * @example 2020-01-01T00:00:00+01:00
       */
      updated?: string;
      /**
       * Format: date-time
       * @description Created date of task (system)
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Main object related to the task (limit to 1). */
      related?: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact" | "invoice" | "creditnote" | "estimate" | "order";
        })[];
      /** @description Owner of the task */
      owner?: {
        /**
         * @description owner type
         * @enum {string}
         */
        type?: "staff";
        /**
         * @description Owner id
         * @example 51
         */
        id?: number;
      };
      /**
       * @description Company linked to the task
       * @example 1
       */
      company_id?: number | null;
      /**
       * @description Individual linked to the task
       * @example 92
       */
      individual_id?: number | null;
      /**
       * @description Contact linked to the task
       * @example 958
       */
      contact_id?: number | null;
      /**
       * @description Priority level of the task
       * @example 1
       */
      priority?: number;
    };
    /** Language Collection */
    LanguageCollection: {
      pagination: components["schemas"]["AccountDocumentCollection"]["pagination"];
      data: ({
          /**
           * @description Custom language ID
           * @example 1
           */
          id: number;
          /**
           * @description Custom language name
           * @example Language name
           */
          lang: string;
          /**
           * @description Custom language flag label
           * @example fr
           */
          flag: string | null;
        })[];
    };
    /** @description Search Result Object */
    SearchResult: ((({
        /**
         * @description Unique ID
         * @example 6657
         */
        id?: string;
        /** @description Main object */
        object?: {
          /** @enum {string} */
          type?: "contact" | "company" | "individual" | "opportunity" | "purchase" | "item" | "declination" | "document" | "staff" | "redactor";
          /** @example 11 */
          id?: number;
          /** @enum {string} */
          sub_type?: "contact" | "opportunity" | "client" | "prospect" | "supplier" | "purInvoice" | "purDelivery" | "purOrder" | "purCreditNote" | "product" | "packaging" | "shipping" | "service" | "declination" | "invoice" | "estimate" | "creditnote" | "order" | "delivery" | "proforma" | "staff" | "document" | "template";
        };
        owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
        /**
         * Format: datetime
         * @description Created datetime of object
         * @example 2020-05-29T11:22:03+02:00
         */
        created?: string;
        /**
         * Format: datetime
         * @description updated datetime of object
         * @example 2020-05-29T11:22:03+02:00
         */
        updated?: string;
        /**
         * @description Status archived or not
         * @example false
         */
        is_archived?: boolean;
      }) & ({
        /**
         * @description Company name
         * @example My company
         */
        name?: string;
        /**
         * @description Company mobile number
         * @example +33600000000
         */
        mobile_number?: string | null;
        /**
         * @description Company fax number
         * @example +33400000000
         */
        fax_number?: string | null;
        /**
         * @description Company phone number
         * @example +33500000000
         */
        phone_number?: string | null;
        /**
         * Format: email
         * @example contact@my-company.com
         */
        email?: string | null;
        /** Address */
        invoicing_address?: ({
          /**
           * @description Unique ID
           * @example 6657
           */
          id?: number;
          /**
           * @description Address line one
           * @example 30 Commercial Road
           */
          address_line_1?: string | null;
          /**
           * @description Address line two
           * @example Finance and Accounting
           */
          address_line_2?: string | null;
          /**
           * @description Address line three
           * @example Lighthouse Promotions
           */
          address_line_3?: string | null;
          /**
           * @description Address line four
           * @example PO Box 215
           */
          address_line_4?: string | null;
          /**
           * @description Address postal code
           * @example 75012
           */
          postal_code?: string | null;
          /**
           * @description Address city name
           * @example Paris
           */
          city?: string;
          /**
           * @description Address country code
           * @example FR
           */
          country_code?: string;
        }) | null;
        delivery_address?: components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["1"]["invoicing_address"];
        /** @description Company's main contact */
        main_contact?: ({
          /**
           * @description contact identifier
           * @example 6830
           */
          id?: number;
          /**
           * @description Contact last name
           * @example Doe
           */
          last_name?: string;
          /**
           * @description Contact first name
           * @example John
           */
          first_name?: string;
          /**
           * @description Civility of individual
           * @example mrs
           * @enum {string}
           */
          civility?: "mr" | "mrs" | "ms";
        }) | null;
        /**
         * @description Company reference
         * @example My company reference
         */
        reference?: string;
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Individual first name
         * @example John
         */
        first_name?: string | null;
        /**
         * @description Individual last name
         * @example Doe
         */
        last_name?: string;
        /**
         * @description Civility of individual
         * @example mrs
         * @enum {string}
         */
        civility?: "mr" | "mrs" | "ms";
        /**
         * @description Individual mobile number
         * @example +33600000000
         */
        mobile_number?: string | null;
        /**
         * @description Individual fax number
         * @example +33400000000
         */
        fax_number?: string | null;
        /**
         * @description Individual phone number
         * @example +33500000000
         */
        phone_number?: string | null;
        /**
         * Format: email
         * @example jonh.doe@email.com
         */
        email?: string | null;
        invoicing_address?: components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["1"]["invoicing_address"];
        delivery_address?: components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["1"]["invoicing_address"];
        /**
         * @description Individual reference
         * @example The reference of individual
         */
        reference?: string;
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Opportunity ident
         * @example OPP-001
         */
        number?: string;
        /**
         * @description Opportunity name
         * @example Opportunity number one
         */
        name?: string;
        /**
         * @description Opportunity status
         * @example won
         * @enum {string}
         */
        status?: "open" | "won" | "lost" | "cancelled" | "closed" | "late";
        /**
         * @description potential amount non formatted
         * @example 1450.45
         */
        amount?: number;
        related?: {
          id?: number;
        } & (OneOf<[{
          /** @description company name */
          name?: string;
          /** @enum {string} */
          type?: "company";
        }, {
          /** @enum {string} */
          type?: "individual";
          /**
           * @description Individual first name
           * @example John
           */
          first_name?: string;
          /**
           * @description Individual last name
           * @example Doe
           */
          last_name?: string;
          /**
           * @description Civility of linked contact
           * @example mrs
           * @enum {string}
           */
          civility?: "mr" | "mrs" | "ms";
        }]>);
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * Format: text
         * @description Contact first name
         * @example John
         */
        first_name?: string | null;
        /**
         * Format: text
         * @description Contact last name
         * @example Doe
         */
        last_name?: string | null;
        /**
         * @description Civility of contact
         * @example mrs
         * @enum {string}
         */
        civility?: "mr" | "mrs" | "ms";
        /**
         * Format: email
         * @description Contact email
         * @example john.doe@example-company.com
         */
        email?: string | null;
        /**
         * @description Contact phone number
         * @example +33100000000
         */
        phone_number?: string | null;
        /**
         * @description Contact mobile number
         * @example +33100000000
         */
        mobile_number?: string | null;
        /**
         * @description Contact fax number
         * @example +33100000000
         */
        fax_number?: string | null;
        /**
         * @description Contact job
         * @example Financial
         */
        position?: string | null;
        companies?: {
            /**
             * Format: text
             * @description Company name
             * @example This company
             */
            name?: string;
            /**
             * @description Company id
             * @example 5456
             */
            id?: number;
          }[];
        invoicing_address?: components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["1"]["invoicing_address"];
        delivery_address?: components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["1"]["invoicing_address"];
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Purchase status
         * @example read
         * @enum {string}
         */
        status?: "draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled" | "sent" | "read" | "accepted" | "expired" | "partialInvoiced" | "invoiced" | "stored" | "spent" | "partialspend";
        /**
         * @description Purchase number
         * @example F_INV-20210303-00001
         */
        number?: string;
        /**
         * @description Purchase external number
         * @example FACT-2020W3-00001
         */
        external_number?: string;
        /** @description Purchase subject */
        name?: string | null;
        /**
         * Format: float
         * @description Total purchase amount, taxes included
         * @example 133.7
         */
        amount?: number;
        /**
         * @description Purchase currency
         * @example €
         */
        currency?: string;
        related?: {
          id?: number;
        } & (OneOf<[{
          /** @description company name */
          name?: string;
          /** @enum {string} */
          type?: "company";
        }, {
          /** @enum {string} */
          type?: "individual";
          /**
           * @description Individual first name
           * @example John
           */
          first_name?: string;
          /**
           * @description Individual last name
           * @example Doe
           */
          last_name?: string;
          /**
           * @description Civility of linked contact
           * @example mrs
           * @enum {string}
           */
          civility?: "mr" | "mrs" | "ms";
        }]>);
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Item number
         * @example REF_00001
         */
        number?: string;
        /**
         * @description item name
         * @example My product
         */
        name?: string | null;
        /**
         * @description Item description
         * @example This is a product description
         */
        description?: string | null;
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Item declination number
         * @example REF_00001_RED
         */
        number?: string;
        /**
         * @description item declination name
         * @example My product Red
         */
        name?: string | null;
        /**
         * @description Item declination description
         * @example This is a product description with red color
         */
        description?: string | null;
        /** @description Original item related to this declination */
        related?: {
          id?: number;
          number?: string;
          name?: string;
        };
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Document status
         * @example read
         * @enum {string}
         */
        status?: "draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled" | "sent" | "read" | "accepted" | "refused" | "expired" | "advanced" | "partialinvoiced" | "invoiced" | "stored" | "partialspend" | "spent";
        /**
         * @description Document number
         * @example FACT-20210302-00001
         */
        number?: string;
        /** @description Document subject */
        name?: string | null;
        /**
         * Format: float
         * @description Total amount of document, taxes include
         * @example 942.88
         */
        amount?: number;
        /**
         * @description Document currency
         * @example €
         */
        currency?: string;
        related?: {
          id?: number;
        } & (OneOf<[{
          /** @description company name */
          name?: string;
          /** @enum {string} */
          type?: "company";
        }, {
          /** @enum {string} */
          type?: "individual";
          /**
           * @description Individual first name
           * @example John
           */
          first_name?: string;
          /**
           * @description Individual last name
           * @example Doe
           */
          last_name?: string;
          /**
           * @description Civility of linked contact
           * @example mrs
           * @enum {string}
           */
          civility?: "mr" | "mrs" | "ms";
        }]>);
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * Format: text
         * @description Staff's first name
         * @example John
         */
        first_name?: string | null;
        /**
         * Format: text
         * @description Staff's last name
         * @example Doe
         */
        last_name?: string | null;
        /**
         * @description Staff's phone number
         * @example +33100000000
         */
        phone_number?: string | null;
        /**
         * @description Staff's mobile number
         * @example +33100000000
         */
        mobile_number?: string | null;
        /** @description Staff's status */
        blocked?: boolean;
        /**
         * Format: email
         * @description Staff's email
         * @example john.doe@example-company.com
         */
        email?: string | null;
        /**
         * @description Staff's job
         * @example Financial
         */
        position?: string | null;
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Ticket status
         * @example active
         * @enum {string}
         */
        status?: "active" | "pending" | "closed" | "spam";
        /** @description Ticket subject */
        subject?: string;
        /** @description Ticket reference */
        index?: string;
        related?: string[];
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /**
         * @description Redactor status
         * @example ok
         * @enum {string}
         */
        status?: "ok" | "deleted";
        /**
         * @description Redactor step
         * @example read
         * @enum {string}
         */
        step?: "draft" | "sent" | "read" | "accepted";
        /**
         * @description Redactor ident
         * @example REDACTOR-001
         */
        ident?: string;
        related?: string[];
      })) | (components["schemas"]["SearchResult"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
        /** @description Redactor template name */
        name?: string;
        /**
         * @description Redactor template related object
         * @enum {string}
         */
        related_object?: "none" | "document" | "opportunity" | "item" | "rent" | "ticket";
        /**
         * @description Redactor template linked object
         * @enum {string}
         */
        linked_object?: "none" | "client" | "prospect" | "supplier" | "people";
      })))[];
    SearchResultBaseItem: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: string;
      /** @description Main object */
      object?: {
        /** @enum {string} */
        type?: "contact" | "company" | "individual" | "opportunity" | "purchase" | "item" | "declination" | "document" | "staff" | "redactor";
        /** @example 11 */
        id?: number;
        /** @enum {string} */
        sub_type?: "contact" | "opportunity" | "client" | "prospect" | "supplier" | "purInvoice" | "purDelivery" | "purOrder" | "purCreditNote" | "product" | "packaging" | "shipping" | "service" | "declination" | "invoice" | "estimate" | "creditnote" | "order" | "delivery" | "proforma" | "staff" | "document" | "template";
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /**
       * Format: datetime
       * @description Created datetime of object
       * @example 2020-05-29T11:22:03+02:00
       */
      created?: string;
      /**
       * Format: datetime
       * @description updated datetime of object
       * @example 2020-05-29T11:22:03+02:00
       */
      updated?: string;
      /**
       * @description Status archived or not
       * @example false
       */
      is_archived?: boolean;
    };
    /** @description Search Result Aggregations */
    SearchResultAggregations: {
      /** @description Count the number of objects by type */
      count_by_type?: {
        /** @description The 1st value corresponds to active objects, the 2nd to achived objects */
        company?: number[];
        individual?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        contact?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        opportunity?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        purchase?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        item?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        declination?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        document?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        staff?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        ticket?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
        redactor?: components["schemas"]["SearchResultAggregations"]["count_by_type"]["company"];
      };
    };
    /** PhoneCall */
    PhoneCallItem: (({
      id?: number;
      /**
       * @description Incoming call or Outgoing call
       * @enum {string}
       */
      source?: "incoming" | "outcoming";
      /**
       * @description Description of the phone call
       * @example Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
       */
      description?: string | null;
      /**
       * Format: date-time
       * @description Last update date / hour
       * @example 2020-01-01T00:00:00+01:00
       */
      updated?: string;
      /**
       * Format: date-time
       * @description Creation date / hour
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /**
       * @description Total duration of call (in seconds)
       * @example 12345
       */
      duration?: number;
      /**
       * Format: date-time
       * @description Date and hour of phonecall
       * @example 2020-01-01T00:00:00+01:00
       */
      date?: string;
      /** @description Company linked to the phone call */
      company_id?: number | null;
      /** @description Individual linked to the phone call */
      individual_id?: number | null;
      /** @description Contact linked to the phone call */
      contact_id?: number | null;
      /** @description List objects related to the phone call */
      related: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact";
        })[];
      /** @description Priority level of the phone call */
      priority?: number;
    }) & ({
      /** @description Owner of the phone call */
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /**
       * @description Incoming call or Outgoing call
       * @enum {string}
       */
      source?: "incoming" | "outcoming";
      /** @description Phone call topic */
      topic?: {
        /** @example 2235 */
        id?: number;
        /** @example Support */
        name?: string;
      };
      /** @description Phone call result */
      result?: {
        /** @enum {string} */
        id?: "noanswer" | "busy" | "wrongnumber" | "msgdirect" | "msgvocal" | "connected" | "transfer" | "interrupt" | "scheduled" | "unknown";
        /** @example No answer */
        name?: string;
      };
    })) & ({
      /** Embed for PhoneCall object */
      _embed?: ({
        /** Owner of the phone call */
        readonly owner?: components["schemas"]["Activity"]["_embed"]["author"];
        /** @description Objects linked to the phone call */
        readonly related?: ((components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] & {
            /**
             * @description type of related
             * @enum {string}
             */
            _type?: "company";
          }) | (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] & {
            /**
             * @description type of related
             * @enum {string}
             */
            _type?: "individual";
          }) | (components["schemas"]["ContactItem"]["allOf"]["0"] & {
            /**
             * @description type of related
             * @enum {string}
             */
            _type?: "contact";
          }) | (components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] & {
            /**
             * @description type of related
             * @enum {string}
             */
            _type?: "opportunity";
          }))[];
        /** Company linked to the phone call */
        readonly company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        /** Individual linked to the phone call */
        readonly individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        /** Contact linked to the phone call */
        readonly contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
      }) & {
        /** ACL for PhoneCall object */
        acl?: {
          /**
           * @description PhoneCall can be updated
           * @example true
           */
          can_be_updated?: boolean;
          /**
           * @description PhoneCall can be deleted
           * @example true
           */
          can_be_deleted?: boolean;
        };
      };
    });
    /** PhoneCall */
    PhoneCallCollectionItem: components["schemas"]["PhoneCallItem"]["allOf"]["0"] & {
      _embed?: components["schemas"]["PhoneCallItem"]["allOf"]["1"]["_embed"]["allOf"]["0"];
    };
    /** PhoneCall */
    PhoneCallCreateItem: ({
      /** @description Owner of the phone call (Staff id expected) */
      owner_id?: number;
      /** @description Phone call topic */
      topic?: number;
      /**
       * @description Phone call result
       * @enum {string}
       */
      result?: "noanswer" | "busy" | "wrongnumber" | "msgdirect" | "msgvocal" | "connected" | "transfer" | "interrupt" | "scheduled" | "unknown";
      /**
       * @description Incoming call or Outgoing call
       * @enum {string}
       */
      source?: "incoming" | "outcoming";
      /**
       * @description Description of the phone call
       * @example Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
       */
      description?: string | null;
      /**
       * @description Total duration of call (in seconds)
       *
       * *Note:* for phone calls with the "scheduled" result, this value is forcibly set to zero.
       *
       * @example 12345
       */
      duration?: number;
      /**
       * Format: date-time
       * @description Date and hour of phone call
       * @example 2020-01-01T00:00:00+01:00
       */
      date?: string;
      /** @description List objects related to the phone call (limit to 1 of each type) */
      related?: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact";
        })[];
      /** @description Priority level of the phone call */
      priority?: number;
    }) & Record<string, never>;
    /**
     * PhoneCall
     * @description PhoneCall update request body
     */
    PhoneCallUpdateItem: {
      /** @description Owner of the phone call (Staff id expected) */
      owner_id?: number;
      /** @description Phone call topic */
      topic?: number;
      /**
       * @description Phone call result
       * @enum {string}
       */
      result?: "noanswer" | "busy" | "wrongnumber" | "msgdirect" | "msgvocal" | "connected" | "transfer" | "interrupt" | "scheduled" | "unknown";
      /**
       * @description Incoming call or Outgoing call
       * @enum {string}
       */
      source?: "incoming" | "outcoming";
      /**
       * @description Description of the phone call
       * @example Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
       */
      description?: string | null;
      /**
       * @description Total duration of call (in seconds)
       *
       * *Note:* for phone calls with the "scheduled" result, this value is forcibly set to zero.
       *
       * @example 12345
       */
      duration?: number;
      /**
       * Format: date-time
       * @description Date and hour of phone call
       * @example 2020-01-01T00:00:00+01:00
       */
      date?: string;
      /** @description List objects related to the phone call (limit to 1 of each type) */
      related?: ({
          /** @example 1 */
          id?: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type?: "opportunity" | "company" | "individual" | "contact";
        })[];
      /** @description Priority level of the phone call */
      priority?: number;
    };
    /**
     * Phone calls filters
     * @description Phone calls filters
     */
    PhoneCallFilter: {
      /** @description Phone calls filters */
      filters: {
        /**
         * Created at
         * @description Filter the phone calls list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Owners
         * @description Filter the phone calls list by owners
         */
        owners?: number[];
        /**
         * Related Objects
         * @description Filter the phone calls list by related objects
         */
        related_objects?: {
            /** @example company */
            type?: string;
            /** @example 22 */
            id?: number;
          }[];
        /**
         * Companies
         * @description Filter the phone calls list by companies
         */
        companies?: number[];
        /**
         * Individuals
         * @description Filter the phone calls list by individuals
         */
        individuals?: number[];
        /**
         * Contacts
         * @description Filter the phone calls list by contacts
         */
        contacts?: number[];
        /**
         * Topic
         * @description Filter the phone calls list by topic
         */
        topic?: number;
        /**
         * Result
         * @description Filter the phone calls list by result
         * @enum {string}
         */
        result?: "noanswer" | "busy" | "wrongnumber" | "msgdirect" | "msgvocal" | "connected" | "transfer" | "interrupt" | "scheduled" | "unknown";
        /**
         * Source
         * @description Filter the phone calls list by source
         * @enum {string}
         */
        source?: "incoming" | "outcoming";
        /**
         * Due Date
         * @description Filter the phone calls in which the due date is in that time frame
         */
        due_date?: {
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        priority?: {
          /**
           * @description Inclusive minimum priority level of phone calls
           * @example 1
           */
          min?: number;
          /**
           * @description Inclusive maximum priority level of phone calls
           * @example 1
           */
          max?: number;
        };
      };
    };
    /** Calendar Event */
    CalendarEventItem: components["schemas"]["Deals"]["object"]["model"]["oneOf"]["5"] & ({
      _embed?: {
        readonly company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        readonly contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
        readonly individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        readonly owner?: components["schemas"]["CrmActivity"]["author"];
        /** @description Objects linked to the event */
        readonly related?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] | components["schemas"]["EstimateOne"]["allOf"]["0"] | components["schemas"]["InvoiceOne"]["allOf"]["0"] | components["schemas"]["CreditNoteOne"]["allOf"]["0"])[];
        readonly participants?: (components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["CrmActivity"]["author"])[];
        readonly acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["6"];
      };
    });
    /**
     * Calendar event
     * @description Body for calendar event creation
     */
    CalendarEventCreateItem: {
      /**
       * @description Calendar event title
       * @example Meeting
       */
      title: string;
      /**
       * @description Calendar event description
       * @example Monthly meeting with consulting team
       */
      description?: string | null;
      /**
       * Format: date-time
       * @description start date and time of calendar event
       * @example 2020-01-01T00:00:00+01:00
       */
      datetime_start: string;
      /**
       * Format: date-time
       * @description end date and time of calendar event
       * @example 2020-01-01T00:00:00+01:00
       */
      datetime_end: string;
      /**
       * @description Calendar event is private or public
       * @default false
       */
      is_private?: boolean;
      /**
       * @description Calendar event is scheduled for the whole day
       * @default false
       */
      all_day?: boolean;
      /** @description Label id for event */
      label_id: number;
      /**
       * @description Calendar id for event
       * @example myemail@gmail.com
       */
      provider_calendar?: string;
      /** @description Participants (Staff, Contact or External Participants) */
      participants?: ({
          /** @description Id of participant */
          id?: number | string;
          /**
           * @description Type of participant
           * @enum {string}
           */
          type?: "staff" | "contact" | "external";
        })[];
      /** @description Main object related to the calendar event (limit to 1). */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
        })[];
      /**
       * Format: date-time
       * @description Date of creation of the calendar event
       */
      created?: string;
      /**
       * @description Priority level of the calendar event
       * @default 0
       */
      priority?: number;
    };
    /** @description Calendar event update object */
    CalendarEventUpdateItem: {
      /**
       * @description Calendar event title
       * @example Meeting
       */
      title?: string;
      /**
       * @description Calendar event description
       * @example Monthly meeting with consulting team
       */
      description?: string | null;
      /**
       * Format: date-time
       * @description start date and time of calendar event
       * @example 2020-01-01T00:00:00+01:00
       */
      datetime_start?: string;
      /**
       * Format: date-time
       * @description end date and time of calendar event
       * @example 2020-01-01T00:00:00+01:00
       */
      datetime_end?: string;
      /**
       * @description Calendar event is private or public
       * @default false
       */
      is_private?: boolean;
      /**
       * @description Calendar event is scheduled for the whole day
       * @default false
       */
      all_day?: boolean;
      /** @description Label id for event */
      label_id?: number;
      /**
       * @description Calendar id for event
       * @example myemail@gmail.com
       */
      provider_calendar?: string;
      /** @description Participants (Staff, Contact or External Participants) */
      participants?: ({
          /** @description Id of participant */
          id?: number | string;
          /**
           * @description Type of participant
           * @enum {string}
           */
          type?: "staff" | "contact" | "external";
        })[];
      /** @description Main object related to the calendar event (limit to 1). If empty, the link with the existing related object will be removed. */
      related?: ({
          /** @example 1 */
          id: number;
          /**
           * @example opportunity
           * @enum {string}
           */
          type: "opportunity" | "company" | "individual" | "contact" | "estimate" | "invoice" | "creditnote" | "order";
        })[];
      /** @description Priority level of the calendar event */
      priority?: number;
    };
    /**
     * CalendarEventFilters
     * @description Calendar event filters
     */
    CalendarEventFilters: {
      /** @description calendar event filters */
      filters?: {
        due_date?: components["schemas"]["DealsFilters"]["filters"]["due_date"];
        /** @description Owner(s) of event */
        owners?: number[];
        /** @description Staff, contact or external contact of event */
        participants?: ({
            /** @enum {string} */
            type?: "staff" | "contact" | "external";
            id?: number | string;
          })[];
        /** @description Event labels */
        labels?: number[];
        /** @description object(s) linked to event */
        related_objects?: {
            type?: string;
            id?: number;
          }[];
        /** @description Id(s) of company linked to event */
        companies?: number[];
        /** @description Id(s) of individuals linked to event */
        individuals?: number[];
        /** @description Id(s) of contact linked to event */
        contacts?: number[];
        /** @description Priority level of events */
        priority?: {
          /**
           * @description Inclusive minimum priority level of events
           * @example 1
           */
          min?: number;
          /**
           * @description Inclusive maximum priority level of events
           * @example 1
           */
          max?: number;
        };
      };
    };
    /** @description Object linked */
    Related: {
      /** @description Id of object */
      id?: number;
      /** @description Type of object */
      type?: string;
    };
    /** @description The activity object */
    Activity: {
      /**
       * @description Id of activity
       * @example 2wto807ysxa
       */
      id?: string;
      /**
       * @description Event type
       * @example task.created
       */
      event?: string;
      author?: {
        /**
         * @example staff
         * @enum {string}
         */
        type?: "staff";
        /** @example 1024 */
        id?: number;
      };
      /**
       * Format: date-time
       * @description Date of activity
       */
      event_date?: string;
      /**
       * Format: date-time
       * @description Due date of activity
       */
      due_date?: string;
      /** @description Details of events */
      event_details?: {
        [key: string]: unknown;
      };
      /**
       * @description Additional informations
       * @example {
       *   "old": "client",
       *   "new": "prospect"
       * }
       */
      event_more?: {
        [key: string]: unknown;
      };
      /** @description Event object of activity */
      object?: {
        /** @example task */
        type: string;
        id: string | number;
        model?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["2"] | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["CommentItem"]["allOf"]["0"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["5"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["6"] | null;
      };
      /** @description List all direct and indirect relations of the activity’s main object */
      related?: {
          id?: components["schemas"]["Activity"]["object"]["id"];
          /** @example opportunity */
          type?: string;
        }[];
      /** @description Embed objects for activity logs */
      _embed?: {
        /** @description Add the direct relation of the activity’s main object to the response (partially described in object.model.related) */
        readonly object_related?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["ContactItem"]["allOf"]["0"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["1"] | components["schemas"]["Deals"]["object"]["model"]["oneOf"]["2"])[];
        readonly individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        readonly company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        /**
         * Staff Schemas
         * @description Staff schemas according of current user level of visibility on staffs
         */
        readonly author?: components["schemas"]["Staff"]["allOf"]["0"] & ({
          /**
           * @description Staff phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Staff mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Staff fax number
           * @example +33500000000
           */
          fax_number?: string | null;
          /** @description Staff groups */
          groups?: (readonly {
              /** @example 1 */
              id?: number;
              /** @example Sales */
              name?: string;
            }[]) | null;
          /**
           * @description Civility of staff
           * @example mrs
           * @enum {string|null}
           */
          civility?: "mr" | "mrs" | "ms" | null;
          /**
           * Format: date-time
           * @description Creation date of the staff
           * @example 1970-01-01T00:00:00+00:00
           */
          created?: string;
          /**
           * @description Staff privilège profile
           * @example 3443
           */
          profile?: number;
          /** @description Staff team position */
          team?: {
            /** @example -1 */
            id?: number;
            /** @example Commercial */
            name?: string;
          } | null;
          /** @description Staff job */
          job?: {
            /** @example -1 */
            id?: number;
            /** @example Office manager */
            name?: string;
          } | null;
          /**
           * @description Staff time zone
           * @example Europe/Paris
           */
          timezone?: string;
          /**
           * @description Staff language
           * @example fr
           */
          language?: string;
        });
        /** @description Activity's main object's ACL */
        readonly acl?: ({
          /**
           * @description Company can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Company can be delete
           * @example true
           */
          can_be_deleted?: boolean | null;
          /**
           * @description Company Addresses can be listed
           * @example true
           */
          view_companies_addresses?: boolean | null;
          /**
           * @description Company Addresses can be created
           * @example true
           */
          create_companies_addresses?: boolean | null;
          /**
           * @description Company Addresses can be updated
           * @example true
           */
          update_companies_addresses?: boolean | null;
          /**
           * @description Company Addresses can be deleted
           * @example true
           */
          delete_companies_addresses?: boolean | null;
        }) | ({
          /**
           * @description Contact can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Contact can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
          /**
           * @description Contact Addresses can be listed
           * @example true
           */
          view_contacts_addresses?: boolean | null;
          /**
           * @description Contact Addresses can be created
           * @example true
           */
          create_contacts_addresses?: boolean | null;
          /**
           * @description Contact Addresses can be updated
           * @example true
           */
          update_contacts_addresses?: boolean | null;
          /**
           * @description Contact Addresses can be deleted
           * @example true
           */
          delete_contacts_addresses?: boolean | null;
        }) | ({
          /**
           * @description Individual can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Individual can be delete
           * @example true
           */
          can_be_deleted?: boolean | null;
          /**
           * @description Individual Addresses can be listed
           * @example true
           */
          view_individuals_addresses?: boolean | null;
          /**
           * @description Individual Addresses can be created
           * @example true
           */
          create_individuals_addresses?: boolean | null;
          /**
           * @description Individual Addresses can be updated
           * @example true
           */
          update_individuals_addresses?: boolean | null;
          /**
           * @description Individual Addresses can be deleted
           * @example true
           */
          delete_individuals_addresses?: boolean | null;
        }) | ({
          /**
           * @description Task can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Task can be delete
           * @example true
           */
          can_be_deleted?: boolean | null;
        }) | {
          /** @description Comment can be updated */
          can_be_updated?: boolean;
          /** @description Comment can be deleted */
          can_be_deleted?: boolean;
        } | {
          /**
           * @description Opportunity can be updated
           * @example true
           */
          can_be_updated?: boolean;
          /**
           * @description Opportunity can be deleted
           * @example true
           */
          can_be_deleted?: boolean;
          /**
           * @description Can link invoicing documents
           * @example true
           */
          link_invoicing_docs?: boolean;
        } | ({
          /**
           * @description Calendar Event can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Calendar Event can be delete
           * @example true
           */
          can_be_deleted?: boolean | null;
        }) | null;
      };
    };
    /** @description The activity filters */
    ActivityFilters: {
      /** @description Activity filters */
      filters?: {
        /** @description Filter on a specific entity */
        entity?: {
          /**
           * @description Entity type
           * @enum {string}
           */
          type?: "email" | "calendar_event" | "staff" | "task" | "comment" | "snippettracking" | "phonecall" | "contact" | "prospect" | "opportunity" | "campaign" | "client" | "supplier";
          /** @description Entity id to filter on */
          id?: number;
        };
        entities?: components["schemas"]["ActivityFilters"]["filters"]["entity"]["type"][];
        due_date?: components["schemas"]["DealsFilters"]["filters"]["due_date"];
        /**
         * @description Filter activity by level. Get main activities/secondary activities or both by default.
         * @default [
         *   "main",
         *   "secondary"
         * ]
         * @example [
         *   "main"
         * ]
         */
        activity_level?: ("main" | "secondary")[];
      };
    };
    /** Email */
    EmailItem: ({
      /** @description Email Identifier */
      id?: string;
      /** @description Owner of the email */
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /** @description Subject of email */
      subject?: string;
      /** @description Has been open or not */
      is_open?: boolean;
      /** @description Has been scheduled or immediate send */
      is_scheduled?: boolean;
      /**
       * Format: email
       * @description From email
       */
      from?: string;
      /** @description Email addresses of destinators */
      participants?: string[];
      /** @description Private email or not */
      is_private?: boolean;
      /**
       * Format: date-time
       * @description Creation date / hour
       */
      created?: string;
      /**
       * Format: date-time
       * @description Last update date / hour
       */
      updated?: string;
      /** @description Main object related to the email (limit to 1). */
      related?: {
          /** @example 1 */
          id?: number;
          /** @example opportunity */
          type?: string;
        }[];
      /** @description Company linked to email */
      company_id?: number;
      /** @description Individual linked to email */
      individual_id?: number;
      /** @description Contact linked to email */
      contact_id?: number;
      /** @description Email thread identifier */
      thread_id?: string | number;
    }) & {
      /** @description Full email content */
      content?: string;
      /** @description Short description */
      snippet?: string;
    };
    /**
     * Email
     * @description The email object
     */
    EmailEngineItem: {
      /** @description Email Identifier */
      id?: string;
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /** @description Subject of email */
      subject?: string;
      /** @description Content of email */
      content?: string;
      /** @description Has been open or not */
      is_open?: boolean;
      /** @description Has been scheduled or immediate send */
      is_scheduled?: boolean;
      from?: {
        /**
         * Format: email
         * @description Recipient's email
         */
        email?: string;
        /** @description Recipient's name */
        name?: string;
      };
      /** @description An array of name+email pairs the message was sent to. */
      to?: components["schemas"]["EmailEngineItem"]["from"][];
      /** @description An array of name+email pairs the message was cc'd to. */
      cc?: components["schemas"]["EmailEngineItem"]["from"][];
      /** @description An array of name+email pairs the message was bcc'd to. For received mail this is nearly always empty. */
      bcc?: components["schemas"]["EmailEngineItem"]["from"][];
      /** @description Private email or not */
      is_private?: boolean;
      /**
       * Format: date-time
       * @description Creation date / hour
       */
      created?: string;
      /**
       * Format: date-time
       * @description Last update date / hour
       */
      updated?: string;
      /** @description Main object related to the email. */
      related?: {
          /** @example 1 */
          id?: number;
          /** @example opportunity */
          type?: string;
        }[];
      /**
       * @description Email message identifier
       * @example axB8kdF092
       */
      message_id?: string | null;
      /**
       * @description Email thread identifier
       * @example axB8kdF092
       */
      thread_id?: string | null;
      /**
       * @description Linked to the email object
       * @example client.1
       */
      linked_object?: string | null;
      /** @description Attachment objects */
      attachments?: ({
          /**
           * @description Attachment file name
           * @example business-card
           */
          name: string;
          extension: components["schemas"]["EmailAttachmentOutput"]["extension"];
          /**
           * @description Attachment file size
           * @example 1234
           */
          size: number;
          /**
           * @description Attachment file content id
           * @example bpo8p9tcqrf3pcm11j8ikvx9o
           */
          content_id: string;
          /**
           * @description Attachment file content disposition
           * @example attachment
           * @enum {string}
           */
          content_disposition: "attachment" | "inline";
          /**
           * Format: uri
           * @description URL to file
           */
          public_link: string;
        })[];
    };
    EmailSendBody: {
      /** @description Subject */
      subject: string;
      /** @description Content */
      content: string;
      /** @description Main recipients */
      to: ({
          /** @description Participant name */
          name?: string | null;
          /**
           * Format: email
           * @description Participant email
           */
          email: string;
          /** @description Related objects */
          related?: ({
              /** @description Object id */
              id: number;
              /**
               * @description Object type
               * @enum {string}
               */
              type: "company" | "contact" | "client" | "supplier" | "prospect" | "individual" | "estimate" | "invoice" | "delivery" | "order" | "creditnote" | "proforma" | "opportunity" | "staff";
            })[];
        })[];
      /** @description Recipients in copy */
      cc?: components["schemas"]["EmailSendBody"]["to"]["items"][];
      /** @description Recipients in blind copy */
      bcc?: components["schemas"]["EmailSendBody"]["to"]["items"][];
      /** @description Related objects */
      related?: ({
          /** @description Object id */
          id: number;
          /**
           * @description Object type
           * @enum {string}
           */
          type: "estimate" | "invoice" | "delivery" | "order" | "creditnote" | "proforma" | "opportunity" | "company" | "client" | "supplier" | "prospect" | "individual" | "contact" | "purInvoice" | "purCreditNote" | "purOrder" | "purDelivery";
        })[];
      /** @description Message ID of the email to which this email is a reply */
      in_reply_to_id?: string | null;
      /** @description Ataachments objects */
      attachments?: ({
          /**
           * @description Attachment filename
           * @example business-card.pdf
           */
          name: string;
          /**
           * @description Attachment file size
           * @example 1234
           */
          size: number;
          /**
           * @description Attachment file content id
           * @example bpo8p9tcqrf3pcm11j8ikvx9o
           */
          content_id: string;
          /**
           * @description Attachment file content type
           * @example application/pdf
           */
          content_type: string;
          /**
           * @description Attachment file content disposition
           * @enum {string}
           */
          content_disposition: "attachment" | "inline";
        })[];
    };
    /**
     * Mail provider error
     * @description The error
     */
    PartialEmailHeader: {
      /** @description Error detail */
      error?: {
        /** @description HTTP status code */
        code?: number;
        /** @description Error message */
        message?: string;
      };
    };
    /** DNS authentication result */
    EmailAuthenticationItem: {
      /** @description Indicates if this is a valid domain */
      valid?: boolean;
      /** @description Domain for which the DNS information is retrieved */
      domain?: string;
      /** @description DNS records */
      dns?: {
        /**
         * cname.yaml
         * @description The CNAME for your sending domain
         */
        mail_cname?: {
          /** @description Indicates if this is a valid CNAME */
          valid?: boolean;
          /** @description The type of DNS record */
          type?: string;
          /** @description The domain that this CNAME is created for */
          host?: string;
          /** @description The CNAME record */
          data?: string;
        };
        /**
         * dns.yaml
         * @description DNS record
         */
        dkim1?: {
          /** @description Indicates if this is a valid DNS record */
          valid?: boolean;
          /** @description The type of DNS record */
          type?: string;
          /** @description The domain that this DNS record was created for */
          host?: string;
          /** @description The DNS record */
          data?: string;
        };
        dkim2?: components["schemas"]["EmailAuthenticationItem"]["dns"]["dkim1"];
      };
    };
    /** DNS validation result */
    EmailValidationItem: {
      /** @description Indicates if this is a valid domain */
      valid?: boolean;
      /** @description Domain for which the DNS information is retrieved */
      domain?: string;
      /** @description DNS records */
      validation_results?: {
        mail_cname?: ({
          /** @description If the check passed or not */
          valid?: boolean;
          /** @description The error message */
          reason?: string | null;
        }) | null;
        dkim1?: components["schemas"]["EmailValidationItem"]["validation_results"]["mail_cname"];
        dkim2?: components["schemas"]["EmailValidationItem"]["validation_results"]["mail_cname"];
        spf?: components["schemas"]["EmailValidationItem"]["validation_results"]["mail_cname"];
      };
    };
    /** Email verification */
    EmailVerificationInput: {
      /**
       * Format: email
       * @description Email address to verify
       * @example john-doe@example.com
       */
      email: string;
      /**
       * Format: uri
       * @description Uri to be redirected to after email validation
       * @example https://www.sellsy.com
       */
      redirect_uri?: string | null;
    };
    /** Email verification */
    EmailVerificationValidateInput: {
      /**
       * Format: email
       * @description Email address to verify
       * @example john-doe@example.com
       */
      email: string;
    };
    /** Email verification result */
    EmailVerificationValidateOutput: {
      /**
       * @description Indicates if the email has already been verified
       * @example false
       */
      verified?: boolean;
    };
    /** Suggested recipient */
    EmailRecipientSuggestionOutput: {
        /**
         * Format: email
         * @description Suggested recipient's email
         * @example john.doe@example.com
         */
        email?: string;
        /**
         * @description Suggested recipient's name
         * @example John Doe
         */
        name?: string;
        relatedObject?: components["schemas"]["EmailSendBody"]["related"]["items"];
      }[];
    /**
     * Recipients
     * @description List of recipients
     */
    EmailRecipientsOutput: {
        /**
         * Format: email
         * @description Recipient's email
         * @example john.doe@example.com
         */
        email?: string;
        /**
         * @description Recipient's name
         * @example John Doe
         */
        name?: string;
      }[];
    /**
     * Email attachment
     * @description The email attachment info
     */
    EmailAttachmentOutput: {
      /**
       * @description Attachment name
       * @example business-card
       */
      name: string;
      /**
       * Attachment file extension
       * @description Attachment file extension
       * @example pdf
       * @enum {string}
       */
      extension: "rtf" | "txt" | "jpg" | "jpeg" | "png" | "pdf" | "xml" | "xsl" | "csv" | "xls" | "zip" | "xlsx" | "doc" | "docx" | "ppt" | "pptx" | "json" | "dxf" | "dwg" | "svg" | "psd" | "ai" | "eps" | "indd" | "gdoc" | "avi" | "mp3" | "m4a" | "mp4" | "rar" | "gif" | "gplf" | "gform" | "gsheet" | "gslides" | "gdraw" | "ods" | "odt" | "odp" | "odg" | "odf" | "sat" | "wav" | "wave" | "wmv" | "xlsm" | "stl" | "ped" | "tgz" | "kmz" | "kml" | "ppsx" | "tiff" | "tif" | "amr" | "vcf" | "cdr" | "ar3" | "eml" | "mmap" | "msg" | "skp" | "ics" | "tnef" | "webp";
      /**
       * @description Attachment file size
       * @example 1234
       */
      size: number;
      /**
       * @description Attachment file content id
       * @example bpo8p9tcqrf3pcm11j8ikvx9o
       */
      content_id: string;
      /**
       * @description Attachment file content type
       * @example application/pdf
       */
      content_type: string;
    };
    /**
     * WebhookFilters
     * @description Webhooks filters list
     */
    WebhookFilters: {
      /** @description Opportunity filters */
      filters: {
        /**
         * @description Webhook type
         * @example slack
         * @enum {string}
         */
        type?: "http" | "slack";
        /**
         * @description Webhook status
         * @example true
         */
        is_enabled?: boolean;
        /**
         * @description Webhook endpoint (either url for http type, either slack url for slack type)
         * @example http://{host}/webhook
         */
        endpoint?: string;
      };
    };
    WebhookReadItem: (({
      /**
       * @description Webhook status
       * @default true
       */
      is_enabled?: boolean;
      /**
       * @description Webhook endpoint (either url for http type, either slack url for slack type)
       * @example http://{host}/webhook
       */
      endpoint?: string;
    } & ({
      id?: number;
      /**
       * @description Webhook type
       * @example slack
       * @enum {string}
       */
      type?: "http" | "slack";
      /**
       * Format: date-time
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * Format: date-time
       * @example 1970-01-01T00:00:00+00:00
       */
      updated?: string | null;
      /**
       * Format: date-time
       * @example 1970-01-01T00:00:00+00:00
       */
      last_succeeded?: string | null;
      /**
       * Format: date-time
       * @example 1970-01-01T00:00:00+00:00
       */
      last_failed?: string | null;
      /** @example 0 */
      nb_failures?: number;
    })) & ({
      /**
       * @description required for slack type webhook
       * @example sales_notifs
       */
      default_channel?: string | null;
      /**
       * webhookConfigurationSlackItems
       * @description Describe all events to enable as a key
       */
      configuration?: ({
          /**
           * @description Event id (fetch from /webhooks/events)
           * @example task.created
           */
          id?: string;
          /**
           * @description Event enabled on webhook
           * @example true
           */
          is_enabled?: boolean;
          /** @description Slack channel */
          channel?: string | null;
        })[];
    })) | (components["schemas"]["WebhookReadItem"]["anyOf"]["0"]["allOf"]["0"] & {
      /**
       * webhookConfigurationHttpItems
       * @description Describe all events to enable as a key
       */
      configuration?: {
          /**
           * @description Event id (fetch from /webhooks/events)
           * @example task.created
           */
          id?: string;
          /**
           * @description Event enabled on webhook
           * @example true
           */
          is_enabled?: boolean;
        }[];
    });
    WebhookEditItem: ({
      /**
       * @description Webhook status
       * @default true
       */
      is_enabled?: boolean;
      /**
       * @description Webhook endpoint (either url for http type, either slack url for slack type)
       * @example http://{host}/webhook
       */
      endpoint?: string;
      /**
       * @description required for slack type webhook
       * @example sales_notifs
       */
      default_channel?: string | null;
      configuration?: components["schemas"]["WebhookReadItem"]["anyOf"]["0"]["allOf"]["1"]["configuration"];
    }) | {
      /**
       * @description Webhook status
       * @default true
       */
      is_enabled?: boolean;
      /**
       * @description Webhook endpoint (either url for http type, either slack url for slack type)
       * @example http://{host}/webhook
       */
      endpoint?: string;
      configuration?: components["schemas"]["WebhookReadItem"]["anyOf"]["1"]["allOf"]["1"]["configuration"];
    };
    WebhookCreateItem: ({
      /**
       * @description Webhook status
       * @default true
       */
      is_enabled?: boolean;
      /**
       * @description Webhook endpoint (either url for http type, either slack url for slack type)
       * @example http://{host}/webhook
       */
      endpoint?: string;
      /**
       * @description required for slack type webhook
       * @example sales_notifs
       */
      default_channel?: string | null;
      /**
       * @description Webhook type
       * @example slack
       * @enum {string}
       */
      type?: "slack" | "http";
      configuration?: components["schemas"]["WebhookReadItem"]["anyOf"]["0"]["allOf"]["1"]["configuration"];
    }) | ({
      /**
       * @description Webhook status
       * @default true
       */
      is_enabled?: boolean;
      /**
       * @description Webhook endpoint (either url for http type, either slack url for slack type)
       * @example http://{host}/webhook
       */
      endpoint?: string;
      /**
       * @description Webhook type
       * @example http
       * @enum {string}
       */
      type?: "http" | "slack";
      configuration?: components["schemas"]["WebhookReadItem"]["anyOf"]["1"]["allOf"]["1"]["configuration"];
    });
    /**
     * webhookEvents
     * @description List available webhook events
     */
    WebhookEventsList: ({
        /**
         * @description Entity
         * @example task
         */
        id?: string;
        /**
         * @description Entity label
         * @example Tasks
         */
        description?: string;
        /**
         * @description List available events for current entity
         * @example {
         *   "created": "Creation",
         *   "deleted": "Deletion",
         *   "addressadded": "Address added"
         * }
         */
        events?: {
          [key: string]: string;
        };
      } | (components["schemas"]["WebhookEventsList"]["items"]["anyOf"]["0"] & ({
        /**
         * @description Entity
         * @example task
         */
        parent?: string | null;
      })))[];
    PaymentMethod: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Label of payment method
       * @example Paypal
       */
      label?: string;
    };
    Payment: {
      /**
       * @description Payment id
       * @example 7
       */
      id?: number;
      /**
       * @description Payment reference
       * @example reference
       */
      number?: string | null;
      /**
       * Format: date-time
       * @description Payment date (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      paid_at?: string;
      /**
       * @description Payment status
       * @example pending
       * @enum {string}
       */
      status?: "pending" | "confirmed" | "rejected" | "failed" | "refund";
      /**
       * @description Payment method id _(cf `get./payments/methods`)_
       * @example 7
       */
      payment_method_id?: number;
      /**
       * @description Payment type
       * @example credit
       * @enum {string}
       */
      type?: "credit" | "debit";
      /** @description Amount informations */
      amounts?: {
        /**
         * @description Total amount of payment
         * @example 1007.90
         */
        total?: string;
        /**
         * @description Remaining amount of payment to be linked
         * @example 507.90
         */
        remaining?: string;
      };
      /**
       * @description Currency code
       * @example EUR
       */
      currency?: string;
      /** @description Information on banking */
      bank_deposit?: {
        /**
         * @description Depository bank id
         * @example 7
         */
        bank_account_id?: number;
        /**
         * Format: date
         * @description Date of banking
         * @example 2022-05-30
         */
        date?: string;
      } | null;
      /** @description Company or individual linked */
      related?: {
        /**
         * @description Id of object
         * @example 7
         */
        id?: number;
        /**
         * @description Type of object
         * @example company
         * @enum {string}
         */
        type?: "company" | "individual";
      };
      /** @description payment-related object */
      related_objects?: ({
          /**
           * @description Id of object
           * @example 7
           */
          id?: number;
          /**
           * @description Type of object
           * @example estimate
           * @enum {string}
           */
          type?: "invoice" | "credit-note" | "order" | "estimate";
          /**
           * @description Amount related to the object
           * @example 500
           */
          amount_linked?: string;
          /**
           * Format: date
           * @description Date of linking the payment to the object
           * @example 1970-01-01
           */
          linked_date?: string;
        })[];
      /**
       * @description Note of payment
       * @example Early payment of the invoice XXX
       */
      note?: string | null;
      /**
       * Payment embed
       * @description Payment embed
       */
      _embed?: {
        /** @description Payment acl */
        acl?: {
          /**
           * @description Can be update a payment
           * @example true
           */
          can_be_updated?: boolean;
          /**
           * @description Can be delete a payment
           * @example false
           */
          can_be_deleted?: boolean;
        };
        /** @description Company linked to payment */
        company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
        /** @description Individual linked to payment */
        individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
      };
    };
    CreatePayment: {
      /**
       * @description Payment identifier
       * @example reference
       */
      number?: string;
      /**
       * Format: date-time
       * @description Payment date (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      paid_at: string;
      /**
       * @description Payment method id
       * @example 7
       */
      payment_method_id: number;
      /**
       * @description Payment type
       * @example credit
       * @enum {string}
       */
      type: "credit" | "debit";
      /** @description Amount of payment */
      amount: {
        /**
         * @description Amount (cannot be zero or negative)
         * @example 999.90
         */
        value: string;
        /**
         * @description Currency (ISO 4217)
         * @example EUR
         */
        currency: string | null;
      };
      /**
       * @description Note of payment
       * @example Invoice XXX paid
       */
      note?: string | null;
    };
    /** Unit object */
    Unit: {
      /** @example 9837 */
      id?: number;
      /** @example m² */
      label?: string;
    };
    Team: {
      /**
       * @description Team id
       * @example -1
       */
      id?: number;
      /**
       * @description Team name
       * @example Commercial
       */
      name?: string;
      /** @description List of Jobs */
      jobs?: {
        /**
         * @description Label ID
         * @example -3
         */
        id?: number;
        /**
         * @description Name of label
         * @example Office manager
         */
        name?: string;
      };
    };
    /** Profile */
    Profiles: {
      /**
       * @description Profile id
       * @example 6657
       */
      id: number;
      /**
       * @description Profile name
       * @example Collaborator
       */
      name: string;
      /**
       * @description Indicates if this profile grants administrator privileges
       * @example true
       */
      is_administrator: boolean;
    };
    /** Currency */
    Currency: {
      /**
       * @description Currency Identifier
       * @example 13
       */
      id?: number;
      /**
       * @description Currency code (EUR, USD..)
       * @example EUR
       */
      code?: string;
      /**
       * @description Currency symbol (€, $)
       * @example €
       */
      symbol?: string;
      /**
       * @description Is default currency?
       * @example true
       */
      is_default?: boolean;
    };
    /** Country */
    Country: {
      /**
       * @description Internal code
       * @example IT
       */
      code?: string;
      /**
       * @description ISO alpha 2
       * @example IT
       */
      "iso-alpha-2"?: string;
      /**
       * @description ISO alpha 3
       * @example ITA
       */
      "iso-alpha-3"?: string;
      /**
       * @description Country name
       * @example Italie
       */
      name?: string;
    };
    /** Subscription */
    Subscription: {
      licenses?: ({
          /**
           * @description License identifier
           * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
           */
          id?: string;
          /**
           * @description License code
           * @enum {string}
           */
          code?: "pack_prospecting_sale" | "pack_invoicing_management" | "pack_all_included";
          /**
           * @description Number of licenses available
           * @example 5
           */
          available?: number;
          /**
           * @description Total of licenses
           * @example 10
           */
          total?: number;
        })[];
      /**
       * @example {
       *   "accounting": true,
       *   "bankreconciliation": true,
       *   "companySearch": true,
       *   "invoicing": true,
       *   "mailing": true,
       *   "massmailing": true,
       *   "phonecall": true,
       *   "proposal": true,
       *   "prospection": true,
       *   "purchases": true,
       *   "recurring": true,
       *   "saleestimate": true,
       *   "scheduler": true,
       *   "stock": false,
       *   "support": false,
       *   "yousign": true
       * }
       */
      plugins?: {
        [key: string]: boolean;
      };
      billing_contact?: {
        /**
         * @description User's lastname
         * @example Doe
         */
        last_name?: string | null;
        /**
         * @description User's firstname
         * @example John
         */
        first_name?: string | null;
        /**
         * Format: email
         * @description User's email
         * @example contact@example-company.com
         */
        email?: string | null;
        /**
         * @description User's phone
         * @example 33100000000
         */
        phone_number?: string | null;
      };
      billing_settings?: {
        /**
         * Format: date-time
         * @description Date of start service
         */
        service_start_date?: string | null;
        /**
         * Format: date-time
         * @description Date of end service
         */
        service_end_date?: string | null;
        /**
         * @description Payment method of subscription
         * @enum {string}
         */
        payment_method?: "card" | "transfer" | "sepa";
        /**
         * @description Plan of subscription
         * @example ESSENTIAL_MONTHLY
         */
        plan?: string | null;
        amounts?: {
          monthly?: {
            /**
             * @description Total of monthly amount
             * @example 32500
             */
            total?: number;
            /**
             * @description Total of discount for monthly amount
             * @example 100
             */
            total_discount?: number;
            /**
             * @description Total after discount of monthly amount
             * @example 32400
             */
            total_discounted?: number;
          };
          yearly?: {
            /**
             * @description Total of yearly amount
             * @example 390000
             */
            total?: number;
            /**
             * @description Total of discount for yearly amount
             * @example 10000
             */
            total_discount?: number;
            /**
             * @description Total after discount of yearly amount
             * @example 380000
             */
            total_discounted?: number;
          };
        };
      };
      billing_address?: {
        /**
         * @description Corp name
         * @example Sellsy
         */
        client_name?: string;
        /**
         * @description Address line one
         * @example 30 Commercial Road
         */
        address_line_1?: string | null;
        /**
         * @description Address line two
         * @example Finance and Accounting
         */
        address_line_2?: string | null;
        /**
         * @description Address postal code
         * @example 75012
         */
        postal_code?: string | null;
        /**
         * @description Address city name
         * @example Paris
         */
        city?: string | null;
        /**
         * @description Address country
         * @example France
         */
        country?: string | null;
        /**
         * @description Address country code
         * @example FR
         */
        country_code?: string | null;
      };
      /**
       * Format: date-time
       * @description Date of the next subscription payment
       */
      next_payment_date?: string | null;
      renew_cart?: {
        /**
         * @description Cart id
         * @example f0173ec-1fb2-43ce-80c1-f972390b237e
         */
        id?: string;
        /**
         * @description Date of the beginning of the cart
         * @example 2022-02-17T00:00:00.000000Z
         */
        period_appliance_start?: string;
      } | null;
      /**
       * @description Set of features available only to specific subscriptions, with a boolean indicating whether each function is accessible or blocked. </br> This array may be empty if your subscription does not include this notion.
       *
       * @example {
       *   "feature_1": true,
       *   "feature_2": false
       * }
       */
      features?: Record<string, unknown> | null;
    };
    /** Item */
    ItemReadItem: {
      /**
       * @description Item id
       * @example 6657
       */
      id: number;
      /**
       * @description Item type
       * @enum {string}
       */
      type: "product" | "service" | "shipping" | "packaging";
      /**
       * @description Item name
       * @example lorem ipsum
       */
      name?: string | null;
      /**
       * @description Item reference
       * @example ref0123
       */
      reference: string;
      /**
       * @deprecated
       * @description Item reference price <br/>>This field is deprecated, refer to `is_reference_price_taxes_free` to use either `reference_price_taxes_inc` or `reference_price_taxes_exc` instead
       * @example 19.99
       */
      reference_price?: string;
      /**
       * @description Item's reference price excluding taxes
       * @example 19.99
       */
      reference_price_taxes_exc: string;
      /**
       * @description Item's purchase price excluding taxes
       * @example 8.25
       */
      purchase_amount?: string;
      /**
       * @description Item's reference price including taxes
       * @example 23.98
       */
      reference_price_taxes_inc: string;
      /**
       * @description Item is reference price has taxes free
       * @example true
       */
      is_reference_price_taxes_free: boolean;
      /**
       * @description Tax id
       * @example 354
       */
      tax_id: number | null;
      /**
       * @description Unit id
       * @example 952
       */
      unit_id: number | null;
      /**
       * @description Category id (only for product and service types)
       * @example 123
       */
      category_id?: number;
      /**
       * @deprecated
       * @description Item's price excluding taxes <br/>>This field is deprecated, base on `is_reference_price_taxes_free` to use either `reference_price_taxes_inc` or `reference_price_taxes_exc` instead
       * @example 500.00
       */
      price_excl_tax?: string;
      /**
       * @description Currency code
       * @example EUR
       */
      currency?: string | null;
      /**
       * @description Standard quantity
       * @example 3
       */
      standard_quantity?: string;
      /**
       * @description Description of item
       * @example T-shirt 90% coton
       */
      description?: string | null;
      /**
       * @description To add the name of item in description
       * @example true
       */
      is_name_included_in_description?: boolean;
      /**
       * @description Accounting code id
       * @example 321
       */
      accounting_code_id?: number | null;
      /**
       * @description Accounting purchase code id
       * @example 123
       */
      accounting_purchase_code_id?: number | null;
      /**
       * @description Status archived or not
       * @example false
       */
      is_archived?: boolean;
      /**
       * @description Item declined or not
       * @example false
       */
      is_declined?: boolean;
    };
    /** Declination */
    DeclinationRead: {
      /**
       * @description Declination id
       * @example 3
       */
      id?: number;
      /**
       * @description Item name
       * @example lorem ipsum
       */
      name?: string;
      /**
       * @description Declination name
       * @example lorem ipsum
       */
      reference?: string;
      /**
       * @description Item ID
       * @example 123454
       */
      item_id?: number;
      /**
       * @description Item tax ID
       * @example 12345
       */
      tax_id?: number;
      /**
       * @description Declination description
       * @example lorem ipsum
       */
      description?: string;
      /**
       * @description Declination's purchase price excluding taxes
       * @example 500
       */
      purchase_amount?: string;
      /**
       * @description Add the name to the description
       * @example true
       */
      is_name_included_in_description?: boolean;
      /**
       * @description Currency code
       * @example EUR
       */
      currency?: string | null;
      /**
       * @description Declination's reference price excluding taxes
       * @example 400
       */
      reference_price_taxes_exc?: string;
    };
    /** Create item */
    CreateItem: {
      /** @enum {string} */
      type: "product" | "service";
      /**
       * @description Item name
       * @example lorem ipsum
       */
      name?: string;
      /**
       * @description Item reference
       * @example ref0123
       */
      reference: string;
      /**
       * @description Item reference price
       * @example 19.99
       */
      reference_price?: string;
      /**
       * @description Item's purchase price excluding taxes
       * @example 8.25
       */
      purchase_amount?: string;
      /**
       * @description Price expressed without tax
       * @example true
       */
      is_reference_price_taxes_free?: boolean;
      /**
       * @description Tax id
       * @example 354
       */
      tax_id?: number;
      /**
       * @description Unit id
       * @example 952
       */
      unit_id?: number;
      /**
       * @description Category id (only for product and service types)
       * @example 123
       */
      category_id?: number;
      /**
       * @description Standard quantity
       * @example 3
       */
      standard_quantity?: string;
      /**
       * @description Description of item
       * @example T-shirt 90% coton
       */
      description?: string;
      /**
       * @description To add the name of item in description
       * @example true
       */
      is_name_included_in_description?: boolean;
      /**
       * @description Accounting code id
       * @example 321
       */
      accounting_code_id?: number;
      /**
       * @description Accounting purchase code id
       * @example 123
       */
      accounting_purchase_code_id?: number;
      /**
       * @description Accounting analytic code
       * @example divers
       */
      accounting_analytic_code?: string;
    };
    /** Update item */
    UpdateItem: {
      /**
       * @description Item name
       * @example lorem ipsum
       */
      name?: string | null;
      /**
       * @description Item reference
       * @example ref0123
       */
      reference?: string;
      /**
       * @description Item reference price
       * @example 19.99
       */
      reference_price?: string;
      /**
       * @description Item's purchase price excluding taxes
       * @example 8.25
       */
      purchase_amount?: string;
      /**
       * @description Price expressed without tax
       * @example true
       */
      is_reference_price_taxes_free?: boolean;
      /**
       * @description Tax id
       * @example 354
       */
      tax_id?: number;
      /**
       * @description Unit id
       * @example 952
       */
      unit_id?: number;
      /**
       * @description Category id (only for product and service types)
       * @example 123
       */
      category_id?: number;
      /**
       * @description Standard quantity
       * @example 3
       */
      standard_quantity?: string;
      /**
       * @description Description of item
       * @example T-shirt 90% coton
       */
      description?: string;
      /**
       * @description To add the name of item in description
       * @example true
       */
      is_name_included_in_description?: boolean;
      /**
       * @description Accounting code id
       * @example 321
       */
      accounting_code_id?: number;
      /**
       * @description Accounting purchase code id
       * @example 123
       */
      accounting_purchase_code_id?: number;
    };
    /** License */
    LicenseRead: ({
        /**
         * @description License identifier
         * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
         */
        id?: string;
        /**
         * @description License code
         * @enum {string}
         */
        code?: "pack_prospecting_sale" | "pack_invoicing_management" | "pack_all_included";
        /** @description License enabled */
        enabled?: boolean;
      })[];
    /** License */
    LicenseEdit: {
        /**
         * @description License identifier
         * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
         */
        id?: string;
      }[];
    Quotas: {
      email_marketing?: Record<string, never> & ({
        /**
         * @description Limit of quota that can be used <i>(<code>null</code> for unlimited quota)</i>.
         * @example 10
         */
        limit?: number | null;
        /**
         * @description Quotas used
         * @example 3
         */
        used?: number;
      });
      firm_search?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      yousign?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      esker?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      sms_marketing?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      custom_fields?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      custom_field_groups?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      pipelines?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      privilege_profiles?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      api_rate_seconds?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      api_rate_minutes?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      api_rate_days?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      api_rate_months?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      estimate_dunning_plan?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      invoice_dunning_plan?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      proforma_dunning_plan?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      activity_report?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      bank_account_reconciliations?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      documents?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      document_invoices?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      file_storage?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      rate_categories?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      recurring?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      report_cards?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      catalog_items?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      marketing_emailing?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      marketing_transactional?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      marketing_sms?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
      write_with_ai?: Record<string, never> & components["schemas"]["Quotas"]["email_marketing"]["allOf"]["1"];
    };
    /** @description Validated */
    Verify: unknown;
    /**
     * Staff filters
     * @description Filters for search staffs endpoint
     */
    StaffFilters: {
      filters?: {
        /** @description Filters on the status of staffs */
        status?: ("ok" | "blocked")[];
      };
    };
    /**
     * Invoicing Search
     * @description Invoicing Search Object
     */
    InvoicingSearch: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Document number
       * @example FACT-20211001-00003
       */
      number?: string;
      /**
       * @description Document type
       * @example invoice
       * @enum {string}
       */
      type?: "model" | "estimate" | "invoice" | "delivery" | "order" | "creditnote" | "proforma";
    };
    /**
     * Price
     * @description Price of an item
     */
    ItemPrice: {
      /**
       * @description Unique ID
       * @example 6657
       */
      rate_category_id?: number;
      /**
       * @description Amount excluding taxes
       * @example 19.99
       */
      amount_excl_tax?: string;
      /**
       * @description Amount including taxes
       * @example 24.99
       */
      amount_incl_tax?: string;
    };
    /**
     * Price
     * @description Price of an item
     */
    ItemInputPrice: {
      /**
       * @description Unique ID
       * @example 6657
       */
      rate_category_id?: number;
      /**
       * @description <ul><li>For rate category without taxes, amount must exclude them but for rate category with taxes, it should include them</li> <li>You can update the amount for rates categories with amount type</li> <li>You can't update percent rate categories</li></ul>
       *
       * @example 19.99
       */
      amount?: string;
    };
    /**
     * Invoicing Search Filters
     * @description Invoicing Search Filters
     */
    InvoicingSearchFilters: {
      /** @description Invoicing Search Filters */
      filters?: {
        /**
         * Documents
         * @description Filter the documents list by document ID
         * @example [
         *   12,
         *   22
         * ]
         */
        id?: number[];
      };
    };
    /**
     * listingMeta
     * @description The listing meta
     */
    AccountingMetas: {
      /** @description The permissions */
      permissions: {
        /** @description Can access to export */
        favorite: boolean;
        /** @description Can access to favorite */
        export: boolean;
      };
      /** @description List of codes */
      codes: {
          /** @description Label of code */
          label: string;
          /** @description Id of code */
          value: string;
        }[];
      /** @description List of currencies */
      currencies: {
          /** @description Label of currency */
          label: string;
          /** @description Id of currency */
          value: string;
        }[];
    };
    /**
     * accountingAggregations
     * @description The accounting aggregations
     */
    AccountingAggregations: {
      /** @description Count debit/credit */
      credit_debit?: {
        /** @example 123.234 */
        debit?: string;
        /** @example 123.234 */
        credit?: string;
        [key: string]: unknown;
      };
    };
    /** @description The Esign Providers */
    EsignSettings: {
      provider: {
        id: string;
        name: string;
        oauth_url?: string | null;
        is_connected?: boolean;
      };
      available_providers: {
          id: string;
          name: string;
        }[];
    };
    /** @description The Marketing Providers */
    MarketingProviders: {
      provider: {
        id: number;
        name: string;
      } | null;
      available_providers: {
          id: number;
          name: string;
        }[];
    };
    /** Mailchimp settings */
    MailchimpSettings: {
      /**
       * @description API key of the mailchimp account to use
       * @example abcdefghijklmnopqrstuv0123456789-usX
       */
      apikey: string | null;
      audiences?: {
          /**
           * @description Audience's id
           * @example abcdefghijklmnopqrstuv0123456789
           */
          id: string;
          /**
           * @description audience's name
           * @example CRM List
           */
          name: string;
        }[];
      /** @description Marketing settings */
      marketing: {
        /**
         * @description Indicates if the Marketing module is loaded
         * @example true
         */
        loaded: boolean;
        /**
         * @description Indicates if Mailchimp Marketing is enabled
         * @example true
         */
        enabled: boolean;
        /**
         * @description Mailchimp's audience list identifier to use
         * @example abcdefghijklmnopqrstuv0123456789
         */
        audience_id: string | null;
      };
      /** @description Contact Synchronization settings */
      contacts_synchronization: {
        /**
         * @description Indicates if the synchronization of contacts is enabled
         * @example true
         */
        enabled: boolean;
        /**
         * @description Mailchimp's audience list identifier to use
         * @example abcdefghijklmnopqrstuv0123456789
         */
        audience_id: string | null;
        /** @description Mailchimp's audience merge fields defined */
        merge_fields?: (({
            /** @description Merge field's Identifier */
            merge_id?: number;
            /** @example text */
            type?: string;
            /** @description Merge field's Name */
            name?: string;
            /** @description Merge field's template tag */
            tag?: string;
            default_value?: string | null;
          }) | ({
            /** @description Merge field's Identifier */
            merge_id?: number;
            /** @example dropdown */
            type?: string;
            /** @description Merge field's Name */
            name?: string;
            /** @description Merge field's template tag */
            tag?: string;
            default_value?: string | null;
            /** @description Merge field's value options */
            choices?: {
                label?: string;
              }[];
          }))[];
        /**
         * @description Indicates which kind of contacts to synchronize
         * @default all
         * @enum {string|null}
         */
        filter: "all" | "clients" | "prospects" | "suppliers" | null;
      };
    };
    /** Mailjet settings */
    MailjetSettings: {
      /**
       * @description API key of the Mailjet account to use
       * @example abcdefghijklmnopqrstuv0123456789
       */
      api_key: string | null;
      /**
       * @description API secret of the Mailjet account to use
       * @example abcdefghijklmnopqrstuv0123456789
       */
      api_secret: string;
      contacts_lists?: {
          /**
           * @description contact list's id
           * @example 42
           */
          id: number;
          /**
           * @description contact list's name
           * @example CRM List
           */
          name: string;
        }[];
      /** @description Contact Synchronization settings */
      contacts_synchronization: {
        /**
         * @description Indicates if the synchronization of contacts is enabled
         * @example true
         */
        enabled: boolean;
        /**
         * @description Mailjet's contact list identifier to use
         * @example 42
         */
        contacts_list_id: number | null;
        /**
         * @description Indicates which kind of contacts to synchronize
         * @default all
         * @enum {string|null}
         */
        filter: "all" | "clients" | "prospects" | "suppliers" | null;
      };
    };
    /** Two factor authentication settings */
    TwoFactorAuthenticationSettings: {
      /**
       * @description Indicates if the two factor authentication is enabled
       * @example true
       */
      enabled: boolean;
    };
    /** Two factor authentication settings */
    UserTwoFactorAuthenticationSettings: {
      /**
       * @description Indicates if the two factor authentication is enabled
       * @example true
       */
      enabled: boolean;
      /**
       * @description Indicates if the two factor authentication is enabled for the corporation
       * @example true
       */
      corporation_enabled: boolean;
      available_providers: {
          /**
           * @description provider name
           * @example google
           * @enum {string}
           */
          provider: "google";
        }[];
      /** @description List of registered provider for the user */
      providers: ({
          provider: components["schemas"]["UserTwoFactorAuthenticationSettings"]["available_providers"]["items"]["provider"];
          /**
           * @description is the primary provider
           * @example true
           */
          primary: boolean;
          /**
           * Format: date-time
           * @description Configuration date time the of the provider
           * @example 1970-01-01T00:00:00+00:00
           */
          configured_at: string | null;
        })[];
      /**
       * Two factor authentication backup codes
       * @description List of user's backup codes
       */
      backup_codes: ({
          /**
           * @description Backup Code
           * @example EB2F5E40
           */
          code: string;
          /**
           * Format: date-time
           * @description Creation date of the backup code
           * @example 1970-01-01T00:00:00+00:00
           */
          created_at: string;
          /**
           * Format: date-time
           * @description Usage date of the backup code
           * @example 1970-01-01T00:00:00+00:00
           */
          used_at: string | null;
        })[];
      /** @description List of registered trusted devices for the user */
      trusted_devices: ({
          id: number;
          /**
           * @description Device type
           * @example desktop
           */
          device: string;
          /**
           * Format: date-time
           * @description Creation date time the of the device
           * @example 1970-01-01T00:00:00+00:00
           */
          created_at: string;
          /**
           * Format: date-time
           * @description Last login date time using the device
           * @example 1970-01-01T00:00:00+00:00
           */
          last_login_at: string;
          /**
           * @description Operating system family of the device
           * @example GNU/Linux
           */
          os: string | null;
          /**
           * @description Browser family of the device
           * @example Chrome
           */
          browser: string | null;
        })[];
    };
    /** Two factor authentication settings */
    UserUpdateTwoFactorAuthenticationSettings: {
      /** @description List of registered provider for the user */
      providers: {
          provider: components["schemas"]["UserTwoFactorAuthenticationSettings"]["available_providers"]["items"]["provider"];
        }[];
    };
    /** Two factor authentication settings */
    UserUpdateTwoFactorAuthenticationSettingsResponse: {
      /**
       * @description Indicates if the two factor authentication is enabled
       * @example true
       */
      enabled: boolean;
      /** @description List of registered provider for the user */
      providers: ({
          provider: components["schemas"]["UserTwoFactorAuthenticationSettings"]["available_providers"]["items"]["provider"];
          /**
           * @description is the primary provider
           * @example true
           */
          primary: boolean;
          /**
           * Format: date-time
           * @description Configuration date time the of the provider
           * @example 1970-01-01T00:00:00+00:00
           */
          configured_at: string | null;
        })[];
    };
    /**
     * Two factor authentication backup codes
     * @description List of user's backup codes
     */
    BackupCodes: ({
        /**
         * @description Backup Code
         * @example EB2F5E40
         */
        code: string;
        /**
         * Format: date-time
         * @description Creation date of the backup code
         * @example 1970-01-01T00:00:00+00:00
         */
        created_at: string;
        /**
         * Format: date-time
         * @description Usage date of the backup code
         * @example 1970-01-01T00:00:00+00:00
         */
        used_at: string | null;
      })[];
    /**
     * Search results
     * @description List of results
     */
    ScanList: ({
        /**
         * @description name of company
         * @example Sellsy
         */
        name?: string;
        /**
         * @description Siret of company
         * @example 82993087400013
         */
        siret?: string | null;
        /**
         * @description type of company
         * @example SAS, société par actions simplifiée
         */
        type?: string;
        /**
         * @description Identifier of the company. In case of French company, it corresponds to the SIREN Number
         * @example 509961074
         */
        id?: string;
        /**
         * @description job code of company
         * @example 58.29C
         */
        job_code?: string | null;
        address?: {
          /**
           * @description Country of company
           * @example France
           */
          country?: string | null;
          /**
           * @description City of company
           * @example LA ROCHELLE,
           */
          city?: string | null;
          /**
           * @description Postal_code of company
           * @example 17000
           */
          postal_code?: string | null;
          /**
           * @description first part of address of company
           * @example Avenue DU LAZARET,
           */
          address_line_1?: string | null;
          /** @description Second part of address of company */
          address_line_2?: string | null;
        };
      })[];
    /**
     * Search results
     * @description Detailed answer for a company returned via the scan route
     */
    ScanFetch: {
      /**
       * @description name of company
       * @example Sellsy
       */
      name?: string;
      /**
       * @description Siret of company
       * @example 82993087400013
       */
      siret?: string | null;
      /**
       * @description type of company
       * @example SAS, société par actions simplifiée
       */
      type?: string;
      /**
       * @description Identifier of the company. In case of French company, it corresponds to the SIREN Number
       * @example 509961074
       */
      id?: string;
      /**
       * @description job code of company
       * @example 58.29C
       */
      job_code?: string | null;
      address?: {
        /**
         * @description Country of company
         * @example France
         */
        country?: string | null;
        /**
         * @description City of company
         * @example LA ROCHELLE,
         */
        city?: string | null;
        /**
         * @description Postal_code of company
         * @example 17000
         */
        postal_code?: string | null;
        /**
         * @description first part of address of company
         * @example Avenue DU LAZARET,
         */
        address_line_1?: string | null;
        /** @description Second part of address of company */
        address_line_2?: string | null;
      };
      officers?: (({
          /** @description Lastname of officier */
          lastname?: string;
          /** @description Firstname of officier */
          firstname?: string;
          /** @description Role of officier */
          role?: string | null;
        })[]) | null;
      /** @description Capital of company */
      capital?: number | null;
      financial_activity?: (({
          /** @description Turnover in this year */
          turnover?: number;
          /** @description Year of publication */
          publication_year?: string;
          /** @description Date of publication */
          publication_date?: string;
          /** @description Diff with last year */
          income?: number;
          /** @description Number of emplyees */
          workforce_count?: number | null;
        })[]) | null;
      /** @description RCS of compnay */
      rcs?: string | null;
      /** @description VAT of compnay */
      vat?: string | null;
      /** @description Sign of company */
      company_sign?: string | null;
    };
    /** Notification */
    Notification: {
      /**
       * @description Unique ID
       * @example 6657
       */
      id?: number;
      /**
       * @description Event name
       * @example mention.staff
       */
      event?: string;
      /**
       * @description Event transport
       * @enum {string}
       */
      transport?: "inapp" | "push" | "mail" | "webhook";
      /** Recipient */
      recipient?: {
        /**
         * @description Recipient id
         * @example 6657
         */
        id?: number;
        /**
         * @description Recipient type
         * @example staff
         */
        type?: string;
        /**
         * @description Recipient first name
         * @example John
         */
        firstname?: string;
        /**
         * @description Recipient last name
         * @example Smith
         */
        lastname?: string;
        /**
         * @description Sender type
         * @example regular
         */
        subtype?: string;
      };
      related?: ({
          /**
           * @description Related object id
           * @example 6657
           */
          id?: number;
          /**
           * @description Related object type
           * @example opportunity
           */
          type?: string;
          /**
           * @description Related object name
           * @example New website
           */
          name?: string | null;
        })[];
      /** Sender */
      sender?: {
        /**
         * @description Sender id
         * @example 6657
         */
        id?: number;
        /**
         * @description Sender type
         * @example staff
         */
        type?: string;
        /**
         * @description Sender first name
         * @example John
         */
        firstname?: string;
        /**
         * @description Sender last name
         * @example Smith
         */
        lastname?: string;
        /**
         * @description Sender type
         * @example regular
         */
        subtype?: string;
        avatar?: ({
          /** @enum {string} */
          readonly type?: "initials" | "picture" | "twitteruserpic";
          /** @description initials or avatar url */
          readonly value?: string;
          readonly class?: number;
        }) | null;
      };
      /**
       * Format: date-time
       * @description Creation date of event
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * Format: date-time
       * @description Read date of event
       * @example 1970-01-01T00:00:00+00:00
       */
      read?: string | null;
      /**
       * @description Event dispatch status
       * @enum {string}
       */
      status?: "ongoing" | "sent" | "failed" | "retry";
      /**
       * Format: date-time
       * @description Update date of event's status
       * @example 1970-01-01T00:00:00+00:00
       */
      status_updated?: string | null;
      /** @description Details of event */
      event_details?: {
        [key: string]: unknown;
      } | null;
      /** Targeted staff */
      targeted_staff?: {
        /**
         * @description Targeted staff id
         * @example 6657
         */
        id?: number;
        /**
         * @description Targeted staff first name
         * @example John
         */
        firstname?: string;
        /**
         * @description Targeted staff last name
         * @example Smith
         */
        lastname?: string;
      };
    };
    /**
     * NotificationFilters
     * @description Notification filters
     */
    NotificationFilters: {
      /** @description Notification filters */
      filters: {
        /**
         * Is read
         * @description Filter on read/unread notifications
         * @example false
         */
        is_read?: boolean;
      };
    };
    /**
     * Mark as read
     * @description Mark as read
     */
    NotificationMarkAsRead: {
      /**
       * Is read
       * @description The notification has been read
       * @example true
       */
      read: boolean;
    };
    /** Notifications Settings Output */
    NotificationSettingsOutput: {
      /**
       * Notifications subscription
       * @description array of notifications to subscribe, with enabled transports by notification
       */
      subscriptions?: ({
          /**
           * @description notification name
           * @example mention.staff
           */
          name: string;
          /** @description list of transports to enable for notification */
          transports: ("inapp" | "push" | "mail" | "webhook")[];
        })[];
      /** Notification do-not-disturb setting */
      do_not_disturb?: {
        /** @description Do not disturb mode is enabled */
        enabled: boolean;
      };
    };
    /** Notifications Settings Input */
    NotificationSettingsInput: {
      /**
       * Notifications subscription
       * @description array of notifications to subscribe, with enabled transports by notification
       */
      subscriptions?: ({
          /**
           * @description notification name
           * @example mention.staff
           */
          name: string;
          /** @description list of transports to enable for notification */
          transports: ("inapp" | "push" | "mail" | "webhook")[];
        })[];
      /** Notification do-not-disturb setting */
      do_not_disturb?: {
        /** @description Do not disturb mode is enabled */
        enabled: boolean;
      };
    };
    /** Notifications Metadata Object */
    NotificationMetadata: {
      events: ({
          /**
           * @description notification name
           * @example mention.staff
           */
          name?: string;
          /** @description list of transports available for notification */
          transports?: ("inapp" | "push" | "mail" | "webhook")[];
        })[];
    };
    /** Count licenses Aggregations */
    corporationStaffAggregation: {
      count_licenses?: {
          /**
           * @description Number of licenses
           * @example 10
           */
          count?: number;
          /**
           * @description Product id
           * @example e6acc4c7-4b7d-4b64-bda0-6e53eb1a00fb
           */
          product_id?: string;
          /**
           * @description Product code
           * @example pack_all_included
           */
          product_code?: string;
        }[];
    };
    /** Subscription */
    CorporationSubscription: {
      licenses?: ({
          /**
           * @description License identifier
           * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
           */
          id?: string;
          /**
           * @description License code
           * @enum {string}
           */
          code?: "pack_prospecting_sale" | "pack_invoicing_management" | "pack_all_included";
          /**
           * @description Number of licenses available
           * @example 5
           */
          available?: number;
          /**
           * @description Total of licenses
           * @example 10
           */
          total?: number;
        })[];
      /**
       * @example {
       *   "accounting": true,
       *   "bankreconciliation": true,
       *   "companySearch": true,
       *   "invoicing": true,
       *   "mailing": true,
       *   "massmailing": true,
       *   "phonecall": true,
       *   "proposal": true,
       *   "prospection": true,
       *   "purchases": true,
       *   "recurring": true,
       *   "saleestimate": true,
       *   "scheduler": true,
       *   "stock": false,
       *   "support": false,
       *   "yousign": true
       * }
       */
      plugins?: {
        [key: string]: boolean;
      };
      billing_settings?: {
        /**
         * Format: date-time
         * @description Date of start service
         */
        service_start_date?: string | null;
        /**
         * Format: date-time
         * @description Date of end service
         */
        service_end_date?: string | null;
        /**
         * @description Payment method of subscription
         * @enum {string}
         */
        payment_method?: "card" | "transfer" | "sepa";
        /**
         * @description Pricing version
         * @example 5
         */
        pricing_version?: number;
        /**
         * @description Pricing revision
         * @example 20231016
         */
        pricing_revision?: string;
        /**
         * @description Plan id
         * @example 5_20231016_elite
         */
        plan_id?: string;
        /**
         * @description Billing interval
         * @example yearly
         * @enum {string}
         */
        interval?: "monthly" | "yearly";
        amounts?: {
          monthly?: {
            /**
             * @description Total of monthly amount
             * @example 32500
             */
            total?: number;
            /**
             * @description Total of discount for monthly amount
             * @example 100
             */
            total_discount?: number;
            /**
             * @description Total after discount of monthly amount
             * @example 32400
             */
            total_discounted?: number;
          };
          yearly?: {
            /**
             * @description Total of yearly amount
             * @example 390000
             */
            total?: number;
            /**
             * @description Total of discount for yearly amount
             * @example 10000
             */
            total_discount?: number;
            /**
             * @description Total after discount of yearly amount
             * @example 380000
             */
            total_discounted?: number;
          };
        };
      };
      /**
       * @description Number of available staffs
       * @example 8
       */
      nb_available_staff?: number | null;
      /**
       * @description List of products
       * @example [
       *   "pack_support",
       *   "pack_cashflow_pro"
       * ]
       */
      products?: string[];
    };
    /** Report */
    Report: {
      /**
       * @description The report name
       * @example Business report
       */
      name: string;
      /**
       * @description The report provider
       * @default legacy
       * @enum {string}
       */
      type: "cumulio" | "legacy";
      /**
       * @description Dashboard id
       * @example b5e2cf01-8bb6-4fcd-ad88-0efb611195da
       */
      dashboard_id: string | null;
      /**
       * @description The path of the report
       * @example /report/business
       */
      path: string | null;
      /**
       * @description Datetime of updating the report
       * @example 2020-05-29T11:22:03+02:00
       */
      updated: string | null;
    };
    /** Reports aggregations */
    ReportAggregation: {
      /**
       * @description cumulio token
       * @example {
       *   "key": "some_key",
       *   "token": "some_token"
       * }
       */
      cumulio?: {
        /** @description Cumulio key */
        key?: string;
        /** @description Cumulio token */
        token?: string;
      };
    };
    /** Invoice */
    Invoice: {
      /**
       * @description Invoice ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Invoice number
       * @example INV-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the invoice
       * @example paid
       * @enum {string}
       */
      status?: "draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled";
      /**
       * Format: date
       * @description Date of the invoice
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description due date of the invoice
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of invoice
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the invoice */
      subject?: string;
      /** @description Amounts of invoice, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
        /**
         * @description Remaining amount to be paid
         * @example 50.00
         */
        readonly total_remaining_due_incl_tax?: string;
        /**
         * @description Total of primes added on document
         * @example 10.00
         */
        readonly total_primes_incl_tax?: string;
      };
      /**
       * @description Currency code of the invoice
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the invoice */
      taxes?: readonly {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /** @description Global discount applied on the invoice */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the invoice :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the invoice */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      /** @description ID of the invoice's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /** @description Contact of company linked to the invoice */
      contact_id?: number | null;
      /**
       * @description Invoicing address, by default take invoicing address of company/individual.
       * @example 777
       */
      invoicing_address_id?: number;
      /**
       * @description Shipping address, by default take shipping address of company/individual.
       * @example 777
       */
      delivery_address_id?: number;
      /** @description Parent object of the document */
      parent?: ({
        /** @description Parent object id */
        id?: number;
        /**
         * @description Parent object type
         * @enum {string}
         */
        type?: "estimate" | "order";
      }) | null;
      /** @description Reference of the order */
      order_reference?: string;
      /** @description Invoice is deposit */
      is_deposit?: boolean;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the invoice
       * @example This invoice is very important<br />
       */
      note?: string;
      /** @description Subscription id, if invoice is linked to one */
      subscription_id?: number;
      /**
       * @description If the invoice is sent to accounting
       * @example true
       */
      is_sent_to_accounting?: boolean;
      _embed?: (({
        related?: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] | components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] | components["schemas"]["ContactItem"]["allOf"]["0"])[];
        /** Contact */
        contact?: components["schemas"]["ContactItem"]["allOf"]["0"];
        /** Individual */
        individual?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"];
        /** Company */
        company?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"];
      }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"] & ({
        /** Invoice ACL */
        acl?: {
          /**
           * @description Invoice can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Invoice can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
          /**
           * @description Invoice can be validated
           * @example true
           */
          can_be_validated?: boolean | null;
        };
        owner?: components["schemas"]["CrmActivity"]["author"];
        fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
        currency?: unknown;
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      }) & {
        /**
         * Invoice Deposits
         * @description Deposits of document
         */
        deposits?: {
          /**
           * @description Deposit ID
           * @example 150
           */
          id?: number;
          /**
           * @example deposit
           * @enum {string}
           */
          type?: "deposit";
          /**
           * @description Deposit date
           * @example 2024-04-05
           */
          date?: string;
          /**
           * @description Deposit number
           * @example FACT-20240405-00023
           */
          number?: string;
          /**
           * @description Deposit amount
           * @example 51.05000000
           */
          amount?: string;
        };
      }) & Record<string, never>;
      /**
       * Format: date
       * @description Date of the shipping
       * @example 2024-01-31
       */
      shipping_date?: string | null;
    };
    InvoiceOne: ({
      /**
       * @description Invoice ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Invoice number
       * @example INV-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the invoice
       * @example paid
       * @enum {string}
       */
      status?: "draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled";
      /**
       * Format: date
       * @description Date of the invoice
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description due date of the invoice
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of invoice
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the invoice */
      subject?: string;
      /** @description Amounts of invoice, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
        /**
         * @description Remaining amount to be paid
         * @example 50.00
         */
        readonly total_remaining_due_incl_tax?: string;
        /**
         * @description Total of primes added on document
         * @example 10.00
         */
        readonly total_primes_incl_tax?: string;
      };
      /**
       * @description Currency code of the invoice
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the invoice */
      taxes?: readonly {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /** @description Global discount applied on the invoice */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the invoice :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the invoice */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      /** @description ID of the invoice's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /** @description Contact of company linked to the invoice */
      contact_id?: number | null;
      /**
       * @description Invoicing address, by default take invoicing address of company/individual.
       * @example 777
       */
      invoicing_address_id?: number;
      /**
       * @description Shipping address, by default take shipping address of company/individual.
       * @example 777
       */
      delivery_address_id?: number;
      /** @description Parent object of the document */
      parent?: ({
        /** @description Parent object id */
        id?: number;
        /**
         * @description Parent object type
         * @enum {string}
         */
        type?: "estimate" | "order";
      }) | null;
      /** @description Reference of the order */
      order_reference?: string;
      /** @description Invoice is deposit */
      is_deposit?: boolean;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the invoice
       * @example This invoice is very important<br />
       */
      note?: string;
      /** @description Subscription id, if invoice is linked to one */
      subscription_id?: number;
      /**
       * @description If the invoice is sent to accounting
       * @example true
       */
      is_sent_to_accounting?: boolean;
      _embed?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"] & Record<string, never>;
      /**
       * Format: date
       * @description Date of the shipping
       * @example 2024-01-31
       */
      shipping_date?: string | null;
    }) & ({
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][];
      _embed?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"] & ({
        /**
         * Document Payment Terms
         * @description Terms of payment of document
         */
        payment_terms?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["0"]["payment_terms"]["allOf"]["0"] & ({
          /** @description List of deadlines computed with the payment terms settings */
          computed_instalment_plan?: ({
              /**
               * Format: date
               * @description due date
               */
              date?: string;
              /** @description Total amount */
              amount?: string;
              /** @description Remaining due amount */
              due_amount?: string;
              /**
               * @description Status of deadline
               * @enum {string}
               */
              status?: "due" | "payinprogress" | "paid";
              /** @description Is the deadline late? */
              late?: boolean;
            })[];
        });
      }) & components["schemas"]["EstimateOneEmbed"]["_embed"]["allOf"]["1"] & ({
        /** Automatic Dunning */
        automatic_dunning?: {
          /**
           * @description Automatic dunning is enabled on document
           * @example true
           */
          is_enabled?: boolean;
          /**
           * @description Automatic dunning configuration is valid for document
           * @example true
           */
          is_valid?: boolean;
          /** @description List of the last 10 dunning notices sent on this invoice */
          sent?: ({
              /** @example Dunning D+1 */
              reminder_name: string;
              /**
               * Format: date-time
               * @description Dunning email date of sent
               * @example 1970-01-01T00:00:00+00:00
               */
              sent_at: string;
              sender: {
                /**
                 * @description Sender's type
                 * @enum {string}
                 */
                type?: "company" | "individual" | "contact" | "staff";
                /** @description Sender's id */
                id?: number;
                /**
                 * Format: email
                 * @description Sender's email
                 * @example contact@example-company.com
                 */
                email?: string;
              };
              recipient: {
                /**
                 * @description Recipient's type
                 * @enum {string}
                 */
                type?: "company" | "individual" | "contact" | "staff";
                /** @description Recipient's id */
                id?: number;
                /**
                 * Format: email
                 * @description Recipient's email
                 * @example contact@example-company.com
                 */
                email?: string;
              };
              /** @description Related payment deadline id */
              deadline_id: number | null;
            })[];
          /** @description List of the next 10 dunning notices to come on this invoice */
          upcoming?: ({
              /** @example Dunning D+1 */
              reminder_name: string;
              /**
               * Format: date-time
               * @description Dunning email estimated date of sent
               * @example 1970-01-01T00:00:00+00:00
               */
              due_at: string;
              sender: {
                /**
                 * @description Sender's type
                 * @enum {string|null}
                 */
                type?: "company" | "individual" | "contact" | "staff" | null;
                /** @description Sender's id */
                id?: number | null;
                /**
                 * Format: email
                 * @description Sender's email
                 * @example contact@example-company.com
                 */
                email?: string | null;
              };
              recipient: ({
                /**
                 * @description Recipient's type
                 * @enum {string|null}
                 */
                type?: "company" | "individual" | "contact" | "staff" | null;
                /** @description Recipient's id */
                id?: number | null;
                /**
                 * Format: email
                 * @description Recipient's email
                 * @example contact@example-company.com
                 */
                email?: string | null;
              }) | null;
              /** @description Related payment deadline id */
              deadline_id: number | null;
            })[];
        };
      });
    });
    InvoiceCompute: {
      /**
       * @description Status of the invoice
       * @example paid
       * @enum {string}
       */
      status?: "draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled";
      /**
       * Format: date
       * @description date of the invoice
       * @example 2022-01-02
       */
      date?: string;
      /** @description Subject of the invoice */
      subject?: string | null;
      /** @description Amounts of invoice, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the invoice
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the invoice */
      taxes?: readonly {
          label: string;
          id: number;
          rate: string;
          amount: string;
        }[];
      /** @description Reference of the order */
      order_reference?: string;
      /** @description Global discount applied on the invoice */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        readonly percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        readonly amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        readonly type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the invoice :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      rows?: components["schemas"]["EstimateCompute"]["rows"]["items"][];
    };
    /**
     * Invoices filters
     * @description Invoices filters
     */
    InvoiceFilters: {
      /** @description Invoices filters */
      filters: {
        /**
         * Created at
         * @description Filter the invoice list by creation date
         */
        created?: {
          /**
           * Format: date-time
           * @example 2020-01-01T00:00:00+01:00
           */
          start?: string;
          /**
           * Format: date-time
           * @example 2020-02-01T00:00:00+01:00
           */
          end?: string;
        };
        /**
         * Owners
         * @description Filter the invoice list by owner (staff id)
         */
        owners?: number[];
        /**
         * Document date
         * @description Filter the invoice list by date
         */
        date?: {
          /**
           * Format: date
           * @example 2020-01-01
           */
          start?: string;
          /**
           * Format: date
           * @example 2020-02-01
           */
          end?: string;
        };
        /** Related Objects */
        related_objects?: ({
            /**
             * @example company
             * @enum {string}
             */
            type?: "company" | "individual" | "opportunity";
            /** @example 22 */
            id?: number;
          })[];
        /**
         * Contact
         * @description Filter the invoice list by contact (contact id)
         */
        contacts?: number[];
        /**
         * Assigned staffs
         * @description Filter the invoice list by assigned staffs (staff id)
         */
        assigned_staff_ids?: number[];
        /**
         * Status
         * @description Filter the invoice list by status
         * @example [
         *   "draft",
         *   "due",
         *   "payinprogress"
         * ]
         */
        status?: ("draft" | "due" | "payinprogress" | "paid" | "late" | "cancelled")[];
        /**
         * number
         * @description Filter the invoice list by number (exact search)
         * @example FAC-0001
         */
        number?: string;
        /**
         * currency
         * @description Currency code (exact search)
         * @example EUR
         */
        currency?: string;
        /**
         * Is deposit
         * @description Filter the invoices if is deposit or not
         * @example true
         */
        is_deposit?: boolean;
        /**
         * Credit note
         * @description Filter the invoice list by linked credit note
         * @example 424242
         */
        credit_note_id?: number;
        favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
      };
    };
    InvoiceCreate: ({
      /**
       * @description Invoice number (shouldn't be provided if draft numbering is enabled)
       * @example INV-2022-01-02-002
       */
      number?: string;
      /**
       * Format: date
       * @description Date of the invoice
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description Due date of the invoice
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of invoice
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the invoice */
      subject?: string;
      /**
       * @description Currency code of the invoice
       * @example EUR
       */
      currency?: string;
      /** @description Global discount applied on the invoice */
      discount?: {
        /**
         * @example amount
         * @enum {string}
         */
        type?: "percent" | "amount";
        /**
         * @description value of discount
         * @example 25.20
         */
        value?: string;
      };
      /**
       * @description Objects linked to the invoice :
       *   - There can be only one company or one individual at a time (required)
       *   - For Company & Individual, only `client` type is allowed
       *   - Contact is the contact of company linked to the invoice. There may be no or one contact.
       *   - Opportunity is the opportunity linked to the invoice. There may be zero or more opportunities linked to invoice
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "opportunity" | "contact";
        })[];
      /**
       * @deprecated
       * @description Deprecated field: use "public_link_enabled" <br/> Public link of the invoice
       */
      public_link?: {
        /**
         * @deprecated
         * @description Public link is enabled
         */
        enabled?: boolean;
      };
      /**
       * @description Public link of the invoice
       * @example true
       */
      public_link_enabled?: boolean;
      /** @description Invoice's owner (staff id) */
      owner_id?: number;
      /** @description Reference of the order */
      order_reference?: string;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id?: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id?: number;
      /**
       * @description Notes of the invoice
       * @example This invoice is very important<br />
       */
      note?: string;
      /**
       * Format: date
       * @description Date of the shipping
       */
      shipping_date?: string | null;
    }) & ({
      parent?: OneOf<[{
        /**
         * @description Estimate must be in the statuses: draft, sent, read, accepted, refused, expired, partialinvoiced, cancelled
         *
         * @enum {string}
         */
        type?: "estimate";
        /** @description Parent object id */
        id?: number;
      }, {
        /**
         * @description Order must be in the statuses: draft, sent, read, accepted, refused, expired, partialinvoiced, cancelled
         *
         * @enum {string}
         */
        type?: "order";
        /** @description Parent object id */
        id?: number;
      }, components["schemas"]["EstimateCreate"]["allOf"]["1"]["parent"]["oneOf"]["0"], null]>;
      /**
       * @description Rate Category to apply on document (By default, the rate_category_id will be that of company)
       * @example 777
       */
      rate_category_id?: number;
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][] | null;
    });
    InvoiceUpdate: components["schemas"]["InvoiceCreate"]["allOf"]["0"] & ({
      rows?: components["schemas"]["EstimateUpdate"]["allOf"]["1"]["rows"]["items"][] | null;
    });
    ValidateInvoice: {
      /**
       * Format: date
       * @description Date of document.<br/> > Depending on your conformity settings, the date may not be greater than the current date.
       *
       * @example 2022-01-01
       */
      date?: string;
    };
    /** Credit Note */
    CreditNote: {
      /**
       * @description Credit Note ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Credit Note number
       * @example CRED-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the credit note
       * @example spent
       * @enum {string}
       */
      status?: "draft" | "stored" | "partialspend" | "spent" | "cancelled";
      /**
       * Format: date
       * @description Date of the credit note
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date-time
       * @description Created date of credit note
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Amounts of credit note, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        total_incl_tax?: string;
        /**
         * @description Remaining amount to be paid
         * @example 50.00
         */
        total_remaining_due_incl_tax?: string;
        /**
         * @description Total of primes added on document
         * @example 10.00
         */
        total_primes_incl_tax?: string;
      };
      /**
       * @description Currency code of the credit note
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the credit note */
      taxes?: {
          /**
           * @description Tax label
           * @example TTC
           */
          label?: string;
          /**
           * @description Tax id
           * @example 954
           */
          id?: number;
          /**
           * @description Tax rate
           * @example 19.6
           */
          rate?: string;
          /**
           * @description Tax amount
           * @example 12.54
           */
          amount?: string;
        }[];
      /** @description Global discount applied on the credit note */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the credit note :
       *   - There can be only one company or one individual at a time
       *   - Contact is the contact of company linked to the credit note. There may be no or one contact.
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the credit note */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /** @description ID of the credit note's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /**
       * @description Subject of the credit note
       * @example Credit note on the invoice INV-2022-01-02-002
       */
      subject?: string;
      /**
       * @description Credit note is deposit
       * @example true
       */
      is_deposit?: boolean;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /** @description Contact of company linked to the credit note */
      contact_id?: number | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id?: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id?: number;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the credit note
       * @example This credit note is very important<br />
       */
      note?: string;
      /**
       * @description If the credit note is sent to accounting
       * @example true
       */
      is_sent_to_accounting?: boolean;
      /** Credit Note Embed */
      _embed?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["0"] & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"] & ({
        fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
        currency?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["2"]["currency"];
        owner?: components["schemas"]["CrmActivity"]["author"];
        /** Credit Note ACL */
        acl?: {
          /**
           * @description Credit note can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Credit note can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
          /**
           * @description Credit note can be validated
           * @example true
           */
          can_be_validated?: boolean | null;
        };
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      });
    };
    CreditNoteOne: ({
      /**
       * @description Credit Note ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Credit Note number
       * @example CRED-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the credit note
       * @example spent
       * @enum {string}
       */
      status?: "draft" | "stored" | "partialspend" | "spent" | "cancelled";
      /**
       * Format: date
       * @description Date of the credit note
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date-time
       * @description Created date of credit note
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Amounts of credit note, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        total_incl_tax?: string;
        /**
         * @description Remaining amount to be paid
         * @example 50.00
         */
        total_remaining_due_incl_tax?: string;
        /**
         * @description Total of primes added on document
         * @example 10.00
         */
        total_primes_incl_tax?: string;
      };
      /**
       * @description Currency code of the credit note
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the credit note */
      taxes?: {
          /**
           * @description Tax label
           * @example TTC
           */
          label?: string;
          /**
           * @description Tax id
           * @example 954
           */
          id?: number;
          /**
           * @description Tax rate
           * @example 19.6
           */
          rate?: string;
          /**
           * @description Tax amount
           * @example 12.54
           */
          amount?: string;
        }[];
      /** @description Global discount applied on the credit note */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the credit note :
       *   - There can be only one company or one individual at a time
       *   - Contact is the contact of company linked to the credit note. There may be no or one contact.
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the credit note */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      /** @description Credit note's owner */
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      /** @description ID of the credit note's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /**
       * @description Subject of the credit note
       * @example Credit note on the invoice INV-2022-01-02-002
       */
      subject?: string;
      /**
       * @description Credit note is deposit
       * @example true
       */
      is_deposit?: boolean;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /** @description Contact of company linked to the credit note */
      contact_id?: number | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id?: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id?: number;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the credit note
       * @example This credit note is very important<br />
       */
      note?: string;
      /**
       * @description If the credit note is sent to accounting
       * @example true
       */
      is_sent_to_accounting?: boolean;
      _embed?: components["schemas"]["CreditNote"]["_embed"];
    }) & ({
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][];
      _embed?: components["schemas"]["CreditNote"]["_embed"] & components["schemas"]["EstimateOneEmbed"]["_embed"]["allOf"]["1"];
    });
    CreditNoteCreate: ({
      /**
       * @description Credit note number (shouldn't be provided if draft numbering is enabled)
       * @example CRE-2022-01-02-002
       */
      number?: string;
      /**
       * Format: date
       * @description Date of the credit note
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description Due date of the credit note
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of credit note
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the credit note */
      subject?: string;
      /**
       * @description Currency code of the credit note
       * @example EUR
       */
      currency?: string;
      /** @description Global discount applied on the credit note */
      discount?: {
        /**
         * @example amount
         * @enum {string}
         */
        type?: "percent" | "amount";
        /**
         * @description value of discount
         * @example 25.20
         */
        value?: string;
      };
      /**
       * @description Objects linked to the credit note :
       *   - There can be only one company or one individual at a time (required)
       *   - For Company & Individual, only `client`, `prospect` type are allowed
       *   - Contact is the contact of company linked to the credit note. There may be no or one contact.
       *   - Opportunity is the opportunity linked to the credit note. There may be zero or more opportunities linked to credit note
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "opportunity" | "contact";
        })[];
      /**
       * @description Public link of the credit note
       * @example true
       */
      public_link_enabled?: boolean;
      /** @description Credit note's owner (staff id) */
      owner_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the credit note
       * @example This credit note is very important<br />
       */
      note?: string;
    }) & ({
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][] | null;
      parent?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["parent"]["oneOf"]["0"] | null;
      /**
       * @description Rate Category to apply on document (By default, the rate_category_id will be that of company)
       * @example 777
       */
      rate_category_id?: number;
    });
    CreditNoteUpdate: components["schemas"]["CreditNoteCreate"]["allOf"]["0"] & ({
      rows?: components["schemas"]["EstimateUpdate"]["allOf"]["1"]["rows"]["items"][] | null;
    });
    CreditNoteValidate: {
      /**
       * Format: date
       * @description Date of document.<br/> > Depending on your conformity settings, the date may not be greater than the current date.
       *
       * @example 2022-01-01
       */
      date?: string;
    };
    /** Credit Note */
    CreditNoteCompute: {
      /**
       * @description Status of the credit note
       * @example spent
       * @enum {string}
       */
      status?: "draft" | "stored" | "partialspend" | "spent" | "cancelled";
      /**
       * Format: date
       * @description Date of the credit note
       * @example 2022-01-02
       */
      date?: string;
      /**
       * @description Subject of the credit note
       * @example Credit note on the invoice INV-2022-01-02-002
       */
      subject?: string | null;
      /** @description Amounts of credit note, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        total_incl_tax?: string;
      };
      /**
       * @description Currency code of the credit note
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the credit note */
      taxes?: {
          /**
           * @description Tax label
           * @example TTC
           */
          label?: string;
          /**
           * @description Tax id
           * @example 954
           */
          id?: number;
          /**
           * @description Tax rate
           * @example 19.6
           */
          rate?: string;
          /**
           * @description Tax amount
           * @example 12.54
           */
          amount?: string;
        }[];
      /** @description Global discount applied on the credit note */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the credit note :
       *   - There can be only one company or one individual at a time
       *   - Contact is the contact of company linked to the credit note. There may be no or one contact.
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
      rows?: components["schemas"]["EstimateCompute"]["rows"]["items"][];
    };
    /**
     * Credit notes filters
     * @description Filters on credit notes
     */
    CreditNoteFilters: {
      /** @description Filters on credit notes */
      filters: {
        /**
         * Status
         * @description Filter credit notes list by status
         * @example [
         *   "draft",
         *   "stored",
         *   "partialspend"
         * ]
         */
        status?: ("draft" | "stored" | "partialspend" | "spent" | "cancelled")[];
        /** Related Objects */
        related_objects?: ({
            /**
             * @example company
             * @enum {string}
             */
            type?: "company" | "individual" | "opportunity";
            /** @example 22 */
            id?: number;
          })[];
        /**
         * Is deposit
         * @description Filter the credit note if is deposit or not
         * @example true
         */
        is_deposit?: boolean;
        favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
      };
    };
    OrderCreate: ({
      /**
       * @description Order number
       * @example ORD-00192
       */
      number?: string;
      /**
       * Format: date
       * @description Date of the order
       * @example 2022-01-01
       */
      date?: string;
      /**
       * Format: date
       * @description Due date for signing the order
       * @example 2022-03-01
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Creation date of order
       * @example 2022-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * @description Subject of the order
       * @example Order subject
       */
      subject?: string;
      /**
       * @description Currency code of the order
       * @example USD
       */
      currency?: string;
      /** @description Global discount applied on the order */
      discount?: {
        /**
         * @example amount
         * @enum {string}
         */
        type?: "percent" | "amount";
        /**
         * @description Value of discount
         * @example 25.20
         */
        value?: string;
      };
      /**
       * @description Objects linked to the order :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 90
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /**
       * @description Public link of the order
       * @example true
       */
      public_link_enabled?: boolean;
      /**
       * @description Order's owner (staff id)
       * @example 50
       */
      owner_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /** @description Invoicing address, by default take invoicing address of company/individual. */
      invoicing_address_id?: number;
      /** @description Shipping address, by default take shipping address of company/individual. */
      delivery_address_id?: number;
      /**
       * @description Notes of the order
       * @example This order is very important<br />
       */
      note?: string;
      /**
       * Format: date
       * @description Date of the shipping
       */
      shipping_date?: string | null;
    }) & ({
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][] | null;
      parent?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["parent"]["oneOf"]["0"] | null;
      /**
       * @description Rate Category to apply on document (By default, the rate_category_id will be that of company)
       * @example 777
       */
      rate_category_id?: number;
    });
    OrderUpdate: components["schemas"]["OrderCreate"]["allOf"]["0"] & ({
      rows?: components["schemas"]["EstimateUpdate"]["allOf"]["1"]["rows"]["items"][] | null;
    });
    /** Order */
    Order: {
      /**
       * @description Order ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Order number
       * @example ORD-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the order
       * @example paid
       * @enum {string}
       */
      status?: "draft" | "sent" | "read" | "accepted" | "expired" | "advanced" | "invoiced" | "partialinvoiced" | "cancelled";
      /**
       * @description Status of the order state
       * @example wait
       * @enum {string}
       */
      order_status?: "none" | "wait" | "picking" | "sent" | "partialsent";
      /**
       * Format: date
       * @description Date of the order
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description Due date for signing the order
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of order
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the order */
      subject?: string;
      /** @description Amounts of order, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the order
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the order */
      taxes?: readonly {
          /** @example Tax label */
          label: string;
          /** @example 7 */
          id: number;
          /** @example 20.000000000 */
          rate: string;
          /** @example 150.99 */
          amount: string;
        }[];
      /** @description Global discount applied on the order */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the order :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the order */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      /** @description ID of the order's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /**
       * @description Invoicing address, by default take invoicing address of company/individual.
       * @example 777
       */
      invoicing_address_id?: number;
      /**
       * @description Shipping address, by default take shipping address of company/individual.
       * @example 777
       */
      delivery_address_id?: number;
      /** @description Contact of company linked to the order */
      contact_id?: number | null;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the order
       * @example This order is very important<br />
       */
      note?: string;
      _embed?: (components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["0"] & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"] & ({
        /** Order ACL */
        acl?: {
          /**
           * @description Order can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Order can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
        };
        owner?: components["schemas"]["CrmActivity"]["author"];
        fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
        currency?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["2"]["currency"];
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      })) & Record<string, never>;
      /**
       * Format: date
       * @description Date of the shipping
       * @example 2024-01-31
       */
      shipping_date?: string | null;
    };
    OrderOne: ({
      /**
       * @description Order ID
       * @example 3875
       */
      id?: number;
      /**
       * @description Order number
       * @example ORD-2022-01-02-002
       */
      number?: string;
      /**
       * @description Status of the order
       * @example paid
       * @enum {string}
       */
      status?: "draft" | "sent" | "read" | "accepted" | "expired" | "advanced" | "invoiced" | "partialinvoiced" | "cancelled";
      /**
       * @description Status of the order state
       * @example wait
       * @enum {string}
       */
      order_status?: "none" | "wait" | "picking" | "sent" | "partialsent";
      /**
       * Format: date
       * @description Date of the order
       * @example 2022-01-02
       */
      date?: string;
      /**
       * Format: date
       * @description Due date for signing the order
       * @example 2022-02-02
       */
      due_date?: string;
      /**
       * Format: date-time
       * @description Created date of order
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Subject of the order */
      subject?: string;
      /** @description Amounts of order, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the order
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the order */
      taxes?: readonly {
          /** @example Tax label */
          label: string;
          /** @example 7 */
          id: number;
          /** @example 20.000000000 */
          rate: string;
          /** @example 150.99 */
          amount: string;
        }[];
      /** @description Global discount applied on the order */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the order :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      /** @description Public link of the order */
      public_link?: {
        /** @description Public link is enabled */
        enabled?: boolean;
        /** @description Url to public link */
        url?: string;
      };
      /** @description Acceptance of terms and conditions */
      payment_conditions_acceptance?: {
        /** @description Acceptance is required to pay or sign the document */
        readonly enabled?: boolean;
      };
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      /** @description ID of the order's fiscal year */
      fiscal_year_id?: number | null;
      /**
       * Format: uri
       * @description Link to the pdf of document. /!\ Link is regenerate after an update of document
       */
      pdf_link?: string | null;
      /** @description Precision for decimal numbers */
      decimal_number?: {
        /** @description Precision of unit price */
        readonly unit_price?: number | null;
        /** @description Precision of quantity */
        readonly quantity?: number | null;
        /** @description Main precision of estimate. Could be overrided for unit_price/quantity */
        readonly main?: number;
      };
      /**
       * @description The staff linked
       * @example 2
       */
      assigned_staff_id?: number;
      /**
       * @description Invoicing address, by default take invoicing address of company/individual.
       * @example 777
       */
      invoicing_address_id?: number;
      /**
       * @description Shipping address, by default take shipping address of company/individual.
       * @example 777
       */
      delivery_address_id?: number;
      /** @description Contact of company linked to the order */
      contact_id?: number | null;
      /**
       * @description Rate Category applied on document
       * @example 777
       */
      rate_category_id?: number;
      /** @description Service dates on the document if enabled */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Notes of the order
       * @example This order is very important<br />
       */
      note?: string;
      _embed?: components["schemas"]["Order"]["_embed"]["allOf"]["0"] & Record<string, never>;
      /**
       * Format: date
       * @description Date of the shipping
       * @example 2024-01-31
       */
      shipping_date?: string | null;
    }) & ({
      rows?: components["schemas"]["EstimateCreate"]["allOf"]["1"]["rows"]["items"][];
      /** Order Embed */
      _embed?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["0"] & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"] & ({
        /**
         * Document Payment Terms
         * @description Terms of payment of document
         */
        payment_terms?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["0"]["payment_terms"]["allOf"]["0"] & {
          /** @description List of deadlines computed with the payment terms settings */
          computed_instalment_plan?: {
              /**
               * Format: date
               * @description due date
               */
              date?: string;
              /** @description Total amount */
              amount?: string;
            }[];
        };
      }) & components["schemas"]["EstimateOneEmbed"]["_embed"]["allOf"]["1"] & ({
        /** Order ACL */
        acl?: {
          /**
           * @description Order can be updated
           * @example true
           */
          can_be_updated?: boolean | null;
          /**
           * @description Order can be deleted
           * @example true
           */
          can_be_deleted?: boolean | null;
        };
        owner?: components["schemas"]["CrmActivity"]["author"];
        fiscal_year?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["fiscal_year"];
        currency?: components["schemas"]["Invoice"]["_embed"]["allOf"]["0"]["allOf"]["2"]["currency"];
        /** @description Smart-tags linked */
        smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
      });
    });
    /**
     * Order filters
     * @description Order filters
     */
    OrderFilters: {
      /** @description Order filters */
      filters: {
        /**
         * Status
         * @description Filter the order list by status
         * @example [
         *   "draft",
         *   "sent",
         *   "read"
         * ]
         */
        status?: ("draft" | "sent" | "read" | "accepted" | "expired" | "advanced" | "invoiced" | "partialinvoiced" | "cancelled")[];
        /** Related Objects */
        related_objects?: ({
            /**
             * @example company
             * @enum {string}
             */
            type?: "company" | "individual" | "opportunity";
            /** @example 22 */
            id?: number;
          })[];
        /**
         * Status of the order state
         * @description Filter the order by order state
         * @example [
         *   "none",
         *   "wait",
         *   "picking"
         * ]
         */
        order_status?: ("none" | "wait" | "picking" | "sent" | "partialsent")[];
        favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
      };
    };
    /** Order */
    OrderCompute: {
      /**
       * @description Status of the order
       * @example sent
       * @enum {string}
       */
      status?: "draft" | "sent" | "read" | "accepted" | "expired" | "advanced" | "invoiced" | "partialinvoiced" | "cancelled";
      /**
       * @description Status of the order state
       * @example wait
       * @enum {string}
       */
      order_status?: "none" | "wait" | "picking" | "sent" | "partialsent";
      /**
       * Format: date
       * @description Date of the order
       * @example 2022-01-02
       */
      date?: string;
      /** @description Subject of the order */
      subject?: string;
      /** @description Amounts of order, with and without taxes */
      amounts?: {
        /**
         * @description Total amount without taxes and discounts. Does not include transport and packaging costs.
         * @example 60
         */
        readonly total_raw_excl_tax?: string;
        /**
         * @description Total discounted without tax. Does not include transport and packaging costs
         * @example 50
         */
        readonly total_after_discount_excl_tax?: string;
        /**
         * @description Total amount of packaging costs.
         * @example 15.96
         */
        readonly total_packaging?: string;
        /**
         * @description Total amount of shipping costs.
         * @example 13.90
         */
        readonly total_shipping?: string;
        /**
         * @description Total net without tax. Including transport and packaging costs. Discount is applied if any.
         * @example 79.86
         */
        readonly total_excl_tax?: string;
        /**
         * @description Total with tax
         * @example 95.83
         */
        readonly total_incl_tax?: string;
      };
      /**
       * @description Currency code of the order
       * @example EUR
       */
      currency?: string;
      /** @description List of taxes used on the order */
      taxes?: readonly {
          /** @example Tax label */
          label: string;
          /** @example 7 */
          id: number;
          /** @example 20.000000000 */
          rate: string;
          /** @example 150.99 */
          amount: string;
        }[];
      /** @description Global discount applied on the order */
      discount?: ({
        /**
         * @description Percentage of the discount
         * @example 12.00
         */
        percent?: string;
        /**
         * @description Amount of the discount
         * @example 111.97
         */
        amount?: string;
        /**
         * @description Type of the global discount as defined on the document
         * @enum {string}
         */
        type?: "amount" | "percent";
      }) | null;
      /**
       * @description Objects linked to the order :
       *   - You must provide at least one company, individual or opportunity
       *     - For a company or an individual, only `client` type
       *   - You can provide as many opportunities as you wish, even if you already provide a company or an individual, as long as opportunities belong to them
       *   - If you provide one or more contacts, they must belong to the company or individual
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id?: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity";
        })[];
      owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"] & Record<string, never>;
      rows?: components["schemas"]["EstimateCompute"]["rows"]["items"][];
    };
    /** Email Settings */
    EmailSettings: {
      /**
       * Email Signature
       * @description The email signature object
       */
      signature?: {
        /**
         * @description Email signature mode
         * @enum {string}
         */
        mode: "auto" | "manual";
        /** @description HTML manual signature content */
        html_content: string | null;
        /** @description Parsed HTML manual signature content. "contact" tags will not be replaced */
        computed?: string;
      };
      /**
       * Email Connection
       * @description The email connection object
       */
      connection?: {
        /** @description Email connection */
        email: string;
        /**
         * @description Email type
         * @enum {string}
         */
        type: "transfer" | "synchronization";
        /** @description Email status */
        status: string;
        /** @description Return true if emails are send by corporation */
        emails_sent_from_corp: boolean;
        /** @description Return true if email onboarding finished */
        onboarding_setup: boolean;
      };
    };
    /** Email Settings */
    EmailSettingsInput: {
      signature: OneOf<[{
        /**
         * @description Email signature mode
         * @enum {string}
         */
        mode: "auto";
      }, {
        /**
         * @description Email signature mode
         * @enum {string}
         */
        mode: "manual";
        /** @description HTML manual signature content (required when mode is manual) */
        html_content: string | null;
      }]>;
    };
    /** Fiscal year */
    FiscalYear: {
      /** @description Id of the fiscal year */
      id?: number;
      /** @description Name of the fiscal year. Naming follow the current scheme:  N for the current fiscal year, N-1 for the last fiscal year, N-2, ... */
      name?: string;
      /**
       * Format: date
       * @description Start date of the fiscal year
       */
      start_at?: string;
      /**
       * Format: date
       * @description End date of the fiscal year
       */
      end_at?: string;
    };
    /**
     * File upload
     * @description Upload file schema
     */
    UploadFileInput: {
      /**
       * Format: binary
       * @description <ul><li>max file size : 15Mb</li> <li>allowed media types : <pre>application/rtf,<br>text/rtf,<br>text/plain,<br>image/jpeg,<br>image/pjpeg,<br>image/jpeg,<br>image/pjpeg,<br>image/png,<br>application/pdf,<br>application/acrobat,<br>application/nappdf,<br>application/x-pdf,<br>image/pdf,<br>application/xml,<br>text/xml,<br>application/xml,<br>application/xslt+xml,<br>text/csv,<br>text/x-comma-separated-values,<br>text/x-csv,<br>application/csv,<br>application/vnd.ms-excel,<br>application/msexcel,<br>application/x-msexcel,<br>zz-application/zz-winassoc-xls,<br>application/zip,<br>application/x-zip,<br>application/x-zip-compressed,<br>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,<br>application/msword,<br>application/vnd.ms-word,<br>application/x-msword,<br>zz-application/zz-winassoc-doc,<br>application/vnd.openxmlformats-officedocument.wordprocessingml.document,<br>application/vnd.ms-powerpoint,<br>application/mspowerpoint,<br>application/powerpoint,<br>application/x-mspowerpoint,<br>application/vnd.openxmlformats-officedocument.presentationml.presentation,<br>application/json,<br>image/vnd.dxf,<br>image/vnd.dwg,<br>image/svg+xml,<br>image/svg,<br>application/photoshop,<br>application/x-photoshop,<br>image/photoshop,<br>image/psd,<br>image/vnd.adobe.photoshop,<br>image/x-photoshop,<br>image/x-psd,<br>application/illustrator,<br>application/postscript,<br>application/vnd.adobe.illustrator,<br>application/postscript,<br>image/x-eps,<br>application/vnd.google-apps.document,<br>video/avi,<br>video/divx,<br>video/msvideo,<br>video/vnd.divx,<br>video/x-avi,<br>video/x-msvideo,<br>audio/mpeg,<br>audio/mp3,<br>audio/x-mp3,<br>audio/x-mpeg,<br>audio/x-mpg,<br>audio/mp4,<br>audio/m4a,<br>audio/x-m4a,<br>video/mp4,<br>video/mp4v-es,<br>video/x-m4v,<br>video/quicktime,<br>application/x-rar-compressed,<br>application/vnd.rar,<br>application/x-rar,<br>image/gif,<br>application/vnd.google-apps.spreadsheet,<br>application/vnd.google-apps.presentation,<br>application/vnd.oasis.opendocument.spreadsheet,<br>application/vnd.oasis.opendocument.text,<br>application/vnd.oasis.opendocument.presentation,<br>application/vnd.oasis.opendocument.graphics,<br>application/vnd.oasis.opendocument.formula,<br>audio/wav,<br>audio/vnd.wave,<br>audio/wave,<br>audio/x-wav,<br>audio/x-ms-wmv,<br>video/x-ms-wmv,<br>application/vnd.ms-excel.sheet.macroenabled.12,<br>application/vnd.ms-pki.stl,<br>model/stl,<br>model/x.stl-ascii,<br>model/x.stl-binary,<br>application/x-compressed-tar,<br>application/vnd.google-earth.kmz,<br>application/vnd.google-earth.kml+xml,<br>application/vnd.openxmlformats-officedocument.presentationml.slideshow,<br>image/tiff,<br>image/tiff,<br>audio/amr,<br>audio/amr-encrypted,<br>text/x-vcard,<br>text/directory,<br>text/vcard,<br>application/cdr,<br>application/coreldraw,<br>application/vnd.corel-draw,<br>application/x-cdr,<br>application/x-coreldraw,<br>image/cdr,<br>image/x-cdr,<br>zz-application/zz-winassoc-cdr,<br>message/rfc822,<br>application/vnd.ms-outlook,<br>application/vnd.koan,<br>application/ics,<br>text/calendar,<br>text/x-vcalendar,<br>application/ms-tnef,<br>application/vnd.ms-tnef,<br>image/webp</pre></li></ul>
       */
      file: string;
    };
    ListFilesOutput: OneOf<[{
      /**
       * @description Directory ID
       * @example 1
       */
      id?: number;
      /**
       * @description Directory type
       * @enum {string}
       */
      type?: "directory";
      /**
       * @description Directory name
       * @example business-cards
       */
      name?: string;
      /** @description Directory description */
      description?: string | null;
      /**
       * Format: date-time
       * @description Creation date of directory
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /** @description Current directory location. The first element is the direct parent of the directory */
      breadcrumbs?: components["schemas"]["FileOuput"]["breadcrumbs"]["items"][];
    }, {
      /**
       * @description File ID
       * @example 1
       */
      id?: number;
      /**
       * @description File type
       * @enum {string}
       */
      type?: "file";
      /**
       * @description File name
       * @example business-card
       */
      name?: string;
      /**
       * Format: date-time
       * @description Creation date of file
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * @description File size in octet
       * @example 512
       */
      size?: number;
      /**
       * @description File extension
       * @example jpg
       * @enum {string}
       */
      extension?: "rtf" | "txt" | "jpg" | "jpeg" | "png" | "pdf" | "xml" | "xsl" | "csv" | "xls" | "zip" | "xlsx" | "doc" | "docx" | "ppt" | "pptx" | "json" | "dxf" | "dwg" | "svg" | "psd" | "ai" | "eps" | "indd" | "gdoc" | "avi" | "mp3" | "m4a" | "mp4" | "rar" | "gif" | "gplf" | "gform" | "gsheet" | "gslides" | "gdraw" | "ods" | "odt" | "odp" | "odg" | "odf" | "sat" | "wav" | "wave" | "wmv" | "xlsm" | "stl" | "ped" | "tgz" | "kmz" | "kml" | "ppsx" | "tiff" | "tif" | "amr" | "vcf" | "cdr" | "ar3" | "eml" | "mmap" | "msg" | "skp" | "ics" | "tnef" | "webp";
      /**
       * Format: uri
       * @description URL to file
       */
      public_link?: string;
      /** @description Objects linked to the file */
      related?: ({
          /**
           * @description Object type
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity" | "estimate" | "invoice" | "credit-note" | "order";
          /** @description Object ID */
          id?: number;
        })[];
      /** @description Current file location. The first element is the direct parent of the file */
      breadcrumbs?: components["schemas"]["FileOuput"]["breadcrumbs"]["items"][];
    }]>;
    /** Adyen settings */
    AdyenSettings: {
      /**
       * @description API key of the Adyen account to use
       * @example abcdefghijklmnopqrstuv0123456789
       */
      api_key: string | null;
      /**
       * @description Merchant account
       * @example Sellsy
       */
      merchant_account: string;
      /**
       * @description If api key is to use on test environment
       * @example true
       */
      test_env: boolean;
      /**
       * @description Notification key hmac
       * @example 04D37574774B86C7B1B6E629941311A4ADD693E117BB17849C93132293DE7F4C
       */
      notification_hmac_key?: string;
      /**
       * @description Theme id for Adyen
       * @example 6652399b-be09-406c-88df-e2106f282996
       */
      theme_id?: string | null;
      /**
       * @description Default payment method to use adyen on
       * @example 7
       */
      payment_method_id?: number | null;
      /**
       * @description The unique merchant-specific hostname to communicate with Adyen's APIs
       * @example 1797a841fbb37ca7-AdyenDemo
       */
      live_url_prefix?: string | null;
      [key: string]: unknown;
    };
    /**
     * File schema
     * @description File schema
     */
    FileOuput: {
      /**
       * @description File ID
       * @example 1
       */
      id?: number;
      /**
       * @description File type
       * @enum {string}
       */
      type?: "file";
      /**
       * @description File name
       * @example business-card
       */
      name?: string;
      /**
       * Format: date-time
       * @description Creation date of file
       * @example 1970-01-01T00:00:00+00:00
       */
      created?: string;
      /**
       * @description File size in octet
       * @example 512
       */
      size?: number;
      /**
       * @description File extension
       * @example jpg
       * @enum {string}
       */
      extension?: "rtf" | "txt" | "jpg" | "jpeg" | "png" | "pdf" | "xml" | "xsl" | "csv" | "xls" | "zip" | "xlsx" | "doc" | "docx" | "ppt" | "pptx" | "json" | "dxf" | "dwg" | "svg" | "psd" | "ai" | "eps" | "indd" | "gdoc" | "avi" | "mp3" | "m4a" | "mp4" | "rar" | "gif" | "gplf" | "gform" | "gsheet" | "gslides" | "gdraw" | "ods" | "odt" | "odp" | "odg" | "odf" | "sat" | "wav" | "wave" | "wmv" | "xlsm" | "stl" | "ped" | "tgz" | "kmz" | "kml" | "ppsx" | "tiff" | "tif" | "amr" | "vcf" | "cdr" | "ar3" | "eml" | "mmap" | "msg" | "skp" | "ics" | "tnef" | "webp";
      /**
       * Format: uri
       * @description URL to file
       */
      public_link?: string;
      /** @description Objects linked to the file */
      related?: ({
          /**
           * @description Object type
           * @enum {string}
           */
          type?: "company" | "individual" | "contact" | "opportunity" | "estimate" | "invoice" | "credit-note" | "order";
          /** @description Object ID */
          id?: number;
        })[];
      /** @description Current file location. The first element is the direct parent of the file */
      breadcrumbs?: {
          /**
           * @description Parent type
           * @enum {string}
           */
          type?: "directory";
          /** @description Parent ID */
          id?: number;
          /**
           * @description Parent name
           * @example thirds
           */
          name?: string;
        }[];
    };
    /**
     * Move file schema
     * @description Move file schema
     */
    MoveFileInput: {
      /**
       * @description New target type
       * @example opportunity
       * @enum {string}
       */
      type: "company" | "individual" | "contact" | "opportunity" | "estimate" | "invoice" | "credit-note" | "order" | "directory";
      /**
       * @description New target id
       * @example 1
       */
      id: number;
    };
    /**
     * Directory create schema
     * @description Directory create schema
     */
    CreateDirectory: WithRequired<({
      /** @description Name of the directory */
      name?: string;
      /** @description An optional description for the directory */
      description?: string | null;
    }) & ({
      /** @description Parent object which will receive the new directory */
      parent?: {
        /**
         * @example company
         * @enum {string}
         */
        type: "company" | "individual" | "contact" | "opportunity" | "estimate" | "invoice" | "credit-note" | "order" | "directory";
        /** @description Parent object id */
        id: number;
      };
    }), "parent" | "name">;
    /**
     * Directory schema
     * @description Directory schema
     */
    UpdateDirectory: {
      /** @description Name of the directory */
      name?: string;
      /** @description An optional description for the directory */
      description?: string | null;
    };
    LinkCompanyContact: {
      /**
       * @description Roles given to contact.<br><br> <i>Note that custom roles will be ignored if company has no contact yet, the first contact will get all roles by default.</i>
       * @example [
       *   "main",
       *   "dunning"
       * ]
       */
      roles?: (("main" | "invoicing" | "dunning")[]) | null;
    };
    UpdateLinkCompanyContact: {
      /**
       * @description Roles given to contact.
       * @example [
       *   "main",
       *   "dunning"
       * ]
       */
      roles?: ("main" | "invoicing" | "dunning")[];
    };
    /** Token */
    ImportToken: {
      /**
       * @description Import token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.dyt0CoTl4WoVjAHI9Q_CwSKhl6d_9rhM3NrXuJttkao
       */
      token?: string;
    };
    /** Import batch preparation */
    ImportPrepareInput: {
      /**
       * Format: uuid
       * @description Batch id
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      batch_id: string;
      /**
       * Import metadata
       * @description Import options
       */
      metadata: {
        /**
         * @description If true, insert new records
         * @example true
         */
        insert_new_records: boolean;
        /**
         * @description If true, update existing records
         * @example true
         */
        update_existing_records: boolean;
        /**
         * @description If true, empty values will be persisted and overwrite actual values
         * @example true
         */
        update_empty_fields: boolean;
        /**
         * @description If true, replace the smart tags instead of adding them
         * @example true
         */
        overwrite_tags: boolean;
        /**
         * @description If true, import rows dismissing mandatory custom fields
         * @example true
         */
        dismiss_required_custom_fields: boolean;
        /**
         * @description If true, new values are added to list type custom fields
         * @example true
         */
        insert_new_custom_fields_enum_values: boolean;
        /**
         * @description If true, use existing default values for empty custom fields
         * @example true
         */
        use_default_values_for_empty_custom_fields: boolean;
        /**
         * @description List of imported columns
         * @example [
         *   "id",
         *   "reference",
         *   "name",
         *   "description",
         *   "reference_price"
         * ]
         */
        columns: string[];
        /** @description Import identifiers */
        identifiers: OneOf<[{
          /** @description List of identifiers */
          product: ("id" | "reference")[];
        }, {
          /** @description List of identifiers */
          product: ("product_id" | "product_reference")[];
          /** @description List of identifiers */
          product_variation: ("variation_id" | "variation_reference")[];
        }, {
          /** @description List of identifiers */
          company: ("company_id" | "company_name" | "company_reference" | "company_email" | "company_legal_france_siret" | "company_legal_france_siren")[];
          /** @description List of identifiers */
          address: ("address_id" | "address_name")[];
          /** @description List of identifiers */
          contact: ("contact_id" | "contact_last_name" | "contact_first_name" | "contact_email")[];
        }, {
          /** @description List of identifiers */
          service: ("id" | "reference")[];
        }, components["schemas"]["ImportPrepareInput"]["metadata"]["identifiers"]["oneOf"]["1"]]>;
      };
      /** @description Rows to prepare */
      data: (({
          /**
           * @description Row id
           * @example 1
           */
          row_id?: number;
          /**
           * @description Item id
           * @example 6657
           */
          id?: number | null;
          /**
           * @description Item reference
           * @example ref0123
           */
          reference: string;
          /**
           * @description Item name
           * @example lorem ipsum
           */
          name?: string | null;
          /**
           * @description Description of item
           * @example T-shirt 90% coton
           */
          description?: string | null;
          /**
           * @description Product weight
           * @example 99.99
           */
          characteristic_weight?: string | null;
          /**
           * @description Unit
           * @example m3
           */
          unit?: string | null;
          /**
           * @description Standard quantity
           * @example 3
           */
          standard_quantity?: string | null;
          /**
           * @description Item category
           * @example null
           */
          category?: string | null;
          /**
           * @description Smart tags list
           * @example [
           *   "foo",
           *   "bar"
           * ]
           */
          smart_tags?: string[] | null;
          /**
           * @description Owner name of the product import
           * @example John Snow
           */
          owner?: string | null;
          /**
           * @description Reference price
           * @example 19.99
           */
          reference_price?: string | null;
          /**
           * @description Tax rate
           * @example 19.6
           */
          tax_rate?: string | null;
          /**
           * @description Purchase price
           * @example 15.5
           */
          purchase_price?: string | null;
          /**
           * @description Accounting code
           * @example null
           */
          accounting_code?: string | null;
          /**
           * @description Accounting purchase code
           * @example null
           */
          accounting_purchase_code?: string | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
        }) | ({
          /**
           * @description Row id
           * @example 1
           */
          row_id?: number;
          /**
           * @description Product id
           * @example 6657
           */
          product_id?: number | null;
          /**
           * @description Product reference
           * @example ref0123
           */
          product_reference?: string | null;
          /**
           * @description Variation id
           * @example 6678
           */
          variation_id?: number | null;
          /**
           * @description Variation reference
           * @example ref0123-5
           */
          variation_reference?: string | null;
          /**
           * @description Trade name of the product variation
           * @example T-shirt Red S
           */
          trade_name?: string | null;
          /**
           * @description Description of product variation
           * @example T-shirt 90% coton
           */
          description?: string | null;
          /**
           * @description Code of the first variation criteria
           * @example color
           */
          variation_code_1: string;
          /**
           * @description Code of the value of the first variation criteria
           * @example red
           */
          variation_code_value_1: string;
          /**
           * @description Code of the second variation criteria
           * @example size
           */
          variation_code_2?: string | null;
          /**
           * @description Code of the value of the second variation criteria
           * @example small
           */
          variation_code_value_2?: string | null;
          /**
           * @description Code of the third variation criteria
           * @example material
           */
          variation_code_3?: string | null;
          /**
           * @description Code of the value of the third variation criteria
           * @example cotton
           */
          variation_code_value_3?: string | null;
          /**
           * @description Sales price excluding tax of the variation
           * @example 105.56
           */
          sales_price_excl_tax?: string | null;
          /**
           * @description Purchase amount excluding tax of the variation
           * @example 68.22
           */
          purchase_price_excl_tax?: string | null;
        }) | ({
          /**
           * @description Row id
           * @example 1
           */
          row_id: number;
          /**
           * @description Company id
           * @example 6657
           */
          company_id?: number | null;
          /**
           * @description Company type
           * @example client
           * @enum {string}
           */
          company_type: "prospect" | "client" | "supplier";
          /**
           * @description Company name
           * @example Example company
           */
          company_name: string;
          /**
           * @description Company reference
           * @example CLI-1654
           */
          company_reference?: string | null;
          /**
           * @description Company type
           * @example SAS
           */
          company_legal_france_company_type?: string | null;
          /**
           * @description Company price category
           * @example Some category
           */
          company_price_category?: string | null;
          /**
           * Format: email
           * @description Company email
           * @example contact@example-company.com
           */
          company_email?: string | null;
          /**
           * @description Company phone number
           * @example +33100000000
           */
          company_phone_number?: string | null;
          /**
           * @description Company mobile number
           * @example +33600000000
           */
          company_mobile_number?: string | null;
          /**
           * @description Company Fax number
           * @example +33100000000
           */
          company_fax_number?: string | null;
          /**
           * Format: url
           * @description Company website
           * @example http://example-company.com
           */
          company_website?: string | null;
          /**
           * @description VAT number
           * @example FR99999999999
           */
          company_legal_france_vat?: string | null;
          /**
           * @description APE/NAF Code
           * @example 4711C
           */
          company_legal_france_ape_naf_code?: string | null;
          /**
           * @description Company Capital
           * @example 4000
           */
          company_capital?: string | null;
          /**
           * @description RCS immatriculation code
           * @example RCS xxxxx
           */
          company_legal_france_rcs_immatriculation?: string | null;
          /**
           * @description Company Siret
           * @example 73282932000074
           */
          company_legal_france_siret?: string | null;
          /**
           * @description Company Siren
           * @example 732829320
           */
          company_legal_france_siren?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          company_note?: string;
          /**
           * @description Company's smart tags list
           * @example [
           *   "foo",
           *   "bar"
           * ]
           */
          company_smart_tags?: string[] | null;
          /**
           * @description Owner name of the company import
           * @example John Snow
           */
          company_owner?: string | null;
          /**
           * @description Company accounting code
           * @example null
           */
          company_accounting_code?: string | null;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          company_auxiliary_code?: string | null;
          /**
           * @description Company subscribed to email campaigns
           * @example false
           */
          company_marketing_campaigns_email?: boolean;
          /**
           * @description Company subscribed to SMS campaigns
           * @example false
           */
          company_marketing_campaigns_sms?: boolean;
          /**
           * @description Company subscribed to phone campaigns
           * @example false
           */
          company_marketing_campaigns_phone?: boolean;
          /**
           * @description Company subscribed to postal mail campaigns
           * @example false
           */
          company_marketing_campaigns_postal_mail?: boolean;
          /**
           * @description Company subscribed to custom campaigns
           * @example false
           */
          company_marketing_campaigns_custom?: boolean;
          /**
           * @description Company' status archived or not
           * @example false
           */
          company_is_archived?: boolean;
          /**
           * @description Unique ID
           * @example 6657
           */
          address_id?: number;
          /**
           * @description Address name
           * @example Main office
           */
          address_name?: string;
          /**
           * @description Address line one
           * @example 30 Commercial Road
           */
          address_address_line_1?: string | null;
          /**
           * @description Address line two
           * @example Finance and Accounting
           */
          address_address_line_2?: string | null;
          /**
           * @description Address line three
           * @example Lighthouse Promotions
           */
          address_address_line_3?: string | null;
          /**
           * @description Address line four
           * @example PO Box 215
           */
          address_address_line_4?: string | null;
          /**
           * @description Address postal code
           * @example 75012
           */
          address_postal_code?: string | null;
          /**
           * @description Address city name
           * @example Paris
           */
          address_city?: string;
          /**
           * @description Address state
           * @example null
           */
          address_state?: string;
          /**
           * @description Address country code
           * @example FR
           */
          address_country_code?: string;
          /**
           * @description Unique ID
           * @example 6657
           */
          contact_id?: number;
          /**
           * @description contact civility
           * @example mrs
           * @enum {string|null}
           */
          contact_civility?: "mr" | "mrs" | "ms" | null;
          /**
           * @description Defines whether the company has main contact type
           * @example false
           */
          contact_type_main?: boolean | null;
          /**
           * @description Defines whether the company has invoicing contact type
           * @example false
           */
          contact_type_invoicing?: boolean | null;
          /**
           * @description Defines whether the company has dunning contact type
           * @example false
           */
          contact_type_dunning?: boolean | null;
          /**
           * @description Contact name
           * @example Doe
           */
          contact_last_name?: string | null;
          /**
           * @description Contact first name
           * @example John
           */
          contact_first_name?: string | null;
          /**
           * Format: email
           * @description Contact email
           * @example john.doe@example-company.com
           */
          contact_email?: string | null;
          /**
           * @description Contact phone number
           * @example +33100000000
           */
          contact_phone_number?: string | null;
          /**
           * @description Contact mobile number
           * @example +33600000000
           */
          contact_mobile_number?: string | null;
          /**
           * @description Contact Fax number
           * @example +33100000000
           */
          contact_fax_number?: string | null;
          /**
           * Format: url
           * @description Contact website
           * @example http://example-john-doe.com
           */
          contact_website?: string | null;
          /**
           * @description Contact job
           * @example Financial
           */
          contact_position?: string | null;
          /**
           * @description Contact's smart tags list
           * @example [
           *   "foo",
           *   "bar"
           * ]
           */
          contact_smart_tags?: string[] | null;
          /**
           * @description Note on contact
           * @example An handed-written note describing this contact
           */
          contact_note?: string;
          /**
           * @description Contact subscribed to email campaigns
           * @example false
           */
          contact_marketing_campaigns_email?: boolean;
          /**
           * @description Contact subscribed to SMS campaigns
           * @example false
           */
          contact_marketing_campaigns_sms?: boolean;
          /**
           * @description Contact subscribed to phone campaigns
           * @example false
           */
          contact_marketing_campaigns_phone?: boolean;
          /**
           * @description Contact subscribed to postal mail campaigns
           * @example false
           */
          contact_marketing_campaigns_postal_mail?: boolean;
          /**
           * @description Contact subscribed to custom campaigns
           * @example false
           */
          contact_marketing_campaigns_custom?: boolean;
          /**
           * @description Contact' status archived or not
           * @example false
           */
          contact_is_archived?: boolean;
        }) | ({
          /**
           * @description Row id
           * @example 1
           */
          row_id?: number;
          /**
           * @description Service id
           * @example 6657
           */
          id?: number | null;
          /**
           * @description Service reference
           * @example ref0123
           */
          reference: string;
          /**
           * @description Service name
           * @example lorem ipsum
           */
          name?: string | null;
          /**
           * @description Description of service
           * @example Repair and maintenance
           */
          description?: string | null;
          /**
           * @description Unit
           * @example hour
           */
          unit?: string | null;
          /**
           * @description Standard quantity
           * @example 3
           */
          standard_quantity?: string | null;
          /**
           * @description Service category
           * @example null
           */
          category?: string | null;
          /**
           * @description Smart tags list
           * @example [
           *   "foo",
           *   "bar"
           * ]
           */
          smart_tags?: string[] | null;
          /**
           * @description Owner name of the product import
           * @example John Snow
           */
          owner?: string | null;
          /**
           * @description Service is usable for timetracking
           * @example false
           */
          is_timetracking?: boolean;
          /**
           * @description Reference price
           * @example 19.99
           */
          reference_price?: string | null;
          /**
           * @description Tax rate
           * @example 19.6
           */
          tax_rate?: string | null;
          /**
           * @description Purchase price
           * @example 15.5
           */
          purchase_price?: string | null;
          /**
           * @description Accounting code
           * @example null
           */
          accounting_code?: string | null;
          /**
           * @description Accounting purchase code
           * @example null
           */
          accounting_purchase_code?: string | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
        }) | ({
          /**
           * @description Row id
           * @example 1
           */
          row_id?: number;
          /**
           * @description Service id
           * @example 6657
           */
          id?: number | null;
          /**
           * @description Service reference
           * @example ref0123
           */
          reference: string;
          /** @description Rate category ids and corresponding prices */
          prices?: {
              /**
               * @description Rate category name
               * @example Tax rate 20
               */
              category?: string;
              /**
               * @description Price for corresponding category
               * @example 23.11
               */
              price?: number;
            }[];
        }) | ({
          /**
           * @description Row id
           * @example 1
           */
          row_id?: number;
          /**
           * @description Product id
           * @example 6657
           */
          id?: number | null;
          /**
           * @description Product reference
           * @example ref0123
           */
          reference: string | null;
          /**
           * @description Product variation id
           * @example 100
           */
          variation_id?: number | null;
          /**
           * @description Product variation reference
           * @example ref11
           */
          variation_reference?: string | null;
          /** @description Rate category ids and corresponding prices */
          prices?: components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["4"]["prices"]["items"][];
        }))[];
    };
    /** Import batch validation */
    ImportValidateInput: {
      /**
       * Format: uuid
       * @description Batch id
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      batch_id: string;
      metadata: components["schemas"]["ImportPrepareInput"]["metadata"];
      /** @description Rows to validate */
      data: (components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["0"] | components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["1"] | components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["2"] | components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["3"] | components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["4"] | components["schemas"]["ImportPrepareInput"]["data"]["oneOf"]["0"]["items"]["oneOf"]["5"])[];
    };
    /** Import */
    ImportStartInput: {
      /**
       * Format: uuid
       * @description Batch id
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      batch_id: string;
    };
    /** Company's preferences */
    CompanyPreferences: {
      currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"];
      /** @description Company preferred carrier. */
      carrier?: {
        /**
         * @description id of carrier
         * @example 1234
         */
        id?: number;
        /**
         * @description label of carrier
         * @example DHL
         */
        label?: string;
      } | null;
      /** Tax */
      tax?: {
        /**
         * @description Id of tax
         * @example 6657
         */
        id?: number;
        /**
         * Format: float
         * @description Rate of tax
         * @example 20
         */
        rate?: number;
        /**
         * @description Label of tax
         * @example Product TVA
         */
        label?: string;
        /**
         * @description Is the tax enabled or not
         * @example true
         */
        is_active?: boolean;
        /**
         * @description Is the tax an ecotax
         * @example true
         */
        is_ecotax?: boolean;
      };
      /** @description Company preferred pay date. */
      payment_term?: ({
        /**
         * @description id of pay date
         * @example 1234
         */
        id?: number;
        /**
         * @description label of pay date
         * @example from 30 days
         */
        label?: string;
        /** @description Number of days for pay deadlines. */
        x_days?: number | null;
        /** @description Is pay deadlines at end of the month. */
        end_of_month?: boolean | null;
      }) | null;
      /** @description Company's preferred discount. */
      discount?: {
        /** @description numeric string. Can be float, double or integer */
        amount?: string;
        /** @enum {string} */
        type?: "amount" | "percent";
      };
      /** @description Company's preferred bank account. */
      bank_account?: {
        /**
         * @description id of bank account
         * @example 1234
         */
        id?: number;
        /**
         * @description label of bank account
         * @example My bank
         */
        label?: string;
        /**
         * @description iban of bank account
         * @example FRxxxxxxxxxxxxxx
         */
        iban?: string;
      } | null;
      /** @description Rows for this Company can have its own discount. */
      discount_by_row?: boolean;
      /** @description Company's preferred dunning plan for each doctype. */
      dunnings?: ({
        estimate?: ({
          /**
           * @description Dunning type select for estimate documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id selected for estimate documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for estimate documents  if value is "id". */
          label?: string;
        }) | null;
        invoice?: ({
          /**
           * @description Dunning type select for invoice documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id select for invoice documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for invoice documents  if value is "id". */
          label?: string;
        }) | null;
        proforma?: ({
          /**
           * @description Dunning type select for proforma documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id select for proforma documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for proforma documents  if value is "id". */
          label?: string;
        }) | null;
      }) | null;
      /** @description Company's preferred rate category. */
      rate_category?: {
        /**
         * @description id of rate category
         * @example 123456
         */
        id?: number;
        /**
         * @description label of rate category
         * @example HT
         */
        label?: string;
      } | null;
      /** @description Company's preferred pay mediums. */
      pay_mediums?: {
          /**
           * @description id of pay medium
           * @example 1234
           */
          id?: number;
          /**
           * @description label of pay medium
           * @example credit card
           */
          label?: string;
        }[] | null;
    };
    /** Company preferences */
    UpdateCompanyPreferences: {
      /** @description Id of the selected currency. */
      currency_id: number;
      /** @description Id of the carrier selected. */
      carrier_id: number;
      /** @description Id of the tax selected. */
      tax_id: number;
      /** @description Id of the payment term selected. */
      payment_terms: {
        id: number;
        /** @description Number of days for pay deadlines. */
        x_days?: number | null;
        /** @description Is pay deadlines at end of the month. */
        end_of_month?: boolean | null;
      };
      /** @description Default company's global discount applied. */
      discount: {
        /** @description numeric string. Can be float, double or integer */
        amount: string;
        /** @enum {string} */
        type: "amount" | "percent";
      };
      /** @description Id of Bank account selected. */
      bank_account_id: number | null;
      /** @description Rows for this Company can have its own discount. */
      discount_by_row: boolean;
      /** @description Dunning selected for each doctype. */
      dunning?: {
        estimate?: OneOf<[{
          /** @enum {string} */
          value: "disabled";
        }, {
          /** @enum {string} */
          value: "default";
        }, {
          /** @enum {string} */
          value: "id";
          id: number;
        }]>;
        invoice?: components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["0"] | components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["1"] | components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["2"];
        proforma?: components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["0"] | components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["1"] | components["schemas"]["UpdateCompanyPreferences"]["dunning"]["estimate"]["oneOf"]["2"];
      };
      /** @description Id of the rate category selected. */
      rate_category_id?: number;
      /** @description Ids of Company's pay medium displayed. */
      pay_medium_ids: number[];
    };
    /** Individual's preferences */
    IndividualPreferences: {
      currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"];
      /** @description Individual preferred carrier. */
      carrier?: {
        /**
         * @description id of carrier
         * @example 1234
         */
        id?: number;
        /**
         * @description label of carrier
         * @example DHL
         */
        label?: string;
      } | null;
      tax?: components["schemas"]["CompanyPreferences"]["tax"];
      /** @description Individual preferred pay date. */
      payment_term?: ({
        /**
         * @description id of pay date
         * @example 1234
         */
        id?: number;
        /**
         * @description label of pay date
         * @example from 30 days
         */
        label?: string;
        /** @description Number of days for pay deadlines. */
        x_days?: number | null;
        /** @description Is pay deadlines at end of the month. */
        end_of_month?: boolean | null;
      }) | null;
      /** @description Individual's preferred discount. */
      discount?: {
        /** @description numeric string. Can be float, double or integer */
        amount?: string;
        /** @enum {string} */
        type?: "amount" | "percent";
      };
      /** @description Individual's preferred bank account. */
      bank_account?: {
        /**
         * @description id of bank account
         * @example 1234
         */
        id?: number;
        /**
         * @description label of bank account
         * @example My bank
         */
        label?: string;
        /**
         * @description iban of bank account
         * @example FRxxxxxxxxxxxxxx
         */
        iban?: string;
      } | null;
      /** @description Rows for this Individual can have its own discount. */
      discount_by_row?: boolean;
      /** @description Individual's preferred dunning plan for each doctype. */
      dunning?: ({
        estimate?: ({
          /**
           * @description Dunning type select for estimate documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id selected for estimate documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for estimate documents  if value is "id". */
          label?: string;
        }) | null;
        invoice?: ({
          /**
           * @description Dunning type select for invoice documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id select for invoice documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for invoice documents  if value is "id". */
          label?: string;
        }) | null;
        proforma?: ({
          /**
           * @description Dunning type select for proforma documents.
           * @enum {string}
           */
          value?: "disabled" | "default" | "id";
          /** @description Dunning id select for proforma documents if value is "id". */
          id?: number;
          /** @description Label of dunning selected for proforma documents  if value is "id". */
          label?: string;
        }) | null;
      }) | null;
      /** @description Individual's preferred rate category. */
      rate_category?: {
        /**
         * @description id of rate category
         * @example 123456
         */
        id?: number;
        /**
         * @description label of rate category
         * @example HT
         */
        label?: string;
      } | null;
      /** @description Individual's preferred pay medium. */
      pay_medium?: {
          /**
           * @description id of pay medium
           * @example 1234
           */
          id?: number;
          /**
           * @description label of pay medium
           * @example credit card
           */
          label?: string;
        }[] | null;
    };
    /** Individual preferences */
    UpdateIndividualPreferences: {
      /** @description Id of the selected currency. */
      currency_id: number;
      /** @description Id of the carrier selected. */
      carrier_id: number;
      /** @description Id of the tax selected. */
      tax_id: number;
      /** @description Id of the payment term selected. */
      payment_terms: {
        id: number;
        /** @description Number of days for pay deadlines. */
        x_days?: number | null;
        /** @description Is pay deadlines at end of the month. */
        end_of_month?: boolean | null;
      };
      /** @description Default individual's global discount applied. */
      discount: {
        /** @description numeric string. Can be float, double or integer */
        amount: string;
        /** @enum {string} */
        type: "amount" | "percent";
      };
      /** @description Id of Bank account selected. */
      bank_account_id: number | null;
      /** @description Rows for this individual can have its own discount. */
      discount_by_row: boolean;
      /** @description Dunning selected for each doctype. */
      dunning?: {
        estimate?: OneOf<[{
          /** @enum {string} */
          value: "disabled";
        }, {
          /** @enum {string} */
          value: "default";
        }, {
          /** @enum {string} */
          value: "id";
          id: number;
        }]>;
        invoice?: components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["0"] | components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["1"] | components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["2"];
        proforma?: components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["0"] | components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["1"] | components["schemas"]["UpdateIndividualPreferences"]["dunning"]["estimate"]["oneOf"]["2"];
      };
      /** @description Id of the rate category selected. */
      rate_category_id?: number;
      /** @description Ids of individual's pay medium displayed. */
      pay_medium_ids: number[];
    };
    /** Import model */
    ImportModel: {
      /**
       * @description The model columns
       * @example [
       *   {
       *     "name": "Column name",
       *     "mandatory": true,
       *     "custom_field": false
       *   }
       * ]
       */
      columns?: {
          /**
           * @description Column name
           * @example Reference
           */
          name: string;
          /**
           * @description Is it a mandatory column
           * @example true
           */
          mandatory?: boolean;
          /**
           * @description Is it a column used as custom field
           * @example true
           */
          custom_field?: boolean;
        }[];
      /**
       * @description Title of template
       * @example Modèle Produit
       */
      title?: string | null;
    };
    /** Subscription */
    SubscriptionOne: {
      /**
       * @description Id of subscription
       * @example 2
       */
      id?: number;
      /**
       * Format: date-time
       * @description Created date
       * @example 2020-01-01T00:00:00+01:00
       */
      created?: string;
      /** @description Document to use as a template for subscription payment installments */
      model?: {
        /** @enum {string} */
        type?: "model";
        id?: number;
      };
      /**
       * @description Objects linked to the subscription :
       *   - A required company or individual
       *   - An optional contact linked to the provided company.
       */
      related?: ({
          /**
           * @description ID of related
           * @example 234
           */
          id: number;
          /**
           * @description Type of related
           * @example company
           * @enum {string}
           */
          type: "company" | "individual" | "contact";
        })[];
      /**
       * Sending
       * @description Email sending configuration
       */
      sending?: {
        /**
         * @description Once the invoice has been generated, from subscription deadline, if sending mode is automatic, email will be sent to all recipients, otherwise, if it's manual, email should be send manually
         * @example automatic
         * @enum {string}
         */
        mode: "automatic" | "manual";
        /** @description Email recipients */
        recipients?: (({
            /**
             * @description Id of recipient
             * @example 345
             */
            id?: number;
            /**
             * @description Type of recipient
             * @enum {string}
             */
            type?: "company" | "individual" | "contact" | "staff";
          }) | {
            /**
             * @description Email of recipient
             * @example contact@sellsy.com
             */
            email?: string;
          })[];
        /**
         * @description Id of email template. If not specified, the default email layout will be used
         * @example 12
         */
        email_template?: number | null;
      };
      /**
       * @description Source of payment preferences
       * @enum {string}
       */
      preferences_source?: "model" | "related";
      /** @description Subscription owner */
      owner?: {
        /** @enum {string} */
        type?: "staff";
        id?: number;
      };
      /** @description Conditions to generate subscription payment installment */
      conditions?: {
        /** @description Interval for subscription payment installments */
        interval?: OneOf<[{
          /** @enum {string} */
          type: "weekly";
          /** @enum {string} */
          value: "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday";
        }, {
          /** @enum {string} */
          type: "monthly" | "bimonthly" | "quarterly" | "biannual" | "annual";
          /** @enum {string} */
          value: "first_monday" | "first_tuesday" | "first_wednesday" | "first_thursday" | "first_friday" | "first_saturday" | "first_sunday" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "last_monday" | "last_tuesday" | "last_wednesday" | "last_thursday" | "last_friday" | "last_saturday" | "last_sunday";
        }, {
          /** @enum {string} */
          type: "every_days";
          value: number;
        }]>;
      };
      /**
       * @description Id of billing address
       * @example 69
       */
      billing_address?: number | null;
      /**
       * @description Id of shipping address
       * @example 67
       */
      shipping_address?: number | null;
      /**
       * @description Order reference
       * @example reference
       */
      order_reference?: string | null;
      /**
       * @description Update prices according to the products or services in the catalog
       * @default false
       */
      has_updated_catalog_prices?: boolean;
      /**
       * @description Take into account catalog promotions
       * @default false
       */
      has_catalog_promotions?: boolean;
      /**
       * @description Display the next recurrence date on the invoice
       * @default false
       */
      has_display_of_next_deadline?: boolean;
      /**
       * @description Display service dates on the invoice
       * @default false
       */
      has_service_dates?: boolean;
      /** @description Service dates on the invoice <br/><br/> - Prerequisite: `has_service_dates` should be true <br/> */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         *
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Enable stock impact on new invoices generated by subscription <br/><br/> - Prerequisite: The Stock module must be enabled and configured on your account to use this option
       *
       * @default false
       * @example true
       */
      has_impact_on_stock?: boolean;
      /** @description Specify the warehouse stock to be impacted once the invoice is generated <br/><br/> - Prerequisite: `has_impact_on_stock` should be true <br/> - Prerequisite: The Stock module must be enabled and configured on your account to use this option <br/><br/>If specified to null, the default warehouse defined in the Stock module preferences will be used */
      warehouse_id?: number | null;
      /** @description Enable automatic payment by direct debit on new invoices generated by subscription <br/><br/> - Prerequisite: The Gocardless or Stripe module _(according to the one enabled on the document model used)_ must be enabled and configured on your account to use this option */
      payment_settings?: ({
        /**
         * @description Activate direct debit
         * @example true
         */
        direct_debit?: boolean;
        /**
         * @description Required if the direct debit module on document model is GoCardless
         * @example 6
         */
        mandate?: number | null;
        /**
         * @description Payment installment invoice
         * @example invoice_generation_date
         * @enum {string}
         */
        payment_installment_invoice?: "invoice_due_date" | "invoice_generation_date";
      }) | null;
      /**
       * @description Currency code of the invoice
       * @example EUR
       */
      currency?: string;
      /** @description First payment date. */
      first_payment_installment_date?: {
        /** Format: date */
        date?: string;
        id?: number;
      } | null;
      /** @description Next payment date. If the value is `null`, the subscription is end. */
      next_payment_installment_date?: {
        /** Format: date */
        date?: string;
        id?: number;
      } | null;
      /** @description Amounts of subscription */
      amounts?: {
        total_excl_tax?: string;
        total_incl_tax?: string;
      };
      /**
       * @description Total number of invoices
       * @example 12
       */
      invoices_total_count?: number;
      /**
       * @description Number of invoices generated
       * @example 2
       */
      invoices_generated_count?: number;
      /**
       * @description Number of remaining invoices
       * @example 10
       */
      invoices_remaining_count?: number;
    };
    /** Create subscription */
    SubscriptionCreate: {
      /**
       * Model
       * @description Document to use as a template for subscription payment installments
       */
      model: {
        /**
         * @description Template type
         * @example model
         * @enum {string}
         */
        type: "model";
        /**
         * @description Template id
         * @example 123
         */
        id: number;
      };
      /**
       * @description Objects linked to the subscription :
       *   - A required company or individual, only "client" type.
       *   - An optional contact can be added, it must be linked to the provided company.
       */
      related: components["schemas"]["SubscriptionOne"]["related"]["items"][];
      sending: components["schemas"]["SubscriptionOne"]["sending"];
      /**
       * @description Source of payment preferences
       * @enum {string}
       */
      preferences_source: "model" | "related";
      /**
       * Condition
       * @description Conditions to generate subscription deadline
       */
      conditions: {
        /**
         * Format: date
         * @description Date to start subscription, must be greater than today
         * @example 2022-01-02
         */
        start_date: string;
        /** @description Interval for subscription deadlines */
        interval: components["schemas"]["SubscriptionOne"]["conditions"]["interval"]["oneOf"]["0"] | components["schemas"]["SubscriptionOne"]["conditions"]["interval"]["oneOf"]["1"] | components["schemas"]["SubscriptionOne"]["conditions"]["interval"]["oneOf"]["2"];
      };
      /** @description Subscription payment installments to be generated */
      payment_installments: ({
          /**
           * Format: date
           * @description Date of the payment installments. The date must not be over 2038-01-19.
           *
           * @example 2022-01-02
           */
          date: string;
          /**
           * @description By default, the general preference "sending.mode" is applied to each payment installments, but it is possible to override the sending mode on each
           *
           * @enum {string}
           */
          sending_mode?: "automatic" | "manual";
        })[];
      /**
       * @description Id of billing address
       * @example 69
       */
      billing_address?: number | null;
      /**
       * @description Id of shipping address
       * @example 67
       */
      shipping_address?: number | null;
      /**
       * @description Order reference
       * @example reference
       */
      order_reference?: string | null;
      /**
       * @description Update prices according to the products or services in the catalog
       * @default false
       */
      has_updated_catalog_prices?: boolean;
      /**
       * @description Take into account catalog promotions
       * @default false
       */
      has_catalog_promotions?: boolean;
      /**
       * @description Display the next recurrence date on the invoice
       * @default false
       */
      has_display_of_next_deadline?: boolean;
      /**
       * @description Display service dates on the invoice
       * @default false
       */
      has_service_dates?: boolean;
      /** @description Service dates on the invoice <br/><br/> - Prerequisite: `has_service_dates` should be true <br/> */
      service_dates?: {
        /**
         * Format: date
         * @description Start date for service
         * @example 2023-01-01
         */
        start?: string;
        /**
         * Format: date
         * @description End date for service <br/><br/> End date must be greater than start date
         *
         * @example 2023-01-31
         */
        end?: string;
      } | null;
      /**
       * @description Enable stock impact on new invoices generated by subscription <br/><br/> - Prerequisite: The Stock module must be enabled and configured on your account to use this option
       *
       * @default false
       * @example true
       */
      has_impact_on_stock?: boolean;
      /** @description Specify the warehouse stock to be impacted once the invoice is generated <br/><br/> - Prerequisite: `has_impact_on_stock` should be true <br/> - Prerequisite: The Stock module must be enabled and configured on your account to use this option <br/><br/>If specified to null, the default warehouse defined in the Stock module preferences will be used */
      warehouse_id?: number | null;
      /** @description Enable automatic payment by direct debit on new invoices generated by subscription <br/><br/> - Prerequisite: The Gocardless or Stripe module _(according to the one enabled on the document model used)_ must be enabled and configured on your account to use this option */
      payment_settings?: ({
        /**
         * @description Activate direct debit
         * @example true
         */
        direct_debit?: boolean;
        /**
         * @description Required if the direct debit module on document model is GoCardless
         * @example 6
         */
        mandate?: number | null;
        /**
         * @description Payment installment invoice
         * @example invoice_generation_date
         * @enum {string}
         */
        payment_installment_invoice?: "invoice_due_date" | "invoice_generation_date";
      }) | null;
    };
    LinkPaymentToDocument: {
      /**
       * @description Amount to link from payment to document.<br> Must be greater than zero, and less than amount left to solve on payment and on document.
       * @example 123.45
       */
      amount: number;
    };
    InvoicingPayment: {
      /** @description Payment id */
      id?: number;
      /**
       * @description Payment identifier
       * @example reference
       */
      number?: string | null;
      /**
       * Format: date-time
       * @description Payment date (ISO 8601)
       * @example 1970-01-01T00:00:00+00:00
       */
      paid_at?: string;
      /**
       * @description Payment status
       * @enum {string}
       */
      status?: "pending" | "confirmed" | "rejected" | "failed" | "refund";
      /** @description Payment method id */
      payment_method_id?: number;
      /**
       * @description Payment type
       * @enum {string}
       */
      type?: "credit" | "debit";
      amount?: {
        /**
         * @description Amount
         * @example 15.26
         */
        value?: string | null;
        /**
         * @description Currency (ISO 4217)
         * @example EUR
         */
        currency?: string | null;
      };
      /** @description Payment related entities */
      related?: ({
          /** @description Id of object */
          id?: number;
          /**
           * @description Type of object
           * @example invoice
           * @enum {string}
           */
          type?: "invoice" | "creditnote" | "estimate" | "order";
        })[];
    };
    /** Collection of objectives */
    ObjectiveCollectionOutput: {
      pagination: components["schemas"]["AccountDocumentCollection"]["pagination"];
      data: (({
          /** @description Objective id */
          id: number;
          /**
           * @description Objective name
           * @example My Objective
           */
          name: string;
          category: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["category"];
          turnover: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["turnover"];
          period: components["schemas"]["ObjectiveTurnoverInput"]["period"];
          item: {
            /** @description linked Item id */
            id: number;
            /** @description linked Item name */
            name: string;
          } | null;
          item_category: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["item_category"];
          /** @description Refinements of the objective */
          refinements: {
              period?: components["schemas"]["ObjectiveTurnoverInput"]["period"];
              turnover?: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["turnover"];
            }[];
          assignee: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["assignee"];
          links: components["schemas"]["ObjectiveCollectionOutput"]["links"];
        }) & ({
          _embed?: {
            created_by?: components["schemas"]["Activity"]["_embed"]["author"];
            modified_by?: components["schemas"]["Activity"]["_embed"]["author"];
          } | null;
        }))[];
      links: {
          rel: string;
          href: string;
        }[];
    };
    /** Turnover objective */
    ObjectiveTurnoverInput: {
      /**
       * @description Objective name
       * @example My Objective
       */
      name: string;
      /**
       * @description Code of an existing objective category
       * @example turnover
       * @enum {string}
       */
      category: "turnover";
      /** money */
      turnover: {
        /**
         * @description Amount of turnover expected
         * @example 124.33
         */
        amount: string;
        /**
         * @description Currency code
         * @example EUR
         */
        currency: string;
      };
      /**
       * Period
       * @description period of the objective
       */
      period: {
        /**
         * @description The duration of the period
         * @enum {string}
         */
        duration: "year" | "quarter" | "month";
        /**
         * Format: date
         * @description The start date
         */
        date_start: string;
        /**
         * Format: date
         * @description The end date
         */
        date_end: string;
      };
      /** @description Linked item id */
      item_id: number | null;
      /** @description Linked item category id */
      item_category_id: number | null;
      /** @description Refinements of the objective */
      refinements: {
          period?: components["schemas"]["ObjectiveTurnoverInput"]["period"];
          turnover?: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
        }[];
      /**
       * Assignee
       * @description Assignee of the objective
       */
      assignee: {
        /**
         * @description Type of assignee
         * @enum {string}
         */
        type: "corp" | "group" | "staff";
        /** @description Id of Assignee: corp id, group id or staff id */
        id?: number;
      };
    };
    /**
     * objective filters
     * @description The objective filters
     */
    ObjectiveSearchInput: {
      filters?: {
        /**
         * @description name of the Objective
         * @example {
         *   "mode": "contain",
         *   "value": "search"
         * }
         */
        name?: {
          mode: string;
          value?: string;
        };
        /** @description List of Assignees */
        assignee?: ({
            /**
             * @description Type of assignee
             * @enum {string}
             */
            type: "corp" | "group" | "staff";
            /** @description Id of Assignee: corp id, group id or staff id */
            id?: number;
          })[];
      };
    };
    ObjectiveOutput: {
      /** @description Objective id */
      id: number;
      /**
       * @description Objective name
       * @example My Objective
       */
      name: string;
      /** @description Objective category */
      category: {
        /**
         * @description Code of an existing objective category
         * @example turnover
         */
        code: string;
        /**
         * @description Label of an existing objective category
         * @example Turnover
         */
        label: string;
      };
      /**
       * Turnover
       * @description Turnover
       */
      turnover: {
        expected: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
        actual: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
        /** @description Progression of the objective */
        progression: number;
        /**
         * Format: date-time
         * @description Date of last turnover calculation
         */
        computed_at: string;
        /** @description Days remaining between now and the end of the period */
        days_left: number;
      };
      period: components["schemas"]["ObjectiveTurnoverInput"]["period"];
      item: {
        /** @description linked Item id */
        id: number;
        /** @description linked Item name */
        name: string;
      } | null;
      item_category: ({
        /** @description Linked item category id */
        id: number | null;
        /** @description Linked item category name */
        name: string;
      }) | null;
      /** @description Refinements of the objective */
      refinements: {
          period?: components["schemas"]["ObjectiveTurnoverInput"]["period"];
          turnover?: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["turnover"];
        }[];
      /**
       * Assignee
       * @description Assignee of the objective
       */
      assignee: {
        /**
         * @description Type of assignee
         * @enum {string}
         */
        type: "corp" | "group" | "staff";
        /** @description Assignee id: corp id, group id or staff id */
        id?: number;
        /** @description Assignee name: corp name, group name or staff name */
        name?: string;
      };
      links: components["schemas"]["ObjectiveCollectionOutput"]["links"];
    };
    /** objective metadatas */
    ObjectiveMetadata: {
      turnover?: {
        data?: {
          category: components["schemas"]["ObjectiveOutput"]["oneOf"]["0"]["category"];
          /** @example EUR */
          currency: string;
          assignees_types: {
              value?: string;
              label?: string;
              order?: number;
            }[];
          assignees: {
              groups?: components["schemas"]["ObjectiveMetadata"]["turnover"]["data"]["assignees_types"];
              staffs?: components["schemas"]["ObjectiveMetadata"]["turnover"]["data"]["assignees_types"];
            }[];
          item_categories: components["schemas"]["ObjectiveMetadata"]["turnover"]["data"]["assignees_types"] & (({
              parent?: number | null;
              logo?: string | null;
            })[]);
          durations: components["schemas"]["ObjectiveMetadata"]["turnover"]["data"]["assignees_types"];
        };
        metadata?: {
          choose_product?: boolean;
          create_new_staff?: boolean;
          create_new_group?: boolean;
        };
        _links?: components["schemas"]["ObjectiveCollectionOutput"]["links"];
      };
    };
    ObjectiveComputeTurnoverInput: {
      /**
       * @description Currency used to compute the turnover
       * @example EUR
       */
      currency: string;
      /** @description Period used to compute the turnover */
      period: components["schemas"]["ObjectiveTurnoverInput"]["period"];
      /** @description linked item id used to compute the turnover */
      item_id: number | null;
      /** @description Linked item category id used to compute the turnover */
      item_category_id: number | null;
      /** @description Assignee used to compute the turnover */
      assignee: components["schemas"]["ObjectiveTurnoverInput"]["assignee"];
    };
    ObjectiveComputeTurnoverOutput: {
        /** @description Period used to compute the turnover */
        period: components["schemas"]["ObjectiveTurnoverInput"]["period"];
        /** @description The computed turnover */
        turnover: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
      }[];
    /** Update of an existing turnover objective */
    ObjectiveTurnoverUpdateInput: {
      /**
       * @description Objective name
       * @example My Objective
       */
      name: string;
      turnover: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
      /** @description Refinements of the objective */
      refinements: {
          period?: components["schemas"]["ObjectiveTurnoverInput"]["period"];
          turnover?: components["schemas"]["ObjectiveTurnoverInput"]["turnover"];
        }[];
    };
    /** Onboarding Screen output */
    OnboardingScreenOutput: {
      /**
       * @description Screen code
       * @example Screen #1
       */
      code: string;
      /**
       * @description Screen target user
       * @example owner
       */
      persona?: string;
      /**
       * @description Screen id
       * @example 3
       */
      id: number;
      /** @description Screen columns */
      columns: ({
          /** @description Screen column order */
          order: number;
          /** @description Screen column label */
          label: string;
          /** @description Screen column cards */
          cards: ({
              /** @description Screen card id */
              id: number;
              /** @description Screen card target url */
              url: string;
              /** @description Screen card label */
              label: string;
              /** @description Screen card code */
              code: string;
              /**
               * @description Screen card icon identifier
               * @example icon-code
               */
              icon: string;
              /** @description Screen card order in column */
              order: number;
              /**
               * @description Screen card completion state
               * @enum {string}
               */
              state: "completed" | "to_complete" | "completing";
            })[];
        })[];
    };
    /** @description Discount including taxes */
    DiscountInclTaxesOutput: {
      /**
       * @description identifier of discount
       * @example 31
       */
      id?: number;
      /**
       * @description Reference of discount
       * @example Halloween five last day
       */
      reference?: string;
      /**
       * @description Name of discount
       * @example Halloween promotion
       */
      name?: string;
      /**
       * @description Description visible on the document
       * @example For purchases made during the last five days of October
       */
      description?: string;
      /**
       * @description Unit id
       * @example 31
       */
      unit_id?: number;
      /**
       * @description Amount of unit
       * @example 31
       */
      amount?: string;
      /**
       * @description <ul><li>If the accounting code is not empty, we use it.</li> <li>If the accounting code is empty AND if the account has activated dedicated accounting codes for discounts including VAT, we use it.</li> <li>Otherwise, we use the default accounting code for companies.</li></ul>
       *
       * @example 31
       */
      accounting_code_id?: number | null;
    };
    /** @description Discount including taxes */
    DiscountInclTaxesInput: {
      /**
       * @description Reference of discount
       * @example Halloween five last day
       */
      reference: string;
      /**
       * @description Name of discount
       * @example Halloween promotion
       */
      name: string;
      /**
       * @description Description visible on the document
       * @example For purchases made during the last five days of October
       */
      description: string;
      /**
       * @description Unit id
       * @example 31
       */
      unit_id: number;
      /**
       * @description Amount of unit
       * @example 31
       */
      amount: string;
      /**
       * @description <ul>If `null` : <li>Uses company default</li> <li>Or the customer's if he has one</li></ul>
       *
       * @example 31
       */
      accounting_code_id?: number | null;
    };
    /** @description Update discount including taxes */
    UpdateDiscountInclTaxes: {
      /**
       * @description Reference of discount
       * @example Halloween five last day
       */
      reference?: string;
      /**
       * @description Name of discount
       * @example Halloween promotion
       */
      name?: string;
      /**
       * @description Description visible on the document
       * @example For purchases made during the last five days of October
       */
      description?: string;
      /**
       * @description Unit id
       * @example 31
       */
      unit_id?: number;
      /**
       * @description Amount of unit
       * @example 31
       */
      amount?: string;
      /**
       * @description <ul>If `null` : <li>Uses company default</li> <li>Or the customer's if he has one</li></ul>
       *
       * @example 31
       */
      accounting_code_id?: number | null;
    };
    /** List Attributes Output */
    MarketingAttributeOutput: {
      /** @description List of attributes */
      attributes: ({
          /** @description Attribute id */
          id: number;
          /** @description Attribute display label */
          label: string;
          /** @description Attribute identifier code */
          code: string;
          /** @description Is the Attribute active by default */
          default: boolean;
          /** @description Has the Attribute been synchronized */
          synchronized: boolean;
          /** @description Attribute category */
          category: {
            /** @description Attribute category code */
            code: string;
            /** @description Attributes category label */
            label: string;
          } | null;
          /** @description Attribute sub-category */
          sub_category: {
            /** @description Attribute sub-category code */
            code: string;
            /** @description Attributes sub-category label */
            label: string;
          } | null;
        })[];
      /** @description List of related routes available */
      links: {
          rel: string;
          href: string;
        }[];
    };
    /**
     * Marketing Attribute revision
     * @example [
     *   56,
     *   123,
     *   345
     * ]
     */
    MarketingAttributeInput: number[];
    /** Marketing attribute revision diff */
    MarketingAttributeDiffOutput: {
      /** @description List of new Marketing Attributes to create */
      create: components["schemas"]["MarketingAttributeOutput"]["attributes"]["items"][];
      /** @description List of previous Marketing Attributes to delete */
      delete: components["schemas"]["MarketingAttributeOutput"]["attributes"]["items"][];
      /** @description List of Marketing Attributes unchanged */
      void: components["schemas"]["MarketingAttributeOutput"]["attributes"]["items"][];
      links: components["schemas"]["MarketingAttributeOutput"]["links"];
    };
    /** Discount including taxes */
    DiscountInclTaxesDocumentInput: {
      /**
       * @description Discount including taxes quantity
       * @example 12
       */
      quantity: number;
      /**
       * @description Discount including taxes amount
       * @example 12.34
       */
      amount?: string;
    };
    /** @description The consent settings */
    ConsentSettingsOuput: {
      /** @description The consent settings */
      settings: {
        default_consent: boolean;
        double_optin: {
          enable: boolean;
          confirm_email: {
            subject: string;
            body: string;
            sender: {
              email: string;
              name: string;
            };
            button: {
              label: string;
            };
          };
        };
      };
      _links: {
          rel: string;
          href: string;
        }[];
    };
    ConsentSettingsInput: components["schemas"]["ConsentSettingsOuput"]["settings"];
    /** @description The marketing consent settings */
    ConsentMarketingSettingsInput: {
      marketing: {
        email: boolean;
        sms: boolean;
        phone: boolean;
        postal_mail: boolean;
        custom: boolean;
      };
    };
  };
  responses: never;
  parameters: {
    /** @description Order field */
    ModelOrder?: "id" | "number" | "created";
    /** @description The order field */
    commentOrder?: "id" | "updated" | "created";
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned */
    commentItemEmbed?: ("owner" | "related" | "company" | "individual" | "contact" | "acl")[];
    /** @description Example : `embed[]=delivery_address&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> */
    contactEmbed?: (("invoicing_address" | "delivery_address" | "opportunities" | "estimates" | "invoices" | "orders" | "deliveries" | "acl" | "smart_tags") | string)[];
    /** @description The order field */
    crmActivityOrder?: "date" | "due_date" | "event" | "author" | "more.label";
    /** @description The order field */
    dealsActivityOrder?: "due_date" | "event" | "label";
    /** @description The order field */
    accountDocumentOrder?: "date";
    /** @description Additional object included in the result. <br/> <strong>Aggregations by date only works with due_date filter : </strong> <br/> - For aggregations.by_day_and_event, maximum interval of due_date is 90 days <br/> - For aggregations.by_month_and_event, maximum interval of due_date is 365 days */
    crmActivityEmbed?: ("aggregations" | "aggregations.by_event" | "aggregations.by_month_and_event" | "aggregations.by_day_and_event" | "aggregations.by_week_and_event" | "aggregations.by_author_and_event" | "aggregations.by_author_and_label")[];
    /** @description Example : `embed[]=assigned_staffs&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - assigned_staffs: `staffs.read`<br /> - contacts: `contacts.read`<br /> - estimates, invoices, orders, deliveries, proformas, creditnotes: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> */
    opportunityEmbed?: (("estimates" | "individual" | "invoices" | "orders" | "deliveries" | "proformas" | "creditnotes" | "assigned_staffs" | "company" | "contacts" | "acl" | "currency" | "smart_tags") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - assigned_staffs: `staffs.read`<br /> - contacts: `contacts.read`<br /> - estimates, invoices, orders, deliveries, proformas, creditnotes: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> */
    opportunityEmbedWithAggregations?: (("estimates" | "individual" | "invoices" | "orders" | "deliveries" | "proformas" | "creditnotes" | "assigned_staffs" | "company" | "contacts" | "acl" | "currency" | "aggregations" | "aggregations.amount_sum" | "aggregations.amount_sum_by_status" | "aggregations.amount_sum_by_status_due_at_seven" | "aggregations.number_by_pipeline_and_step" | "smart_tags") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description The order field */
    opportunityOrder?: "id" | "created" | "step_rank" | "due_date";
    /** @description Additional object included in the result.<br /><br /> If current user visibility on staffs is restricted, embed will not be available.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - licenses: `accounts.read` */
    staffEmbed?: ("preferences" | "acl" | "licenses" | "preferences_calendar")[];
    /** @description Additional object included in the result.<br /><br /> If current user visibility on staffs is restricted, embed will not be available.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - licenses: `accounts.read`<br /> - profile: `staffs.read`<br /> - account: `staffs.read`<br /> - user: `staffs.read`<br /> - subscriptions: `accounts.read`<br /> - features: `accounts.read` */
    staffItemEmbed?: ("preferences" | "acl" | "licenses" | "preferences_calendar" | "intercom_hash" | "profile" | "account" | "user" | "subscriptions" | "features")[];
    /** @description The order field */
    opportunitySourceOrder?: "id" | "rank";
    /** @description The order field */
    opportunityPipelineOrder?: "id" | "rank";
    /** @description The order field */
    pipelineStepOrder?: "id" | "rank" | "probability";
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities_number: `opportunities.read` */
    pipelineStepEmbed?: "opportunities_number"[];
    /** @description Filters the fields returned in the response <br /><br /> Example:<br /> - `field[]=id`: Return the `id` field<br /> - `field[]=address.id`: Return the `id` field of the `address` object<br /> - `field[]=addresses[].id`: Return the `id` field of the `address` objects<br /> <br> On endpoints that implement the `embed` query parameter, if you specified embeds in your call, you will need to request the `_embed` field as well.<br> Example:<br> - `field[]=_embed`: Return all fields from all requested embeds<br> - `field[]=_embed.address`: Return all fields from the `address` embed<br> - `field[]=_embed.company.name`: Return the `name` field from the `company` embed<br> */
    fields?: string[];
    /** @description The order field */
    favouriteFiltersOrder?: "name" | "id";
    /** @description Example : `embed[]=payment_method_ids&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - payment_method_ids: `payments.read`<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - contact: `contacts.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned <br/><br /> <strong>Aggregations on amounts only works in addition with the currency filter</strong> */
    SaleEmbed?: (("company" | "individual" | "contact" | "invoicing_address" | "delivery_address" | "currency" | "acl" | "payment_method_ids" | "aggregations" | "aggregations.amount_sum_by_status" | "aggregations.count_by_status" | "fiscal_year" | "smart_tags" | "payment_terms") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Example : `embed[]=payment_method_ids&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - payment_method_ids: `payments.read`<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - contact: `contacts.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> - discount_incl_taxes: `discount-incl-taxes.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned <br/><br /> <strong>Aggregations on amounts only works in addition with the currency filter</strong> */
    EstimateOneEmbed?: (("company" | "individual" | "contact" | "invoicing_address" | "delivery_address" | "currency" | "acl" | "payment_method_ids" | "aggregations" | "aggregations.amount_sum_by_status" | "aggregations.count_by_status" | "fiscal_year" | "smart_tags" | "payment_terms" | "discount_incl_taxes") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /**
     * @description The order field
     * > Value `numero` is deprecated and will be deleted on the July 1st 2022. Use `number` instead.
     */
    SaleOrder?: "id" | "numero" | "created" | "date" | "expiry_date" | "number" | "amount";
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner, assigned_staffs: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned */
    taskEmbed?: ("owner" | "assigned_staffs" | "related" | "company" | "individual" | "contact" | "acl")[];
    /** @description The order field */
    taskOrder?: "id" | "due_date";
    /** @description The order field */
    labelOrder?: "rank" | "id";
    /** @description The search field */
    autocomplete: string;
    /**
     * @description Filter search by object type or subtype.
     * - `ex with types: type[]=contact&type[]=company`
     * - `ex with subtypes: type[]=company.client&type[]=item.product`
     * - `ex with both: type[]=company&type[]=item.product`
     */
    searchType?: ("company" | "company.client" | "company.prospect" | "company.supplier" | "individual" | "individual.client" | "individual.prospect" | "individual.supplier" | "contact" | "opportunity" | "purchase" | "purchase.purInvoice" | "purchase.purDelivery" | "purchase.purOrder" | "purchase.purCreditNote" | "item" | "item.product" | "item.packaging" | "item.shipping" | "item.service" | "declination" | "declination.product" | "declination.declination" | "document" | "document.estimate" | "document.invoice" | "document.delivery" | "document.order" | "document.proforma" | "document.creditnote" | "staff" | "ticket" | "redactor" | "redactor.document" | "redactor.template")[];
    /** @description The order field */
    activityOrder?: "due_date";
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - author: `staffs.read`<br /> - object_related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned */
    activityEmbed?: ("object_related" | "author" | "individual" | "company" | "acl")[];
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned */
    phoneCallEmbed?: ("company" | "individual" | "contact" | "related" | "owner" | "acl")[];
    /** @description Additional object included in the result. */
    reportEmbed?: ("aggregations" | "aggregations.cumulio")[];
    /** @description The order field */
    contactOrders?: "id" | "name" | "created_at";
    /** @description The order direction */
    direction?: "asc" | "desc";
    /** @description The order field */
    order?: string;
    /** @description The pagination limit */
    limit?: number;
    /** @description The pagination offset */
    offset?: number | string;
    /** @description translation of the country name */
    language?: "fr" | "en";
    /** @description The order field */
    customActivityOrder?: "date";
    /** @description The order field */
    ocrOrder?: "created_at" | "completed_at";
    /** @description The order field */
    paymentMethodOrder?: "id" | "rank";
    /** @description The order field */
    accountingOrder?: "code";
    /** @description Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related, participants: by object type. Check the entire documentation to verify the usual scopes requested for the types returned */
    calendarEventEmbed?: ("company" | "contact" | "individual" | "owner" | "related" | "participants" | "acl")[];
    /** @description The order field */
    calendarEventOrder?: "id" | "due_date";
    /** @description The order field */
    profileOrder?: "name" | "id";
    /** @description Field on which to sort the data */
    staffOrder?: "id" | "name";
    /** @description Flag to trigger validation only (set to true to validate payload without persisting data) */
    verify?: boolean;
    /** @description Additional object included in the result. <br/> <strong>Aggregations by date only works with due_date filter : </strong> <br/> - For aggregations.by_day_and_event, maximum interval of due_date is 90 days <br/> - For aggregations.by_month_and_event, maximum interval of due_date is 365 days */
    accountingEmbed?: ("aggregations" | "aggregations.credit_debit")[];
    /** @description Additional object included in the result */
    opportuntiyCategoryEmbed?: "sources"[];
    /** @description Additional object included in the result */
    corporationStaffEmbed?: ("predicted_licenses" | "aggregations.count_licenses")[];
    /** @description Additional object included in the result */
    invoiceEmbed?: (("acl" | "owner" | "related" | "contact" | "individual" | "company" | "fiscal_year" | "currency" | "smart_tags" | "deposits") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Additional object included in the result */
    invoiceOneEmbed?: (("acl" | "payment_terms" | "owner" | "related" | "contact" | "individual" | "company" | "fiscal_year" | "currency" | "automatic_dunning" | "smart_tags" | "discount_incl_taxes" | "deposits") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Order field */
    invoiceOrder?: "id" | "number" | "created" | "date" | "amount" | "due_date";
    /** @description Additional object included in the result */
    creditNoteEmbed?: (("fiscal_year" | "related" | "contact" | "company" | "individual" | "currency" | "owner" | "acl" | "smart_tags") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Additional object included in the result */
    creditNoteOneEmbed?: (("fiscal_year" | "related" | "contact" | "company" | "individual" | "currency" | "owner" | "acl" | "smart_tags" | "discount_incl_taxes") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Order field */
    creditNoteOrder?: "id" | "number" | "created" | "date" | "amount";
    /** @description Order field */
    itemOrder?: "id" | "created_at";
    /** @description Type of import */
    importType: "product" | "product-variation" | "company" | "service" | "service-price" | "product-price";
    /** @description Additional object included in the result */
    orderEmbed?: (("acl" | "related" | "contact" | "individual" | "company" | "fiscal_year" | "currency" | "smart_tags" | "owner") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Additional object included in the result */
    orderEmbedOne?: (("acl" | "related" | "contact" | "individual" | "company" | "fiscal_year" | "currency" | "smart_tags" | "owner" | "payment_terms" | "discount_incl_taxes") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
    /** @description Order field */
    orderOrder?: "id" | "number" | "created" | "date" | "amount" | "due_date" | "order_status";
    /** @description The order field */
    objectiveOrder?: "id" | "name" | "date_start" | "date_end" | "created_at" | "updated_at" | "progress" | "expected_amount" | "period" | "duration" | "assignee" | "item";
    /** @description Example : `embed[]=created_by&embed[]=modified_by` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - created_by: `staffs.read`<br /> - modified_by: `staffs.read`<br /> */
    objectiveEmbed?: ("created_by" | "modified_by" | "objective_results")[];
    /** @description filter specific objective categories */
    objectiveCategory?: "turnover"[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Comments List
   * @description Get a list of comments
   */
  "get-comments": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["commentItemEmbed"];
        order?: components["parameters"]["commentOrder"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CommentItem"][];
          };
        };
      };
    };
  };
  /**
   * Create a comment
   * @description Create a comment
   */
  "create-comment": {
    parameters: {
      query?: {
        embed?: components["parameters"]["commentItemEmbed"];
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentCreateItem"];
      };
    };
    responses: {
      /** @description Comment created */
      201: {
        content: {
          "application/json": components["schemas"]["CommentItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Get comment details
   * @description Fetch comment details
   */
  "get-comment": {
    parameters: {
      query?: {
        embed?: components["parameters"]["commentItemEmbed"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Comment id */
        id: number;
      };
    };
    responses: {
      /** @description Comment fetched */
      200: {
        content: {
          "application/json": components["schemas"]["CommentItem"];
        };
      };
    };
  };
  /**
   * Update a comment
   * @description Udate a comment
   */
  "update-comment": {
    parameters: {
      query?: {
        embed?: components["parameters"]["commentItemEmbed"];
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Comment id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentUpdateItem"];
      };
    };
    responses: {
      /** @description Comment updated */
      200: {
        content: {
          "application/json": components["schemas"]["CommentItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Delete a comment
   * @description Remove a comment
   */
  "delete-comment": {
    parameters: {
      path: {
        /** @description Comment id */
        id: number;
      };
    };
    responses: {
      /** @description Comment deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Search comments
   * @description Search through comments
   */
  "search-comments": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["commentItemEmbed"];
        order?: components["parameters"]["commentOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentFilters"];
      };
    };
    responses: {
      /** @description Comments list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CommentItem"][];
          };
        };
      };
    };
  };
  /**
   * Companies List
   * @description Get a list of companies
   */
  "get-companies": {
    parameters: {
      query?: {
        /** @description The order field */
        order?: "name" | "id" | "created_at" | "updated_at";
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Companies list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies"]["post"]["responses"]["201"]["content"]["application/json"]["schema"][];
          };
        };
      };
    };
  };
  /**
   * Create a company
   * @description Create a company
   */
  "create-company": {
    parameters: {
      query?: {
        /** @description Example : `embed[]=invoicing_contact&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - main_contact, dunning_contact, invoicing_contact: `contacts.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> */
        embed?: (("invoicing_address" | "delivery_address" | "main_contact" | "dunning_contact" | "invoicing_contact" | "opportunities" | "estimates" | "invoices" | "orders" | "deliveries" | "acl" | "smart_tags") | string)[];
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "prospect" | "client" | "supplier";
          /**
           * @description Company name
           * @example Example company
           */
          name: string;
          /**
           * Format: email
           * @description Company email
           * @example contact@example-company.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Company website
           * @example http://example-company.com
           */
          website?: string | null;
          /**
           * @description Company phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Company mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Company Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          legal_france?: {
            /**
             * @description Company Siret
             * @example 73282932000074
             */
            siret?: string | null;
            /**
             * @description Company Siren
             * @example 732829320
             */
            siren?: string | null;
            /**
             * @description VAT number
             * @example FR99999999999
             */
            vat?: string | null;
            /**
             * @description APE/NAF Code
             * @example 4711C
             */
            ape_naf_code?: string | null;
            /**
             * @description Company type
             * @example SAS
             */
            company_type?: string | null;
            /**
             * @description RCS immatriculation code
             * @example RCS xxxxx
             */
            rcs_immatriculation?: string | null;
          };
          /**
           * @description Company Capital
           * @example 4000
           */
          capital?: string | null;
          /**
           * @description Company reference
           * @example CLI-1654
           */
          reference?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: {
            /**
             * Format: url
             * @description Twitter account
             * @example https://twitter.com/example
             */
            twitter?: string | null;
            /**
             * Format: url
             * @description Facebook account
             * @example https://facebook.com/example
             */
            facebook?: string | null;
            /**
             * Format: url
             * @description Linkedin account
             * @example https://linkedin.com/example
             */
            linkedin?: string | null;
            /**
             * Format: url
             * @description Viadeo account
             * @example https://viadeo.com/example
             */
            viadeo?: string | null;
          };
          /**
           * @description Company Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Company accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Company accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          /**
           * @description Owner of the company (Staff id expected)
           * @example 112
           */
          owner_id?: number | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description Company business segment */
          business_segment?: number | null;
          /** @description Number of employees of company */
          number_of_employees?: number | null;
          /** @description list of campaign type subscribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
          /**
           * Format: date-time
           * @description Date of creation of the company
           */
          created?: string;
        };
      };
    };
    responses: {
      /** @description Company created */
      201: {
        content: {
          "application/json": components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["company"] & ({
            _embed?: (({
              /** @description Invocing address */
              invoicing_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
              /** @description Delivery address */
              delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
              /** @description Main contact */
              main_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
              /** @description Dunning contact */
              dunning_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
              /** @description Invoicing contact */
              invoicing_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
              /**
               * @description Count of opportunities
               * @example 2
               */
              opportunities?: number | null;
              /**
               * @description Count of estimates
               * @example 2
               */
              estimates?: number | null;
              /**
               * @description Count of invoices
               * @example 2
               */
              invoices?: number | null;
              /**
               * @description Count of orders
               * @example 2
               */
              orders?: number | null;
              /**
               * @description Count of deliveries
               * @example 2
               */
              deliveries?: number | null;
              /** @description Company acl */
              acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["0"] | null;
              /** @description Smart-tags linked */
              smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
            }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"]) | null;
          });
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Search companies
   * @description Search companies
   */
  "search-companies": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Company filters */
          filters: {
            /**
             * Created at
             * @description Filter the company list by creation date
             */
            created?: {
              /**
               * Format: date-time
               * @example 2020-01-01T00:00:00+01:00
               */
              start?: string;
              /**
               * Format: date-time
               * @example 2020-02-01T00:00:00+01:00
               */
              end?: string;
            };
            /**
             * Updated at
             * @description Filter the company list by last update date
             */
            updated_at?: {
              /**
               * Format: date-time
               * @example 2020-01-01T00:00:00+01:00
               */
              start?: string;
              /**
               * Format: date-time
               * @example 2020-02-01T00:00:00+01:00
               */
              end?: string;
            };
            /**
             * Name
             * @description Filter the company list by name (exact search)
             * @example Company
             */
            name?: string;
            /**
             * Email
             * @description Filter the company list by email (exact search)
             * @example contact@example.com
             */
            email?: string;
            /**
             * Type
             * @description Filter the company list by type
             */
            type?: ("prospect" | "client" | "supplier") | (("prospect" | "client" | "supplier")[]);
            /**
             * Is archived
             * @description Filter the company list by is_archived
             * @example false
             */
            is_archived?: boolean;
            /**
             * Contacts
             * @description Filter the company list for the given contacts
             */
            contacts?: number[];
            /**
             * Siret
             * @description Filter the company list by siret
             * @example 36252187900034
             */
            siret?: string;
            /**
             * Companies
             * @description Filter companies list by ID
             * @example [
             *   12,
             *   22
             * ]
             */
            id?: number[];
            /**
             * Country code
             * @description Filter the company list by country code (main address only)
             * @example FR
             */
            country_code?: string;
            /**
             * Postal code
             * @description Filter the company list by postal code (main address only)
             * @example [
             *   "17001",
             *   "17002"
             * ]
             */
            postal_code?: string[];
            favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
          };
        };
      };
    };
    responses: {
      /** @description Companies list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies"]["post"]["responses"]["201"]["content"]["application/json"]["schema"][];
          };
        };
      };
    };
  };
  /**
   * List companies favourite filters
   * @description List favourite filters for faster access to specific companies <br />> Favourite filters can be applied directly to company search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-company-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Get Company
   * @description Fetch company informations
   */
  "get-company": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Company id */
        id: number;
      };
    };
    responses: {
      /** @description Company fetched */
      200: {
        content: {
          "application/json": paths["/companies"]["post"]["responses"]["201"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /**
   * Update Company
   * @description Update Company informations
   */
  "update-company": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Company id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Company name
           * @example Example company
           */
          name?: string;
          /**
           * Format: email
           * @description Company email
           * @example contact@example-company.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Company website
           * @example http://example-company.com
           */
          website?: string | null;
          /**
           * @description Company phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Company mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Company Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          legal_france?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["legal_france"];
          /**
           * @description Company Capital
           * @example 4000
           */
          capital?: string | null;
          /**
           * @description Company reference
           * @example CLI-1654
           */
          reference?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
          /**
           * @description Company Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Company accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Company accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          /**
           * @description Owner of the company (Staff id expected)
           * @example 112
           */
          owner_id?: number | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description Company business segment */
          business_segment?: number | null;
          /** @description Number of employees of company */
          number_of_employees?: number | null;
          /** @description list of campaign type subcribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
        };
      };
    };
    responses: {
      /** @description Company updated */
      200: {
        content: {
          "application/json": paths["/companies"]["post"]["responses"]["201"]["content"]["application/json"]["schema"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Delete company
   * @description Remove a company
   */
  "delete-company": {
    parameters: {
      path: {
        /** @description Company id */
        id: number;
      };
    };
    responses: {
      /** @description Company deleted */
      204: {
        content: never;
      };
    };
  };
  /** Get company addresses */
  "get-company-addresses": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    responses: {
      /** @description Addresses fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Address"][];
          };
        };
      };
    };
  };
  /** Create a company address */
  "create-company-address": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressCreate"];
      };
    };
    responses: {
      /** @description Address created */
      201: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /** Get a company address */
  "get-company-address": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address fetched */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  /** Update a company address */
  "update-company-address": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Address id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressUpdate"];
      };
    };
    responses: {
      /** @description Address updated */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /** Delete a company address */
  "delete-company-address": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Record payment on a company
   * @description Record a payment on a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-company-payment": {
    parameters: {
      path: {
        /** @description Company identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreatePayment"];
      };
    };
    responses: {
      /** @description Payment created */
      201: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  /** Get a company contacts */
  "get-company-contacts": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["contactEmbed"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Company id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ContactCollectionItem"][];
          };
        };
      };
    };
  };
  /** Update a contact of company link */
  "update-company-contact": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateLinkCompanyContact"];
      };
    };
    responses: {
      /** @description Contact updated */
      200: {
        content: never;
      };
    };
  };
  /** Link a contact at one company */
  "link-company-contact": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkCompanyContact"];
      };
    };
    responses: {
      /** @description Contact already linked */
      200: {
        content: never;
      };
      /** @description Contact linked */
      201: {
        content: never;
      };
    };
  };
  /** Unlink a contact of company */
  "unlink-company-contact": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description Contact unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * Company custom fields List
   * @description Get list of custom fields for a company
   */
  "get-company-custom-fields": {
    parameters: {
      query?: {
        /** @description The order field */
        order?: "id";
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Company id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ((paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"] & (({
                /**
                 * @description Value of custom field
                 * @example Lorem
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["1"] & (({
                /**
                 * @description Value of custom field
                 * @example <p>Lorem ipsum in dolor.</p>
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["2"] & (({
                /**
                 * Format: email
                 * @description Email
                 * @example john.doe@email.com
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["3"] & (({
                /**
                 * Format: url
                 * @description URL
                 * @example https://domain.com
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["4"] & (({
                /**
                 * @description Value of custom field, numeric value
                 * @example 15
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["5"] & (({
                /**
                 * Format: date
                 * @description Date
                 * @example 2021-03-22
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["6"] & (({
                /**
                 * @description Time
                 * @example 05:30
                 */
                value?: string | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["7"] & (({
                value?: {
                  /**
                   * @description Amount, numeric value
                   * @example 15.26
                   */
                  amount?: string | null;
                  /**
                   * @description Currency (ISO 4217)
                   * @example EUR
                   */
                  currency?: string | null;
                };
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["8"] & (({
                value?: {
                  /**
                   * @description Value of custom field, numeric value
                   * @example 15.26
                   */
                  number?: string | null;
                  /**
                   * @description Unit ID
                   * @example 1
                   */
                  unit_id?: number | null;
                };
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["9"] & (({
                /**
                 * @description Selected choice
                 * @example 12345
                 */
                value?: number | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["10"] & (({
                /**
                 * @description Value of custom field
                 * @example 12345
                 */
                value?: number | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["11"] & (({
                /**
                 * @description List of selected choice
                 * @example { 1, 2, 3 }
                 */
                value?: number[] | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["12"] & (({
                /**
                 * @description Value of custom field
                 * @example true
                 */
                value?: boolean | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["13"] & (({
                /** @description List of company/inviduals */
                value?: {
                    /**
                     * @description company/individual's type
                     * @example company
                     */
                    type?: string;
                    /**
                     * @description company/individual's ID
                     * @example 15
                     */
                    id?: number;
                  }[] | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["14"] & (({
                /**
                 * @description List of Contact IDs
                 * @example { 1, 2, 3 }
                 */
                value?: number[] | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["15"] & (({
                /**
                 * @description List of Staff IDs
                 * @example { 1, 2, 3 }
                 */
                value?: number[] | null;
              }) | null)) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["16"] & (({
                /**
                 * @description List of Item IDs
                 * @example { 1, 2, 3 }
                 */
                value?: number[] | null;
              }) | null)))[];
          };
        };
      };
    };
  };
  /**
   * Update Company custom fields
   * @description Update list of custom fields for a company
   */
  "update-company-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Company id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": ({
            /**
             * @description Custom Field id
             * @example 1
             */
            id: number;
            value: ((string | null) | (({
              /**
               * @description Amount. Will use the default one if null. Numeric value
               * @example 15.26
               */
              amount: string | null;
              /**
               * @description Currency (ISO 4217).  Will use the default one if null
               * @example EUR
               */
              currency: string | null;
            }) | null) | (({
              /**
               * @description Value of custom field. Numeric value
               * @example 15.26
               */
              number: string | null;
              /**
               * @description Unit ID
               * @example 1
               */
              unit_id: number | null;
            }) | null) | (number | null) | (number[] | null) | (boolean | null)) | null;
          })[];
      };
    };
    responses: {
      /** @description Company's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Company smart tags List
   * @description Get list of smart tags for a company
   */
  "get-company-smart-tags": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            /** smart tag */
            data?: {
                /**
                 * @description value of smart tags
                 * @example smart tag
                 */
                value?: string;
                /**
                 * @description id of smart tags
                 * @example 55
                 */
                id?: number;
              }[];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to company
   * @description Link a list of smart tag to a company
   */
  "link-company-smart-tags": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": (({
            /**
             * @description value of smart tags
             * @example smart tag
             */
            value: string;
          } | {
            /**
             * @description id of smart tags
             * @example 55
             */
            id: number;
          })[]) | null;
      };
    };
    responses: {
      /** @description Smart tag linked */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * List directories and files of a company
   * @description List directories and files attached to a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-company-files": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to a company
   * @description Attach file to a company <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-company-file": {
    parameters: {
      path: {
        /** @description Company id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Companies contact
   * @description Get the companies of a contact
   */
  "get-contact-companies": {
    parameters: {
      path: {
        /** @description Contact id */
        id: number;
      };
    };
    responses: {
      /** @description Companies list linked to the contact */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ({
                /**
                 * @description Unique ID
                 * @example 6657
                 */
                id?: number;
                /** @enum {string} */
                type?: "prospect" | "client" | "supplier";
                /**
                 * @description Company name
                 * @example Example company
                 */
                name?: string;
                /**
                 * Format: email
                 * @description Company email
                 * @example contact@example-company.com
                 */
                email?: string | null;
                /**
                 * Format: url
                 * @description Company website
                 * @example http://example-company.com
                 */
                website?: string | null;
                /**
                 * @description Company phone number
                 * @example +33100000000
                 */
                phone_number?: string | null;
                /**
                 * @description Company mobile number
                 * @example +33600000000
                 */
                mobile_number?: string | null;
                /**
                 * @description Company Fax number
                 * @example +33100000000
                 */
                fax_number?: string | null;
                legal_france?: {
                  /**
                   * @description Company Siret
                   * @example 73282932000074
                   */
                  siret?: string | null;
                  /**
                   * @description Company Siren
                   * @example 732829320
                   */
                  siren?: string | null;
                  /**
                   * @description VAT number
                   * @example FR99999999999
                   */
                  vat?: string | null;
                  /**
                   * @description APE/NAF Code
                   * @example 4711C
                   */
                  ape_naf_code?: string | null;
                  /**
                   * @description Company type
                   * @example SAS
                   */
                  company_type?: string | null;
                  /**
                   * @description RCS immatriculation code
                   * @example RCS xxxxx
                   */
                  rcs_immatriculation?: string | null;
                };
                /**
                 * @description Company Capital
                 * @example 4000
                 */
                capital?: string | null;
                /**
                 * @description Company reference
                 * @example CLI-1654
                 */
                reference?: string | null;
                /**
                 * @description Note on company
                 * @example An handed-written note describing this company
                 */
                note?: string;
                /**
                 * @description Auxiliary code
                 * @example 0EX11C
                 */
                auxiliary_code?: string | null;
                social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
                /**
                 * @description Company Rate category id
                 * @example 9956
                 */
                rate_category_id?: number | null;
                /**
                 * @description Main contact unique ID
                 * @example 6654
                 */
                main_contact_id?: number | null;
                /**
                 * @description Dunning contact unique ID
                 * @example 6654
                 */
                dunning_contact_id?: number | null;
                /**
                 * @description Invoicing contact unique ID
                 * @example 6654
                 */
                invoicing_contact_id?: number | null;
                /**
                 * @description Invoicing address unique ID
                 * @example 9987
                 */
                invoicing_address_id?: number | null;
                /**
                 * @description Delivery address unique ID
                 * @example 6547
                 */
                delivery_address_id?: number | null;
                /**
                 * @description Company accounting code id
                 * @example 12345
                 */
                accounting_code_id?: number | null;
                /**
                 * @description Company accouting purchase code id
                 * @example 98556
                 */
                accounting_purchase_code_id?: number | null;
                owner?: components["schemas"]["Model"]["owner"]["allOf"]["0"];
                /**
                 * Format: date-time
                 * @description Datetime of creating company
                 * @example 2020-05-29T11:22:03+02:00
                 */
                created?: string;
                /**
                 * Format: date-time
                 * @description Datetime of the last update of the company
                 * @example 2020-05-29T11:22:03+02:00
                 */
                updated_at?: string;
                /**
                 * @description Status archived or not
                 * @example false
                 */
                is_archived?: boolean;
                /** @description Company business segment */
                business_segment?: {
                  /** @example 3 */
                  id?: number;
                  /** @example Software publisher / Digital services company */
                  label?: string;
                } | null;
                /** @description Number of employees of company */
                number_of_employees?: {
                  /** @example 1 */
                  id?: number;
                  /** @example From 1 to 5 */
                  label?: string;
                } | null;
                /** @description list of campaign type subcribed */
                marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
              })[];
          };
        };
      };
    };
  };
  /**
   * Smart tags autocomplete
   * @description Autocompled for smart tags
   */
  "autocomplete-smart-tags": {
    parameters: {
      query: {
        /** @description Word for the research of autocomplete */
        q: string;
      };
      path: {
        /** @description Linked type of smart tags searched */
        linkedtype: "company" | "contact" | "individual";
      };
    };
    responses: {
      /** @description Smart tags find */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Delete a smart tags
   * @description Delete a smart tags <br><br><i>Note that deleting a smart tags will also remove it's presence on any object he was linked to.<br>To unlink a smart-tag (without deleting it), please use the "Link smart-tags to ..." endpoint</i>
   */
  "delete-smart-tags": {
    parameters: {
      path: {
        /** @description Smart tags ID */
        id: number;
      };
    };
    responses: {
      /** @description Smart tags deleted */
      200: {
        content: never;
      };
    };
  };
  /**
   * Custom Fields List
   * @description Get a list of custom fields
   */
  "get-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Custom fields fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ((({
                /**
                 * @description Customfield id
                 * @example 6657
                 */
                id?: number;
                /**
                 * @description Name of custom field
                 * @example Business sector
                 */
                name?: string;
                /**
                 * @description Machine name of custom field
                 * @example business-sector
                 */
                code?: string;
                /**
                 * @description Description of custom field
                 * @example A text describing this custom field.
                 */
                description?: string;
                /**
                 * @description Custom field must be completed or not
                 * @example false
                 */
                mandatory?: boolean;
                /**
                 * @description Rank of custom field in group
                 * @example 1
                 */
                rank?: number;
                /** @description List of objects the custom field can be used on */
                related_object?: ("document" | "contact" | "client" | "prospect" | "supplier" | "product" | "service" | "ticket" | "task" | "purchase" | "opportunity" | "project" | "staff" | "site")[];
                /** @description Full custom field group object */
                customfield_group?: {
                  /**
                   * @description Group id
                   * @example 123
                   */
                  id?: number;
                  /**
                   * @description Group name
                   * @example intervention
                   */
                  name?: string;
                  /**
                   * @description Group code
                   * @example groupintervention
                   */
                  code?: string;
                  /**
                   * @description Group is open by default or not
                   * @example false
                   */
                  open_by_default?: boolean;
                };
              }) & ({
                /**
                 * @description Simple text
                 * @enum {string}
                 */
                type?: "simple-text";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value
                   * @example Simple text
                   */
                  default_value?: string | null;
                  /**
                   * @description Min characters
                   * @example 0
                   */
                  char_min?: number | null;
                  /**
                   * @description Max characters
                   * @example 250
                   */
                  char_max?: number | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Rich text
                 * @enum {string}
                 */
                type?: "rich-text";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value
                   * @example Rich text
                   */
                  default_value?: string | null;
                  /**
                   * @description Min characters
                   * @example 0
                   */
                  char_min?: number | null;
                  /**
                   * @description Max characters
                   * @example 500
                   */
                  char_max?: number | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Email address
                 * @enum {string}
                 */
                type?: "email";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * Format: email
                   * @description Default value
                   * @example contact@domain.fr
                   */
                  default_value?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Url
                 * @enum {string}
                 */
                type?: "url";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * Format: uri
                   * @description Default value
                   * @example www.sellsy.com
                   */
                  default_value?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Numeric value
                 * @enum {string}
                 */
                type?: "numeric";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value, numeric value only
                   * @example 5
                   */
                  default_value?: string | null;
                  /**
                   * @description Min value, numeric value only
                   * @example 0
                   */
                  min_value?: string | null;
                  /**
                   * @description Max value, numeric value only
                   * @example 500
                   */
                  max_value?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Date
                 * @enum {string}
                 */
                type?: "date";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * Format: date
                   * @description Min date
                   * @example 2002-01-01
                   */
                  min_date?: string | null;
                  /**
                   * Format: date
                   * @description Max date
                   * @example 2017-01-01
                   */
                  max_date?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Time
                 * @enum {string}
                 */
                type?: "time";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Min hour
                   * @example 00:00
                   */
                  min_hour?: string | null;
                  /**
                   * @description Max hour
                   * @example 08:45
                   */
                  max_hour?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Amount with currency
                 * @enum {string}
                 */
                type?: "amount";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value, numeric value only
                   * @example 15.36
                   */
                  default_value?: string | null;
                  /**
                   * @description Min value, numeric value only
                   * @example 0.00
                   */
                  min_value?: string | null;
                  /**
                   * @description Max value, numeric value only
                   * @example 1898.32
                   */
                  max_value?: string | null;
                  /**
                   * @description Currency (ISO 4217)
                   * @example EUR
                   */
                  currency?: string | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Numeric field with unit
                 * @enum {string}
                 */
                type?: "numeric-with-unit";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value, numeric value only
                   * @example 15.35
                   */
                  default_value?: string | null;
                  /**
                   * @description Min value, numeric value only
                   * @example 0.00
                   */
                  min_value?: string | null;
                  /**
                   * @description Max value, numeric value only
                   * @example 100.25
                   */
                  max_value?: string | null;
                  /**
                   * @description Type of unit
                   * @enum {string|null}
                   */
                  unit?: "unit" | "package" | "m2" | "m3" | "ton" | "kg" | "g" | "metres" | "days" | "hour" | "minutes" | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Radio button
                 * @enum {string}
                 */
                type?: "radio";
                /** @description Available values list */
                parameters?: {
                  /** @description Values list */
                  items?: {
                      /**
                       * @description Id of label
                       * @example 15
                       */
                      id?: number;
                      /**
                       * @description Label of checkbox item
                       * @example Label
                       */
                      label?: string;
                      /**
                       * @description Checked
                       * @example false
                       */
                      checked?: boolean;
                      /**
                       * @description Rank of item
                       * @example 1
                       */
                      rank?: number;
                    }[];
                };
              }) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Select
                 * @enum {string}
                 */
                type?: "select";
                /** @description Available values list */
                parameters?: {
                  /** @description Values list */
                  items?: {
                      /**
                       * @description Id of label
                       * @example 15
                       */
                      id?: number;
                      /**
                       * @description Label of checkbox item
                       * @example Label
                       */
                      label?: string;
                      /**
                       * @description Checked
                       * @example false
                       */
                      checked?: boolean;
                      /**
                       * @description Rank of item
                       * @example 1
                       */
                      rank?: number;
                    }[];
                };
              }) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Multiple choice
                 * @enum {string}
                 */
                type?: "checkbox";
                /** @description Available values list */
                parameters?: {
                  /**
                   * @description Number minimum of checked values
                   * @example 1
                   */
                  min?: number | null;
                  /**
                   * @description Number maximum of checked values
                   * @example 3
                   */
                  max?: number | null;
                  /** @description Values list */
                  items?: {
                      /**
                       * @description Id of label
                       * @example 15
                       */
                      id?: number;
                      /**
                       * @description Label of checkbox item
                       * @example Label
                       */
                      label?: string;
                      /**
                       * @description Checked
                       * @example false
                       */
                      checked?: boolean;
                      /**
                       * @description Rank of item
                       * @example 1
                       */
                      rank?: number;
                    }[];
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & ({
                /**
                 * @description Yes / No
                 * @enum {string}
                 */
                type?: "boolean";
                /** @description Field type parameters */
                parameters?: {
                  /**
                   * @description Default value
                   * @example false
                   */
                  default_value?: boolean | null;
                };
              })) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Client/Prospect/Supplier
                 * @enum {string}
                 */
                type?: "company-individual";
                /** @description Custom settings for this field type */
                parameters?: {
                  /**
                   * @description Between 1 and 10
                   * @example 1
                   */
                  number_of_values?: number;
                  /**
                   * @description Enabled for client-type companies
                   * @example true
                   */
                  client?: boolean;
                  /**
                   * @description Enabled for prospect-type companies
                   * @example false
                   */
                  prospect?: boolean;
                  /**
                   * @description Enabled for supplier-type companies
                   * @example false
                   */
                  supplier?: boolean;
                  /**
                   * @description Add address information on PDFs
                   * @example false
                   */
                  address_on_pdf?: boolean;
                  /**
                   * @description Add email information on PDFs
                   * @example false
                   */
                  email_on_pdf?: boolean;
                  /**
                   * @description Add phone information on PDFs
                   * @example false
                   */
                  phone_on_pdf?: boolean;
                  /**
                   * @description Add mobile information on PDFs
                   * @example false
                   */
                  mobile_on_pdf?: boolean;
                };
              }) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Contact
                 * @enum {string}
                 */
                type?: "contact";
                /** @description Custom settings for this field type */
                parameters?: {
                  /**
                   * @description Between 1 and 10
                   * @example 2
                   */
                  number_of_values?: number;
                  /**
                   * @description Add address information on PDFs
                   * @example false
                   */
                  address_on_pdf?: boolean;
                  /**
                   * @description Add email information on PDFs
                   * @example false
                   */
                  email_on_pdf?: boolean;
                  /**
                   * @description Add phone information on PDFs
                   * @example false
                   */
                  phone_on_pdf?: boolean;
                  /**
                   * @description Add mobile information on PDFs
                   * @example false
                   */
                  mobile_on_pdf?: boolean;
                };
              }) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Staff member
                 * @enum {string}
                 */
                type?: "staff";
                /** @description Custom settings for this field type */
                parameters?: {
                  /**
                   * @description Between 1 and 10
                   * @example 2
                   */
                  number_of_values?: number;
                  /**
                   * @description Add email information on PDFs
                   * @example false
                   */
                  email_on_pdf?: boolean;
                  /**
                   * @description Add phone information on PDFs
                   * @example false
                   */
                  phone_on_pdf?: boolean;
                  /**
                   * @description Add mobile information on PDFs
                   * @example false
                   */
                  mobile_on_pdf?: boolean;
                };
              }) | (paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"]["allOf"]["0"] & {
                /**
                 * @description Products/services
                 * @enum {string}
                 */
                type?: "item";
                /** @description Custom settings for this field type */
                parameters?: {
                  /**
                   * @description Between 1 and 10
                   * @example 1
                   */
                  number_of_values?: number;
                  /**
                   * @description Enabled for product-type items
                   * @example true
                   */
                  product?: boolean;
                  /**
                   * @description Enabled for service-type items
                   * @example false
                   */
                  service?: boolean;
                };
              }))[];
          };
        };
      };
    };
  };
  /**
   * Get custom field
   * @description Fetch a custom field informations
   */
  "get-custom-field": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Custom field id */
        id: number;
      };
    };
    responses: {
      /** @description Custom field fetched */
      200: {
        content: {
          "application/json": paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["0"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["1"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["2"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["3"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["4"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["5"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["6"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["7"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["8"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["9"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["10"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["11"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["12"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["13"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["14"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["15"] | paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"]["anyOf"]["16"];
        };
      };
    };
  };
  /**
   * Custom Fields Search
   * @description Search custom fields
   */
  "search-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Custom Fields filters */
          filters: {
            /**
             * Related object
             * @description Filter the custom fields by object they can be used on
             * @enum {string}
             */
            related_object?: "document" | "contact" | "client" | "prospect" | "supplier" | "item" | "service" | "ticket" | "task" | "purchase" | "opportunity" | "project" | "staff" | "site";
            /** @description Filter custom fields according to whether they are required or not. */
            is_required?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Custom fields fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /** Get all estimates */
  "get-estimates": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["SaleEmbed"];
        order?: components["parameters"]["SaleOrder"];
      };
    };
    responses: {
      /** @description Get a list of estimate */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateCollection"];
        };
      };
    };
  };
  /**
   * Create estimate
   * @description Create an estimate
   */
  "create-estimate": {
    parameters: {
      query?: {
        embed?: components["parameters"]["SaleEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EstimateCreate"];
      };
    };
    responses: {
      /** @description Estimate created */
      201: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["EstimateOne"] & components["schemas"]["SaleEmbed"];
        };
      };
    };
  };
  /** Search estimates */
  "search-estimates": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["SaleEmbed"];
        order?: components["parameters"]["SaleOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EstimateFilters"];
      };
    };
    responses: {
      /** @description Get a list of estimate */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateCollection"] & {
            aggregations?: components["schemas"]["EstimateAggregations"];
          };
        };
      };
      /** @description Validation and logic errors */
      400: {
        content: never;
      };
    };
  };
  /**
   * Estimate custom fields List
   * @description Get list of custom fields for an Estimate
   */
  "get-estimate-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update Estimate custom fields
   * @description Update list of custom fields for an estimate
   */
  "update-estimate-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Estimate's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * List estimates favourite filters
   * @description List favourite filters for faster access to specific estimates <br />> Favourite filters can be applied directly to estimate search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-estimate-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /** Get an estimate */
  "get-estimate": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["EstimateOneEmbed"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
    responses: {
      /** @description get an estimate */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateOne"] & components["schemas"]["EstimateOneEmbed"];
        };
      };
      /** @description Estimate no found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update estimate
   * @description Update an estimate
   */
  "update-estimate": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["EstimateOneEmbed"];
        embed?: components["parameters"]["SaleEmbed"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EstimateUpdate"];
      };
    };
    responses: {
      /** @description Estimate updated */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["EstimateOne"] & components["schemas"]["SaleEmbed"];
        };
      };
    };
  };
  /**
   * Update estimate status
   * @description Update an estimate status
   */
  "update-estimate-status": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["SaleEmbed"];
      };
      path: {
        /** @description Estimate id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EstimateStatusUpdate"];
      };
    };
    responses: {
      /** @description Estimate step updated */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["EstimateOne"] & components["schemas"]["SaleEmbed"];
        };
      };
    };
  };
  /**
   * Compute an estimate
   * @description Compute an estimate
   */
  "compute-estimate": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EstimateCreate"];
      };
    };
    responses: {
      /** @description Estimate computed successfully */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["EstimateCompute"];
        };
      };
    };
  };
  /**
   * List directories and files of an estimate
   * @description List directories and files attached to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-estimate-files": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an estimate
   * @description Attach file to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-estimate-file": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Estimate payments list
   * @description Get list of payments for an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-estimate-payments": {
    parameters: {
      path: {
        /** @description Estimate ID */
        id: number;
      };
    };
    responses: {
      /** @description Payments list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Link payment to estimate
   * @description Link a payment to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-estimate-payment": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkPaymentToDocument"];
      };
    };
    responses: {
      /** @description Payments list attached to the estimate */
      201: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Unlink payment from estimate
   * @description Unlink a payment from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-estimate-payment": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    responses: {
      /** @description Payment unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * Estimate smart-tags list
   * @description Get list of smart-tags for an estimate
   */
  "get-estimate-smart-tags": {
    parameters: {
      path: {
        /** @description Estimate ID */
        id: number;
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to estimate
   * @description Link a list of smart-tags to an estimate
   */
  "link-estimate-smart-tags": {
    parameters: {
      path: {
        /** @description Estimate ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link prime to estimate
   * @deprecated
   * @description Link a prime to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-estimate-prime": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Prime linked */
      201: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a prime from an estimate
   * @deprecated
   * @description Unlink a prime from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-estimate-prime": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    responses: {
      /** @description Prime unlinked */
      204: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested prime was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Link discount including taxes to estimate
   * @description Link a discount including taxes to an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-estimate-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Discount linked */
      201: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a discount including taxes from an estimate
   * @description Unlink a discount including taxes from an estimate <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-estimate-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Estimate identifier */
        estimateId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    responses: {
      /** @description Discount unlinked */
      204: {
        content: never;
      };
      /** @description Either Discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested discount was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all orders
   * @description Get all orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-orders": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["orderEmbed"];
        order?: components["parameters"]["orderOrder"];
      };
    };
    responses: {
      /** @description Orders list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["Order"][];
          };
        };
      };
    };
  };
  /**
   * Create an order
   * @description Create an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-order": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["orderEmbedOne"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderCreate"];
      };
    };
    responses: {
      /** @description Order created */
      201: {
        content: {
          "application/json": components["schemas"]["OrderOne"];
        };
      };
    };
  };
  /**
   * Compute an order
   * @description Compute an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "compute-order": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderCreate"];
      };
    };
    responses: {
      /** @description Order computed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["OrderCompute"];
        };
      };
    };
  };
  /**
   * Get order
   * @description Get an order by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-order": {
    parameters: {
      query?: {
        embed?: components["parameters"]["orderEmbedOne"];
      };
      path: {
        /** @description Order ID */
        id: number;
      };
    };
    responses: {
      /** @description Order fetched */
      200: {
        content: {
          "application/json": components["schemas"]["OrderOne"];
        };
      };
    };
  };
  /**
   * Update an order
   * @description Update a given order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-order": {
    parameters: {
      query?: {
        embed?: components["parameters"]["orderEmbedOne"];
      };
      path: {
        /** @description Order ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderUpdate"];
      };
    };
    responses: {
      /** @description Order updated */
      200: {
        content: {
          "application/json": components["schemas"]["OrderOne"];
        };
      };
    };
  };
  /**
   * Search orders
   * @description Search orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-orders": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["orderEmbed"];
        order?: components["parameters"]["orderOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrderFilters"];
      };
    };
    responses: {
      /** @description Orders list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Order"][];
          };
        };
      };
    };
  };
  /**
   * Order payments list
   * @description Get list of payments for an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-order-payments": {
    parameters: {
      path: {
        /** @description Order ID */
        id: number;
      };
    };
    responses: {
      /** @description Payments list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Order smart tags List
   * @description Get list of smart tags for an order
   */
  "get-order-smart-tags": {
    parameters: {
      path: {
        /** @description Order id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to an order
   * @description Link a list of smart tag to an order
   */
  "link-order-smart-tags": {
    parameters: {
      path: {
        /** @description Order id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart tag linked */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Order custom fields List
   * @description Get list of custom fields for an order
   */
  "get-order-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Order id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update Order custom fields
   * @description Update list of custom fields for an order
   */
  "update-order-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Order id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Order's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * List orders favourite filters
   * @description List favourite filters for faster access to specific orders <br />> Favourite filters can be applied directly to order search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-order-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Link payment to order
   * @description Link a payment to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-order-payment": {
    parameters: {
      path: {
        /** @description Order identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkPaymentToDocument"];
      };
    };
    responses: {
      /** @description Payments list attached to the order */
      201: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Unlink payment from order
   * @description Unlink a payment from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-order-payment": {
    parameters: {
      path: {
        /** @description Order identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    responses: {
      /** @description Payment unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * List directories and files of an orders
   * @description List directories and files attached to an orders <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-order-files": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an order
   * @description Attach file to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-order-file": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Link prime to order
   * @deprecated
   * @description Link a prime to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-order-prime": {
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Prime linked */
      201: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a prime from an order
   * @deprecated
   * @description Unlink a prime from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-order-prime": {
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    responses: {
      /** @description Prime unlinked */
      204: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested prime was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Link discount including taxes to order
   * @description Link a discount including taxes to an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-order-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Discount linked */
      201: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a discount including taxes from an order
   * @description Unlink a discount including taxes from an order <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-order-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Order identifier */
        orderId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    responses: {
      /** @description Discount unlinked */
      204: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested discount was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Individuals List
   * @description Get a list of individuals
   */
  "get-individuals": {
    parameters: {
      query?: {
        /** @description The order field */
        order?: "name" | "id" | "created_at" | "updated_at";
        /** @description Example : `embed[]=invoicing_address&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - main_contact, dunning_contact, invoicing_contact: `contacts.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> */
        embed?: (("invoicing_address" | "delivery_address" | "main_contact" | "dunning_contact" | "invoicing_contact" | "opportunities" | "estimates" | "invoices" | "orders" | "deliveries" | "acl" | "smart_tags") | components["parameters"]["contactEmbed"]["schema"]["items"]["oneOf"]["1"])[];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Individuals list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: (components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["individual"] & ({
                _embed?: (({
                  /** @description Invocing address */
                  invoicing_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
                  /** @description Delivery address */
                  delivery_address?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["invoicing_address"] | null;
                  /** @description Main contact */
                  main_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
                  /** @description Dunning contact */
                  dunning_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
                  /** @description Invoicing contact */
                  invoicing_contact?: components["schemas"]["OpportunityItem"]["_embed"]["allOf"]["0"]["contacts"]["items"] | null;
                  /**
                   * @description Count of opportunities
                   * @example 2
                   */
                  opportunities?: number | null;
                  /**
                   * @description Count of estimates
                   * @example 2
                   */
                  estimates?: number | null;
                  /**
                   * @description Count of invoices
                   * @example 2
                   */
                  invoices?: number | null;
                  /**
                   * @description Count of orders
                   * @example 2
                   */
                  orders?: number | null;
                  /**
                   * @description Count of deliveries
                   * @example 2
                   */
                  deliveries?: number | null;
                  /** @description Individual acl */
                  acl?: components["schemas"]["Activity"]["_embed"]["acl"]["oneOf"]["2"] | null;
                  /** @description Smart-tags linked */
                  smart_tags?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["smart_tags"]["allOf"]["0"] | null;
                }) & components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["2"]) | null;
              }))[];
          };
        };
      };
    };
  };
  /**
   * Create an individual
   * @description Create an individual
   */
  "create-individual": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "prospect" | "client" | "supplier";
          /**
           * @description Individual contact lastname
           * @example Martin
           */
          last_name: string;
          /**
           * @description Individual contact firstname
           * @example Jean
           */
          first_name?: string | null;
          /**
           * @description Civility of individual
           * @example mr
           * @enum {string|null}
           */
          civility?: "mr" | "mrs" | "ms" | null;
          /**
           * Format: email
           * @description Individual email
           * @example jean.martin@personal-example.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Individual website
           * @example http://personal-example.com
           */
          website?: string | null;
          /**
           * @description Phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          /**
           * @description Internal reference
           * @example IND-1654
           */
          reference?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
          /**
           * @description Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          /**
           * @description Owner of the company (Staff id expected)
           * @example 112
           */
          owner_id?: number | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description list of campaign type subcribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
          sync?: {
            /** @description Activate the mailchimp synchronization */
            mailchimp?: boolean;
            /** @description Activate the mailjet synchronization */
            mailjet?: boolean;
            /** @description Activate the simplemail synchronization */
            simplemail?: boolean;
          };
          /**
           * Format: date-time
           * @description Date of creation of the individual
           */
          created?: string;
        };
      };
    };
    responses: {
      /** @description Individual created */
      201: {
        headers: {
        };
        content: {
          "application/json": paths["/individuals"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Search individuals
   * @description Search individuals
   */
  "search-individuals": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Individual filters */
          filters: {
            /**
             * Created at
             * @description Filter the individual list by creation date
             */
            created?: {
              /**
               * Format: date-time
               * @example 2020-01-01T00:00:00+01:00
               */
              start?: string;
              /**
               * Format: date-time
               * @example 2020-02-01T00:00:00+01:00
               */
              end?: string;
            };
            /**
             * Updated at
             * @description Filter the individual list by last update date
             */
            updated_at?: {
              /**
               * Format: date-time
               * @example 2020-01-01T00:00:00+01:00
               */
              start?: string;
              /**
               * Format: date-time
               * @example 2020-02-01T00:00:00+01:00
               */
              end?: string;
            };
            /**
             * Name
             * @description Filter the individual list by name (exact search)
             * @example Jean
             */
            name?: string;
            /**
             * Email
             * @description Filter the individual list by email (exact search)
             * @example contact@example.com
             */
            email?: string;
            /**
             * Type
             * @description Filter the individual list by type
             */
            type?: ("prospect" | "client" | "supplier") | (("prospect" | "client" | "supplier")[]);
            /**
             * Is archived
             * @description Filter the individual list by is_archived
             * @example false
             */
            is_archived?: boolean;
            /**
             * Individuals
             * @description Filter individuals list by ID
             * @example [
             *   12,
             *   22
             * ]
             */
            id?: number[];
            favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
          };
        };
      };
    };
    responses: {
      /** @description Individuals list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/individuals"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * List individuals favourite filters
   * @description List favourite filters for faster access to specific individuals <br />> Favourite filters can be applied directly to individual search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-individual-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * List directories and files of an individual
   * @description List directories and files attached to an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-individual-files": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an individual
   * @description Attach file to an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-individual-file": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Individual smart tags List
   * @description Get list of smart tags for an individual
   */
  "get-individual-smart-tags": {
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to individual
   * @description Link a list of smart tag to an individual
   */
  "link-individual-smart-tags": {
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart tag linked */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Get Individual
   * @description Fetch individual informations
   */
  "get-individual": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    responses: {
      /** @description Individual fetched */
      200: {
        content: {
          "application/json": paths["/individuals"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Update Individual
   * @description Update Individual informations
   */
  "update-individual": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Individual contact lastname
           * @example Martin
           */
          last_name?: string;
          /**
           * @description Individual contact firstname
           * @example Jean
           */
          first_name?: string | null;
          /**
           * @description Civility of individual
           * @example mr
           * @enum {string|null}
           */
          civility?: "mr" | "mrs" | "ms" | null;
          /**
           * Format: email
           * @description Individual email
           * @example jean.martin@personal-example.com
           */
          email?: string | null;
          /**
           * Format: url
           * @description Individual website
           * @example http://personal-example.com
           */
          website?: string | null;
          /**
           * @description Phone number
           * @example +33100000000
           */
          phone_number?: string | null;
          /**
           * @description Mobile number
           * @example +33600000000
           */
          mobile_number?: string | null;
          /**
           * @description Fax number
           * @example +33100000000
           */
          fax_number?: string | null;
          /**
           * @description Internal reference
           * @example IND-1654
           */
          reference?: string | null;
          /**
           * @description Note on company
           * @example An handed-written note describing this company
           */
          note?: string;
          /**
           * @description Auxiliary code
           * @example 0EX11C
           */
          auxiliary_code?: string | null;
          social?: paths["/companies"]["post"]["requestBody"]["content"]["application/json"]["schema"]["social"];
          /**
           * @description Rate category id
           * @example 9956
           */
          rate_category_id?: number | null;
          /**
           * @description Accounting code id
           * @example 12345
           */
          accounting_code_id?: number | null;
          /**
           * @description Accouting purchase code id
           * @example 98556
           */
          accounting_purchase_code_id?: number | null;
          /**
           * @description Owner of the individual (Staff id expected)
           * @example 112
           */
          owner_id?: number | null;
          /**
           * @description Status archived or not
           * @example false
           */
          is_archived?: boolean;
          /** @description list of campaign type subcribed */
          marketing_campaigns_subscriptions?: ("sms" | "phone" | "email" | "postal_mail" | "custom")[];
          sync?: {
            /** @description Activate the mailchimp synchronization */
            mailchimp?: boolean;
            /** @description Activate the mailjet synchronization */
            mailjet?: boolean;
            /** @description Activate the simplemail synchronization */
            simplemail?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Individual updated */
      200: {
        content: {
          "application/json": paths["/individuals"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Delete Individual
   * @description Remove a individual
   */
  "delete-individual": {
    parameters: {
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    responses: {
      /** @description Individual deleted */
      204: {
        content: never;
      };
    };
  };
  /** Get individual addresses */
  "get-individual-addresses": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
    responses: {
      /** @description Addresses list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Address"][];
          };
        };
      };
    };
  };
  /** Create an individual address */
  "create-individual-address": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Individual id */
        individualId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressCreate"];
      };
    };
    responses: {
      /** @description Address created */
      201: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /** Get an individual address */
  "get-individual-address": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address fetched */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  /** Update an individual address */
  "update-individual-address": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Address id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressUpdate"];
      };
    };
    responses: {
      /** @description Address updated */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /** Delete an individual address */
  "delete-individual-address": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Record payment on an individual
   * @description Record a payment on an individual <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-individual-payment": {
    parameters: {
      path: {
        /** @description Individual identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreatePayment"];
      };
    };
    responses: {
      /** @description Payment created */
      201: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  /** Get an individual contacts */
  "get-individual-contacts": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["contactEmbed"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ContactCollectionItem"][];
          };
        };
      };
    };
  };
  /** Link contact to individual */
  "link-individual-contact": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description Contact already link */
      200: {
        content: never;
      };
      /** @description Contact was link to individual */
      201: {
        content: never;
      };
    };
  };
  /** Delete link between contact and individual */
  "unlink-individual-contact": {
    parameters: {
      path: {
        /** @description Individual id */
        individualId: number;
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description Delete link between contact and individual */
      204: {
        content: never;
      };
    };
  };
  /**
   * Individual custom fields List
   * @description Get list of custom fields for an individual
   */
  "get-individual-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update Individual custom fields
   * @description Update list of custom fields for an individual
   */
  "update-individual-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Individual id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Individual's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Get the CRM activity
   * @description Get the activity
   */
  "get-crm-activities": {
    parameters: {
      query?: {
        order?: components["parameters"]["crmActivityOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["crmActivityEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CrmActivity"][];
            aggregations?: components["schemas"]["CrmActivityAggregations"];
          };
        };
      };
    };
  };
  /**
   * Search in CRM activity
   * @description Search the activity
   */
  "search-crm-activities": {
    parameters: {
      query?: {
        order?: components["parameters"]["crmActivityOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["crmActivityEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CrmActivityFilters"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CrmActivity"][];
            aggregations?: components["schemas"]["CrmActivityAggregations"];
          };
        };
      };
      /** @description Partial content if the due_date range is too wide */
      206: {
        headers: {
          "X-Partial-Content"?: string;
        };
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CrmActivity"][];
            aggregations?: components["schemas"]["CrmActivityAggregations"];
          };
        };
      };
    };
  };
  /**
   * Export the CRM activity
   * @description Search the activity
   */
  "export-crm-activities": {
    parameters: {
      query?: {
        order?: components["parameters"]["crmActivityOrder"];
        direction?: components["parameters"]["direction"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExportParams"] & components["schemas"]["CrmActivityFilters"];
      };
    };
    responses: {
      /** @description Accepted */
      202: {
        content: never;
      };
    };
  };
  /**
   * Get meta informations for activity
   * @description Get metadata, ie everything you need to build the form (filter labels, static values aso..)
   */
  "meta-crm-activities": {
    responses: {
      /** @description Context object */
      200: {
        content: {
          "application/json": components["schemas"]["CrmActivityMetas"];
        };
      };
    };
  };
  /**
   * Get Custom Activity
   * @description Fetch custom activity informations
   */
  "get-custom-activities-id": {
    parameters: {
      path: {
        /** @description Custom Activity ID */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomActivity"];
        };
      };
    };
  };
  /**
   * Update Custom Activity
   * @description Edit a custom activity
   */
  "put-custom-activities-id": {
    parameters: {
      path: {
        /** @description Custom Activity ID */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomActivity"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomActivity"];
        };
      };
    };
  };
  /**
   * Delete Custom Activity
   * @description Delete a custom activity
   */
  "delete-custom-activities-id": {
    parameters: {
      path: {
        /** @description Custom Activity ID */
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Customs Activities List
   * @description Get a list of custom activities
   */
  "get-custom-activities": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        /** @description The order field */
        order?: "date";
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["CustomActivity"][];
          };
        };
      };
    };
  };
  /**
   * Create Custom Activity
   * @description Create a custom activity
   */
  "post-custom-activities": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomActivityCreate"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomActivity"];
        };
      };
    };
  };
  /**
   * Search Custom Activities
   * @description Search Custom Activities
   */
  "post-custom-activities-search": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        order?: components["parameters"]["order"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomActivityFilters"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["CustomActivity"][];
            /**
             * pagination
             * @description The pagination
             */
            pagination?: {
              /** @example 25 */
              limit: number;
              /** @example 152 */
              total: number;
              /** @example 25 */
              count: number;
              offset: number | string;
            };
          };
        };
      };
    };
  };
  /**
   * Get Custom Activity Type
   * @description Get a custom activity type
   */
  "get-custom-activity-types-id": {
    parameters: {
      path: {
        /** @description Custom activity type ID */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomActivityType"];
        };
      };
    };
  };
  /**
   * Update Custom Activity Type
   * @description Update a custom activity type
   */
  "put-custom-activity-types-id": {
    parameters: {
      path: {
        /** @description Custom activity type ID */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomActivityType"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomActivityType"];
        };
      };
    };
  };
  /**
   * Custom Activity Types List
   * @description Get a list of custom actvity types
   */
  "get-custom-activity-types": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        order?: components["parameters"]["order"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["CustomActivityType"][];
          };
        };
      };
    };
  };
  /**
   * Create Custom Activity Type
   * @description Create a custom activity type
   */
  "post-custom-activity-types": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomActivityType"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomActivityType"];
        };
      };
    };
  };
  /**
   * Scopes List
   * @description Get list of scopes
   */
  "get-scopes": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  /**
   * Get Scopes Tree
   * @description Get tree of scopes
   */
  "get-scopes-tree": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * List OAuth clients
   * @description List the OAuth clients for API
   */
  "list-clients": {
    parameters: {
      query?: {
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["Client"][];
          };
        };
      };
    };
  };
  /**
   * Create OAuth client
   * @description Create OAuth2 client for API
   */
  "create-clients": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ClientCreate"];
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          "application/json": components["schemas"]["ClientWSecret"];
        };
      };
    };
  };
  /**
   * Get OAuth client
   * @description Fetch OAuth 2 client for API
   */
  "fetch-clients": {
    parameters: {
      path: {
        /** @description OAuth client id */
        id: string;
      };
    };
    responses: {
      /** @description OAuth client */
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  /**
   * Update OAuth client
   * @description Update OAuth2 client for API
   */
  "update-clients": {
    parameters: {
      path: {
        /** @description OAuth client id */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ClientUpdate"];
      };
    };
    responses: {
      /** @description OAuth client */
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  /**
   * Delete OAuth client
   * @description Delete OAuth 2 client for API
   */
  "delete-clients": {
    parameters: {
      path: {
        /** @description OAuth client id */
        id: string;
      };
    };
    responses: {
      /** @description Client deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * List personal access tokens
   * @deprecated
   * @description List the personal access tokens for API
   */
  "list-personal-access-tokens": {
    parameters: {
      query?: {
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["PersonalAccessTokenItem"][];
          };
        };
      };
    };
  };
  /**
   * Create personal access token
   * @deprecated
   * @description Create OAuth2 personal access token for API
   */
  "create-personal-access-tokens": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PersonalAccessTokenCreateItem"];
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          "application/json": components["schemas"]["PersonalAccessTokenItem"]["allOf"]["0"] & {
            /**
             * @description The token name
             * @example My Token 7
             */
            name: string;
            /**
             * @description The oauth2 access token
             * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI2NzBmYWRlZi01NzZlLTQ3YTEtOTM1OC02Mjc4NDYwNWMwMjQiLCJqdGkiOiI5MWUyYmRhNTI4MTYzMTZjMDJjMzRkNTU3YjI4NzJmYjJkNDRkYTNlMDNiZjY3YTQ1YTA2Yjk2MDgzZjNlZjlkNmU5YzU0ZmEzN2VjMGVlYSIsImlhdCI6MTU5MDQyMDUwOSwibmJmIjoxNTkwNDIwNTA5LCJleHAiOjQ3NDYwOTc3MDksInN1YiI6IjM1NjdlMzA0LTk4YTUtNGI3My1hOGY0LWJlN2Y5NzgwZjU4YiIsInNjb3BlcyI6WyJhbGwiLCJjb21wYW5pZXMiLCJjb21wYW5pZXMucmVhZCIsImNvbXBhbmllcy53cml0ZSIsImFjdGl2aXRpZXMiLCJhY3Rpdml0aWVzLnJlYWQiLCJhY3Rpdml0aWVzLndyaXRlIiwibGlzdGluZ3MiLCJsaXN0aW5ncy5yZWFkIiwibGlzdGluZ3Mud3JpdGUiXSwidXNlclR5cGUiOiJzdGFmZiIsInVzZXJJZCI6MSwiY29ycElkIjoxfQ.e6EhrwGhis1w2LdUdR_3aJMOnHRr3eYdiIExqChb_mXOo843spzOOhP5Gigv21IJIEslF7mqudahoLbWIeq12AAUUapAgA93f9-Pxl1OgKkqzvRHN_Ft_Q_HQhX2BuSKrd6HTFtgL6B-vCi21wL-VRsMuasuLl7KDVqlQxikqJ-59MAYCHXOE9hyLOUc85OFvBWyyJOzX_Ey45IYIG6VuieyuNNm6eibjrmnW47gFsT-1YWVDvDJnLwyPew1MuSwbaVmUBLOe9hfjOJGWYPz5Wlrwo0zwbuiKHaXK8BAJ5pLXMpL8uUuMHuaPiMza-mZETXmNKScUwSdUXwEFEmgoQ
             */
            token: string;
          };
        };
      };
    };
  };
  /**
   * Get meta informations for personal access tokens
   * @deprecated
   * @description Get metadata, ie everything you need to build the form
   */
  "personal-access-tokens-meta": {
    responses: {
      /** @description Context object */
      200: {
        content: {
          "application/json": components["schemas"]["PersonalAccessTokenMetas"];
        };
      };
    };
  };
  /**
   * Get personal access token
   * @deprecated
   * @description Fetch OAuth2 personal access token for API
   */
  "fetch-personal-access-tokens": {
    parameters: {
      path: {
        /** @description Personal access token id */
        id: string;
      };
    };
    responses: {
      /** @description Personal access token */
      200: {
        content: {
          "application/json": components["schemas"]["PersonalAccessTokenItem"];
        };
      };
    };
  };
  /**
   * Delete personal access token
   * @deprecated
   * @description Delete OAuth2 personal access token for API
   */
  "delete-personal-access-tokens": {
    parameters: {
      path: {
        /** @description Personal access token id */
        id: string;
      };
    };
    responses: {
      /** @description Personal access token deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get accounting codes
   * @description Get list of accounting codes
   */
  "get-accounting-codes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["accountingOrder"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["AccountingCode"][];
          };
        };
      };
    };
  };
  /**
   * Create an accounting code
   * @description Create an accounting code
   */
  "create-accounting-code": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AccountingCodeCreate"];
      };
    };
    responses: {
      /** @description Accounting code created */
      201: {
        content: {
          "application/json": components["schemas"]["AccountingCode"];
        };
      };
      /** @description Code already exists */
      400: {
        content: never;
      };
      /** @description Module is not accessible */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete an accounting code
   * @description Delete an accounting code
   */
  "delete-accounting-code": {
    parameters: {
      path: {
        /** @description ID of the accounting code */
        id: number;
      };
    };
    responses: {
      /** @description Accounting code deleted */
      204: {
        content: never;
      };
      /** @description Module is not accessible */
      403: {
        content: never;
      };
    };
  };
  /**
   * Search accounting codes
   * @description Search in list of accouting codes
   */
  "search-accounting-codes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["accountingOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Accounting code filters */
          filters: {
            views?: ("third" | "purchase" | "sell" | "bank" | "reconciliation")[];
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["AccountingCode"][];
          };
          "application/xml": Record<string, never>;
        };
      };
    };
  };
  /**
   * Get accounting journal
   * @description Get list of accounting journal
   */
  "get-accounting-journal": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["accountingEmbed"];
      };
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
    responses: {
      /** @description Accounting journal */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["AccountingJournal"][];
            aggregations?: components["schemas"]["AccountingAggregations"];
          };
        };
      };
    };
  };
  /**
   * Search accounting journal
   * @description Search in list of accounting journal
   */
  "search-accounting-journal": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["accountingEmbed"];
      };
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Accounting code filters */
          filters: {
            /** @description Filter  by date of accounting entry */
            date?: {
              /** Format: date */
              start?: string;
              /** Format: date */
              end?: string;
            };
            /** @description Filter by accounting codes */
            accounting_codes?: string[];
            /** @description Filter by currency */
            currency?: string;
            /** @description Include or not, entries already exported */
            include_exported_entries?: boolean;
            /** @description Filter by bank accounts. Usable only for bank journal */
            bank_accounts?: number[];
            /** @description Filter client entries. Usable only for bank journal */
            simplified_view_by_client?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Accounting journal */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["AccountingJournal"][];
            aggregations?: components["schemas"]["AccountingAggregations"];
          };
        };
      };
    };
  };
  /** Get meta informations for accounting journal */
  "meta-accounting-journal": {
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
    responses: {
      /** @description Context object */
      200: {
        content: {
          "application/json": components["schemas"]["AccountingMetas"];
        };
      };
    };
  };
  /**
   * Export accounting journal
   * @description Export list of accounting journal
   */
  "export-accounting-journal": {
    parameters: {
      path: {
        /** @description Type of accounting journal to fetch */
        type: "sells" | "purchases" | "bank" | "cashtill" | "misc";
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AccountingJournalExportParams"] & paths["/accounting-journal/%7Btype%7D/search"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Accepted */
      202: {
        content: never;
      };
    };
  };
  /**
   * Taxes list
   * @description Get list of taxes
   */
  "get-taxes": {
    parameters: {
      query?: {
        /** @description The order field */
        order?: "id" | "rank";
        /** @description Additional object included in the result. */
        embed?: ("acl" | "translations")[];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        /** @description Include ecotaxes in the response */
        include_ecotax?: boolean;
      };
    };
    responses: {
      /** @description Taxes list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: (components["schemas"]["CompanyPreferences"]["tax"] & ({
                _embed?: ({
                  /** @description Tax acl */
                  acl?: {
                    /**
                     * @description Tax rate can be updated
                     * @example true
                     */
                    rate_can_be_updated?: boolean;
                    /**
                     * @description Tax can be deleted
                     * @example true
                     */
                    can_be_deleted?: boolean;
                  } | null;
                  /** @description Tax translations */
                  translations?: {
                      /**
                       * @description Translation id
                       * @example 5
                       */
                      id?: number;
                      /**
                       * @description Lang id
                       * @example 12
                       */
                      lang_id?: number;
                      /**
                       * @description Translation value
                       * @example The value
                       */
                      value?: string;
                    }[];
                }) | null;
              }))[];
          };
        };
      };
    };
  };
  /**
   * Create tax
   * @description Create a tax
   */
  "create-tax": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Tax rate
           * @example 20
           */
          rate: number;
          /**
           * @description Tax label
           * @example TVA
           */
          label: string;
          /**
           * @description ID of tax before which to place the tax specified in path parameter<br /> > if not specified, tax will be placed at the last rank of the taxes list
           *
           * @example 57
           */
          before_sibling?: number | null;
        };
      };
    };
    responses: {
      /** @description Tax created */
      201: {
        content: {
          "application/json": paths["/taxes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Search taxes
   * @description Search taxes
   */
  "search-taxes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaxFilter"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/taxes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Get Tax
   * @description Fetch tax informations
   */
  "get-tax": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Tax id */
        id: number;
      };
    };
    responses: {
      /** @description Tax fetched */
      200: {
        content: {
          "application/json": paths["/taxes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Update tax
   * @description Update Tax informations
   */
  "update-tax": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Tax id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Tax rate
           * @example 20
           */
          rate?: number;
          /**
           * @description Tax label
           * @example TVA
           */
          label?: string;
          /**
           * @description ID of tax before which to place the tax specified in path parameter<br /> > if not specified, tax will be placed at the last rank of the taxes list
           *
           * @example 57
           */
          before_sibling?: number | null;
        };
      };
    };
    responses: {
      /** @description Tax updated */
      200: {
        content: {
          "application/json": paths["/taxes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Delete tax
   * @description Remove a tax
   */
  "delete-tax": {
    parameters: {
      path: {
        /** @description Tax id */
        id: number;
      };
    };
    responses: {
      /** @description Tax deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Taxes accounting codes list
   * @description Get list of accounting codes
   */
  "get-taxes-accounting-charts": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Taxes accounting codes list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ({
                /**
                 * @description Id of tax
                 * @example 6
                 */
                id?: number;
                /**
                 * Format: float
                 * @description Rate of tax
                 * @example 20
                 */
                rate?: number;
                /**
                 * @description Label of tax
                 * @example Product TVA
                 */
                label?: string;
                /**
                 * Accounting code
                 * @description accounting codes applied to debit vat
                 */
                debit_vat?: {
                  /** @description Accounting code for collected vat */
                  collected_vat: {
                    /**
                     * @description Accounting code id for collected vat
                     * @example 23
                     */
                    id: number | null;
                    /**
                     * @description Accounting code for collected vat
                     * @example 445680
                     */
                    code: string | null;
                  };
                  /** @description Accounting code for deductible vat */
                  deductible_vat: {
                    /**
                     * @description Accounting code id for deductible vat
                     * @example 12
                     */
                    id: number | null;
                    /**
                     * @description Accounting code for deductible vat
                     * @example 445680
                     */
                    code: string | null;
                  };
                };
                /**
                 * Accounting code
                 * @description accounting codes applied to collection vat
                 */
                collection_vat?: {
                  /** @description Accounting code for collected vat */
                  collected_vat: {
                    /**
                     * @description Accounting code id for collected vat
                     * @example 12
                     */
                    id: number | null;
                    /**
                     * @description Accounting code for collected vat
                     * @example 445680
                     */
                    code: string | null;
                  };
                  /** @description Accounting code for deductible vat */
                  deductible_vat: {
                    /**
                     * @description Accounting code id for deductible vat
                     * @example 7
                     */
                    id: number | null;
                    /**
                     * @description Accounting code for deductible vat
                     * @example 445680
                     */
                    code: string | null;
                  };
                };
              })[];
          };
        };
      };
    };
  };
  /**
   * Tax accounting codes list
   * @description Get tax accounting codes
   */
  "get-tax-accounting-chart": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Tax id */
        id: number;
      };
    };
    responses: {
      /** @description Tax accounting codes list fetched */
      200: {
        content: {
          "application/json": paths["/taxes/accounting-codes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Update tax accounting codes
   * @description Update tax accounting codes
   */
  "update-tax-accounting-chart": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Tax id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * Accounting code
           * @description accounting codes applied to debit vat
           */
          debit_vat?: {
            /**
             * @description Accounting code for collected vat
             * @example 44568
             */
            collected_vat_id: number;
            /**
             * @description Accounting code for deductible vat
             * @example 44568
             */
            deductible_vat_id: number;
          };
          /**
           * Accounting code
           * @description accounting codes applied to collection vat
           */
          collection_vat?: {
            /**
             * @description Accounting code for collected vat
             * @example 44568
             */
            collected_vat_id: number;
            /**
             * @description Accounting code for deductible vat
             * @example 44568
             */
            deductible_vat_id: number;
          };
        };
      };
    };
    responses: {
      /** @description Tax updated */
      200: {
        content: {
          "application/json": paths["/taxes/accounting-codes"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Rate categories list
   * @description Get list of rate categories
   */
  "get-rate-categories": {
    parameters: {
      query?: {
        /** @description The order field */
        order?: "id";
        /** @description Additional object included in the result. */
        embed?: "currency"[];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Rate categories list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: (({
                /**
                 * @description Id of rate category
                 * @example 6657
                 */
                id?: number;
                /**
                 * @description Label of rate category
                 * @example Tarif HT
                 */
                label?: string;
                /**
                 * @description Are taxes included
                 * @example true
                 */
                includes_taxes?: boolean;
                /**
                 * @description Currency
                 * @example EUR
                 */
                currency?: string | null;
                /**
                 * @description Id of tax
                 * @example 3822666
                 */
                tax_id?: number | null;
                /**
                 * @description Is the default rate category
                 * @example false
                 */
                is_default?: boolean;
                /**
                 * Accounting
                 * @description Accounting codes
                 */
                accounting?: ({
                  /**
                   * @description Id of accounting code
                   * @example 1160745
                   */
                  accounting_code_id?: number | null;
                  /**
                   * @description Id of discount accounting code
                   * @example 1160745
                   */
                  discount_accounting_code_id?: number | null;
                }) | null;
                /**
                 * Default layouts
                 * @description Default layouts
                 */
                default_layouts?: {
                  /** @description Estimates layout */
                  estimates?: {
                    /**
                     * @description Indicates if estimates are enabled
                     * @example true
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 157
                     */
                    id?: number | null;
                  };
                  /** @description Invoices layout */
                  invoices?: {
                    /**
                     * @description Indicates if invoices are enabled
                     * @example true
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 158
                     */
                    id?: number | null;
                  };
                  /** @description Credit notes layout */
                  credit_notes?: {
                    /**
                     * @description Indicates if credit notes are enabled
                     * @example true
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 159
                     */
                    id?: number | null;
                  };
                  /** @description Models layout */
                  models?: {
                    /**
                     * @description Indicates if models are enabled
                     * @example true
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 160
                     */
                    id?: number | null;
                  };
                  /** @description Deliveries layout */
                  deliveries?: {
                    /**
                     * @description Indicates if deliveries are enabled
                     * @example false
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 161
                     */
                    id?: number | null;
                  };
                  /** @description Orders layout */
                  orders?: {
                    /**
                     * @description Indicates if orders are enabled
                     * @example false
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 162
                     */
                    id?: number | null;
                  };
                  /** @description Proformas layout */
                  proformas?: {
                    /**
                     * @description Indicates if proformas are enabled
                     * @example false
                     */
                    enabled?: boolean;
                    /**
                     * @description Layout id
                     * @example 163
                     */
                    id?: number | null;
                  };
                };
                /** @description Price rule */
                price?: OneOf<[{
                  /**
                   * @description Set an amount per product
                   * @example value
                   * @enum {string}
                   */
                  type?: "value";
                }, {
                  /**
                   * @description Apply a percentage to the reference price of the product
                   * @example percent
                   * @enum {string}
                   */
                  type?: "percent";
                  /**
                   * @description Price value
                   * @example 10.5
                   */
                  value?: string;
                }]>;
              }) & ({
                _embed?: ({
                  /** @description Rate category currency */
                  currency?: components["schemas"]["SaleEmbed"]["_embed"]["allOf"]["1"]["currency"] | null;
                }) | null;
              }))[];
          };
        };
      };
    };
  };
  /**
   * Create rate category
   * @description Create a rate category
   */
  "create-rate-category": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Label of rate category
           * @example Tarif HT
           */
          label: string;
          /**
           * @description Are taxes included
           * @default false
           * @example true
           */
          includes_taxes?: boolean;
          /**
           * @description Currency
           * @example EUR
           */
          currency?: string | null;
          /**
           * @description Id of tax
           * @example 3822666
           */
          tax_id?: number | null;
          /**
           * @description Id of accounting code
           * @example 1160745
           */
          accounting_code_id?: number | null;
          /**
           * @description Id of discount accounting code
           * @example 1160745
           */
          discount_accounting_code_id?: number | null;
          /**
           * Default layouts
           * @description Default layouts
           */
          default_layouts?: {
            /**
             * @description Estimates layout id
             * @example 157
             */
            estimates?: number | null;
            /**
             * @description Invoices layout id
             * @example 158
             */
            invoices?: number | null;
            /**
             * @description Credit notes layout id
             * @example 159
             */
            credit_notes?: number | null;
            /**
             * @description Models layout id
             * @example 157
             */
            models?: number | null;
            /**
             * @description Deliveries layout id
             * @example null
             */
            deliveries?: number | null;
            /**
             * @description Orders layout id
             * @example null
             */
            orders?: number | null;
            /**
             * @description Proformas layout id
             * @example null
             */
            proformas?: number | null;
          };
          /** @description Price rule */
          price?: OneOf<[{
            /**
             * @description Set an amount per product
             * @example value
             * @enum {string}
             */
            type: "value";
          }, {
            /**
             * @description Apply a percentage to the reference price of the product
             * @example percent
             * @enum {string}
             */
            type: "percent";
            /**
             * @description Price value
             * @example 10.5
             */
            value: string;
          }]>;
        };
      };
    };
    responses: {
      /** @description Rate category created */
      201: {
        content: {
          "application/json": paths["/rate-categories"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
      /** @description Quotas limit reached on your current plan */
      402: {
        content: never;
      };
    };
  };
  /**
   * Get rate category
   * @description Fetch a rate category
   */
  "get-rate-category": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Rate category id */
        id: number;
      };
    };
    responses: {
      /** @description Rate category fetched */
      200: {
        content: {
          "application/json": paths["/rate-categories"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Update a rate category
   * @description Update a rate category
   */
  "update-rate-category": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Rate category id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Label of rate category
           * @example Tarif HT
           */
          label?: string;
          /**
           * @description Are taxes included
           * @default false
           * @example true
           */
          includes_taxes?: boolean;
          /**
           * @description Currency
           * @example EUR
           */
          currency?: string | null;
          /**
           * @description Id of tax
           * @example 3822666
           */
          tax_id?: number | null;
          /**
           * @description Id of accounting code
           * @example 1160745
           */
          accounting_code_id?: number | null;
          /**
           * @description Id of discount accounting code
           * @example 1160745
           */
          discount_accounting_code_id?: number | null;
          default_layouts?: paths["/rate-categories"]["post"]["requestBody"]["content"]["application/json"]["schema"]["default_layouts"];
          /** @description Price rule */
          price?: paths["/rate-categories"]["post"]["requestBody"]["content"]["application/json"]["schema"]["price"]["oneOf"]["0"] | paths["/rate-categories"]["post"]["requestBody"]["content"]["application/json"]["schema"]["price"]["oneOf"]["1"];
        };
      };
    };
    responses: {
      /** @description Rate category updated */
      200: {
        content: {
          "application/json": paths["/rate-categories"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"];
        };
      };
    };
  };
  /**
   * Delete Rate category
   * @description Remove a rate category
   */
  "delete-rate-category": {
    parameters: {
      path: {
        /** @description Rate category id */
        id: number;
      };
    };
    responses: {
      /** @description Rate category deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get the payment method
   * @description List of all payment methods
   */
  "get-payment-method": {
    parameters: {
      path: {
        /** @description Payment method id */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
    };
  };
  /**
   * List of all payment methods
   * @description List of all payment methods
   */
  "get-payment-methods": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["paymentMethodOrder"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["PaymentMethod"][];
          };
        };
      };
    };
  };
  /**
   * Search methods of payment
   * @description Search method of payment
   */
  "search-payment-methods": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["paymentMethodOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          filters?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["PaymentMethod"][];
          };
        };
      };
    };
  };
  /**
   * Ocr List - Purchase invoices
   * @description Get list of OCR documents for purchase invoices
   */
  "get-ocr-pur-invoice": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        order?: components["parameters"]["ocrOrder"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["Ocr"][];
          };
        };
      };
    };
  };
  /**
   * Search OCR - Purchase invoices
   * @description Search OCR document of purchase invoices
   */
  "search-ocr-pur-invoice": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        order?: components["parameters"]["ocrOrder"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          filters?: {
            /** @description Filter by ocr state */
            state?: ("pending" | "processing" | "completed" | "error")[];
            /** @description filters by staff ids */
            staff_id?: number[];
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["Ocr"][];
          };
        };
      };
    };
  };
  /**
   * Get Metadata for purchase invoice OCR
   * @description Get metadata
   */
  "get-ocr-pur-invoice-metas": {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OcrPurInvoiceMetas"];
        };
      };
    };
  };
  /**
   * Contacts List
   * @description Get a list of contacts
   */
  "get-contacts": {
    parameters: {
      query?: {
        order?: components["parameters"]["contactOrders"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["contactEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Contacts list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ContactCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Create a contact
   * @description Create a contact
   */
  "create-contact": {
    parameters: {
      query?: {
        embed?: components["parameters"]["contactEmbed"];
        verify?: components["parameters"]["verify"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactCreateItem"];
      };
    };
    responses: {
      /** @description Contact created */
      201: {
        content: {
          "application/json": components["schemas"]["ContactItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Search contacts
   * @description Search contacts
   */
  "search-contacts": {
    parameters: {
      query?: {
        order?: components["parameters"]["contactOrders"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["contactEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactFilters"];
      };
    };
    responses: {
      /** @description Contacts list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ContactCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * List contacts favourite filters
   * @description List favourite filters for faster access to specific contacts <br />> Favourite filters can be applied directly to contact search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-contact-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Get contact
   * @description Fetch contact informations
   */
  "get-contact": {
    parameters: {
      query?: {
        embed?: components["parameters"]["contactEmbed"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Contact id */
        id: number;
      };
    };
    responses: {
      /** @description Contact fetched */
      200: {
        content: {
          "application/json": components["schemas"]["ContactItem"];
        };
      };
    };
  };
  /**
   * Update contact
   * @description Update contact informations
   */
  "update-contact": {
    parameters: {
      query?: {
        embed?: components["parameters"]["contactEmbed"];
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Contact id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactUpdateItem"];
      };
    };
    responses: {
      /** @description Contact updated */
      200: {
        content: {
          "application/json": components["schemas"]["ContactItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Delete contact
   * @description Remove a contact
   */
  "delete-contact": {
    parameters: {
      path: {
        /** @description Contact id */
        id: number;
      };
    };
    responses: {
      /** @description Contact deleted */
      204: {
        content: never;
      };
    };
  };
  /** Get contact addresses */
  "get-contact-addresses": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description Addresses fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Address"][];
          };
        };
      };
    };
  };
  /** Create a contact address */
  "create-contact-address": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressCreate"];
      };
    };
    responses: {
      /** @description Address created */
      201: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  /** Get a contact address */
  "get-contact-address": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address fetched */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  /** Update a contact address */
  "update-contact-address": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
        /** @description Address id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddressUpdate"];
      };
    };
    responses: {
      /** @description Address updated */
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  /** Delete a contact address */
  "delete-contact-address": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
        /** @description Address id */
        id: number;
      };
    };
    responses: {
      /** @description Address deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Contact custom fields List
   * @description Get list of custom fields for a contact
   */
  "get-contact-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update contact custom fields
   * @description Update list of custom fields for a contact
   */
  "update-contact-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Contact's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * List directories and files of a contact
   * @description List directories and files attached to a contact <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-contact-files": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to a contact
   * @description Attach file to a contact <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-contact-file": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: never;
      };
    };
  };
  /**
   * Contact smart tags List
   * @description Get list of smart tags for a contact
   */
  "get-contact-smart-tags": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to contact
   * @description Link a list of smart tag to a contact
   */
  "link-contact-smart-tags": {
    parameters: {
      path: {
        /** @description Contact id */
        contactId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart tag linked */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Retrieve invoicing conformity state
   * @description Get invoicing conformity state
   */
  "get-invoicing-conformity-state": {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvoicingConformityState"];
        };
      };
    };
  };
  /**
   * Activate invoice conformity (Definitively)
   * @description Definitively activate invoice conformity
   */
  "activate-invoicing-conformity": {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Confirm definitively activate invoice conformity
           * @enum {boolean}
           */
          confirm_final_change: true;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvoicingConformityState"];
        };
      };
      /** @description Conformity has already been activated */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get all document layouts
   * @description Get all document layouts
   */
  "get-document-layouts": {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DocumentLayoutsCollection"];
        };
      };
    };
  };
  /**
   * Get your invoices and credit notes
   * @description Get your invoices and credit notes
   */
  "get-accounts-documents": {
    parameters: {
      query?: {
        order?: components["parameters"]["accountDocumentOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountDocumentCollection"];
        };
      };
    };
  };
  /**
   * Get Opportunity
   * @description Get an opportunity
   */
  "get-opportunity": {
    parameters: {
      query?: {
        embed?: components["parameters"]["opportunityEmbed"];
        /** @description Filters the fields returned in the response <br /><br /> Example:<br /> - `field[]=id`: Return the `id` field<br /> - `field[]=address.id`: Return the `id` field of the `address` object<br /> - `field[]=addresses[].id`: Return the `id` field of the `address` objects<br /> <br> On endpoints that implement the `embed` query parameter, if you specified embeds in your call, you will need to request the `_embed` field as well.<br> Example:<br> - `field[]=_embed`: Return all fields from all requested embeds<br> - `field[]=_embed.address`: Return all fields from the `address` embed<br> - `field[]=_embed.company.name`: Return the `name` field from the `company` embed<br> */
        field?: string[];
      };
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityItem"];
        };
      };
    };
  };
  /**
   * Update Opportunity
   * @description Update Opportunity informations
   */
  "update-opportunity": {
    parameters: {
      query?: {
        embed?: components["parameters"]["opportunityEmbed"];
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunityUpdate"];
      };
    };
    responses: {
      /** @description Opportunity updated */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Delete an Opportunity
   * @description Delete an opportunity
   */
  "delete-opportunity": {
    parameters: {
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
    responses: {
      /** @description Opportunity deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update opportunity's rank and/or step
   * @description Update opportunity's rank in its pipeline step or in a new step <br />> To apply new rank according to the sibling, we consider to be in the default ascending sort on opportunities rank
   */
  "update-opportunity-rank": {
    parameters: {
      path: {
        /** @description ID of opportunity */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunityRankUpdate"];
      };
    };
    responses: {
      /** @description Opportunity's rank updated */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Opportunities
   * @description Get list of opportunities
   */
  "get-opportunities": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["opportunityEmbedWithAggregations"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["opportunityOrder"];
      };
    };
    responses: {
      /** @description Opportunities list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunityItem"][];
            aggregations?: components["schemas"]["OpportunitiesAggregations"];
          };
        };
      };
    };
  };
  /**
   * Create an opportunity
   * @description Create an opportunity
   */
  "create-opportunity": {
    parameters: {
      query?: {
        embed?: components["parameters"]["opportunityEmbed"];
        field?: components["parameters"]["fields"];
        verify?: components["parameters"]["verify"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunityCreate"];
      };
    };
    responses: {
      /** @description Opportunity created */
      201: {
        content: {
          "application/json": components["schemas"]["OpportunityItem"];
        };
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * List directories and files of an opportunity
   * @description List directories and files attached to an opportunity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-opportunity-files": {
    parameters: {
      path: {
        /** @description Opportunity id */
        opportunityId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an opportunity
   * @description Attach file to an opportunity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-opportunity-file": {
    parameters: {
      path: {
        /** @description Opportunity id */
        opportunityId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Search Opportunities
   * @description Search opportunities
   */
  "search-opportunities": {
    parameters: {
      query?: {
        order?: components["parameters"]["opportunityOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["opportunityEmbedWithAggregations"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunityFilters"];
      };
    };
    responses: {
      /** @description Opportunities list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunityItem"][];
            aggregations?: components["schemas"]["OpportunitiesAggregations"];
          };
        };
      };
    };
  };
  /**
   * List opportunities favourite filters
   * @description List favourite filters for faster access to specific opportunities <br />> Favourite filters can be applied directly to opportunity search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-opportunity-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Get Opportunity Sources
   * @description Get list of opportunity sources
   */
  "get-opportunity-sources": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["opportunitySourceOrder"];
      };
    };
    responses: {
      /** @description Opportunity sources list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunitySourceCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Search Opportunity Sources
   * @description Search opportunity sources
   */
  "search-opportunity-sources": {
    parameters: {
      query?: {
        order?: components["parameters"]["opportunitySourceOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunitySourceFilters"];
      };
    };
    responses: {
      /** @description Opportunity sources list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunitySourceCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Get Opportunity Category Sources
   * @description Get list of opportunity category sources
   */
  "get-opportunity-category-sources": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["opportunitySourceOrder"];
      };
      path: {
        /** @description ID of Opportunity Sources Category */
        sourceCategoryId: number;
      };
    };
    responses: {
      /** @description Opportunity category sources list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunitySourceCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Get Opportunity Pipelines
   * @description Get list of opportunity pipelines
   */
  "get-opportunity-pipelines": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["opportunityPipelineOrder"];
      };
    };
    responses: {
      /** @description Opportunity pipelines list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunityPipelineCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Search Opportunity Pipelines
   * @description Search opportunity pipelines
   */
  "search-opportunity-pipelines": {
    parameters: {
      query?: {
        order?: components["parameters"]["opportunityPipelineOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OpportunityPipelineFilters"];
      };
    };
    responses: {
      /** @description Opportunity pipelines list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunityPipelineCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Get Opportunity Pipeline Steps
   * @description Get list of opportunity pipeline steps
   */
  "get-opportunity-pipeline-steps": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["pipelineStepOrder"];
        embed?: components["parameters"]["pipelineStepEmbed"];
      };
      path: {
        /** @description Pipeline id */
        pipelineId: number;
      };
    };
    responses: {
      /** @description Opportunity pipeline steps list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ({
                /**
                 * @description Internal Opportunity Pipeline Step ID
                 * @example 1
                 */
                id?: number;
                /**
                 * @description Opportunity Pipeline Step name
                 * @example New website
                 */
                name?: string;
                /**
                 * @description Opportunity Pipeline Step probability
                 * @example 75
                 */
                probability?: number;
                /**
                 * @description Pipeline rank in preferences
                 * @example 2
                 */
                rank?: number;
              } & ({
                _embed?: {
                  /**
                   * @description Number of opportunities on this step
                   * @example 8
                   */
                  opportunities_number?: number;
                } | null;
              }))[];
          };
        };
      };
    };
  };
  /**
   * Search Opportunity Pipeline Steps
   * @description Search opportunity pipeline steps
   */
  "search-opportunity-pipeline-steps": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["pipelineStepOrder"];
        embed?: components["parameters"]["pipelineStepEmbed"];
      };
      path: {
        /** @description Pipeline id */
        pipelineId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PipelineStepFilters"];
      };
    };
    responses: {
      /** @description Opportunity pipeline steps list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/opportunities/pipelines/%7BpipelineId%7D/steps"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Search All Opportunity Pipeline Steps
   * @description Search all opportunity pipeline steps
   */
  "search-all-opportunity-pipeline-steps": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["pipelineStepOrder"];
        embed?: components["parameters"]["pipelineStepEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PipelineStepFilters"];
      };
    };
    responses: {
      /** @description Opportunity steps list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/opportunities/pipelines/%7BpipelineId%7D/steps"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Get Opportunities Categories List
   * @description Get list of opportunities categories
   */
  "get-opportunities-categories": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["opportuntiyCategoryEmbed"];
      };
    };
    responses: {
      /** @description Opportunities Categories List */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["OpportunitiesCategoryItem"][];
          };
        };
      };
    };
  };
  /** Get Opportunities Category */
  "get-opportunities-category": {
    parameters: {
      query?: {
        embed?: components["parameters"]["opportuntiyCategoryEmbed"];
      };
      path: {
        /** @description Opportunities category id */
        id: number;
      };
    };
    responses: {
      /** @description Opportunity category fetched */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunitiesCategoryItem"];
        };
      };
    };
  };
  /**
   * Opportunity custom fields List
   * @description Get list of custom fields for an opportunity
   */
  "get-opportunity-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Opportunity id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update opportunity custom fields
   * @description Update list of custom fields for an opportunity
   */
  "update-opportunity-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Opportunity id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Opportunity's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Opportunity smart-tags list
   * @description Get list of smart-tags for an opportunity
   */
  "get-opportunity-smart-tags": {
    parameters: {
      path: {
        /** @description Opportunity ID */
        id: number;
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to opportunity
   * @description Link a list of smart-tags to an opportunity
   */
  "link-opportunity-smart-tags": {
    parameters: {
      path: {
        /** @description Opportunity ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /** Get a task */
  "get-task": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["taskEmbed"];
      };
      path: {
        /** @description Task id */
        id: number;
      };
    };
    responses: {
      /** @description Task fetched */
      200: {
        content: {
          "application/json": components["schemas"]["TaskItem"];
        };
      };
    };
  };
  /** Update a task */
  "update-task": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["taskEmbed"];
      };
      path: {
        /** @description Task id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaskUpdateItem"];
      };
    };
    responses: {
      /** @description Task updated */
      200: {
        content: {
          "application/json": components["schemas"]["TaskItem"];
        };
      };
    };
  };
  /** Delete a task */
  "delete-task": {
    parameters: {
      path: {
        /** @description Task id */
        id: number;
      };
    };
    responses: {
      /** @description Task deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Tasks List
   * @description Get a list of tasks
   */
  "get-tasks": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["taskEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Tasks list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["TaskCollectionItem"][];
          };
        };
      };
    };
  };
  /** Create a task */
  "create-task": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["taskEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaskCreateItem"];
      };
    };
    responses: {
      /** @description Task created */
      201: {
        content: {
          "application/json": components["schemas"]["TaskItem"];
        };
      };
    };
  };
  /**
   * Search Tasks
   * @description Search tasks
   */
  "search-tasks": {
    parameters: {
      query?: {
        order?: components["parameters"]["taskOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["taskEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaskFilter"];
      };
    };
    responses: {
      /** @description Tasks list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["TaskCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Get tasks labels
   * @description Get all tasks labels available
   */
  "get-tasks-labels": {
    parameters: {
      query?: {
        order?: components["parameters"]["labelOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Label"][];
          };
        };
      };
    };
  };
  /**
   * Get calendar events labels
   * @description Get all calendar events labels available
   */
  "get-calendar-events-labels": {
    parameters: {
      query?: {
        order?: components["parameters"]["labelOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Label"][];
          };
        };
      };
    };
  };
  /**
   * Get Staff
   * @description Get a staff
   */
  "get-staff": {
    parameters: {
      query?: {
        embed?: components["parameters"]["staffItemEmbed"];
      };
      path: {
        /** @description Numerical identifier of the Staff. The logged-in Staff can also be retrieved by using the "/me" alias */
        id: string;
      };
    };
    responses: {
      /** @description Schema content depends on current user level of visibility on staffs, a restricted version could be return */
      200: {
        content: {
          "application/json": (components["schemas"]["Activity"]["_embed"]["author"] & ({
            _embed?: (({
              /** @description Staff preferences */
              preferences?: {
                /**
                 * @description Staff timezone
                 * @example Europe/Paris
                 */
                timezone?: string;
                /**
                 * @description display phone number format
                 * @example international
                 * @enum {string}
                 */
                format_phone_number?: "international" | "national";
                /**
                 * @description display date format
                 * @example DD-MM-YYYY
                 * @enum {string}
                 */
                format_date?: "MM-DD-YYYY" | "DD-MM-YYYY";
                /**
                 * @description display hour format
                 * @example 24
                 * @enum {string}
                 */
                format_hour?: 12 | 24;
                /**
                 * @description current currency for staff
                 * @example EUR
                 */
                currency?: string;
              };
              /** @description Staff acl */
              acl?: {
                /**
                 * @description Is allowed to view companies
                 * @example true
                 */
                view_companies?: boolean;
                /**
                 * @description Is allowed to create companies
                 * @example true
                 */
                create_companies?: boolean;
                /**
                 * @description Is allowed to update companies
                 * @example true
                 */
                update_companies?: boolean;
                /**
                 * @description Is allowed to delete companies
                 * @example true
                 */
                delete_companies?: boolean;
                /**
                 * @description Is allowed to view individuals
                 * @example true
                 */
                view_individuals?: boolean;
                /**
                 * @description Is allowed to create individuals
                 * @example true
                 */
                create_individuals?: boolean;
                /**
                 * @description Is allowed to update individuals
                 * @example true
                 */
                update_individuals?: boolean;
                /**
                 * @description Is allowed to delete individuals
                 * @example true
                 */
                delete_individuals?: boolean;
                /**
                 * @description Is allowed to view clients
                 * @example true
                 */
                view_clients?: boolean;
                /**
                 * @description Is allowed to create clients
                 * @example true
                 */
                create_clients?: boolean;
                /**
                 * @description Is allowed to update clients
                 * @example true
                 */
                update_clients?: boolean;
                /**
                 * @description Is allowed to delete clients
                 * @example true
                 */
                delete_clients?: boolean;
                /**
                 * @description Is allowed to view prospects
                 * @example true
                 */
                view_prospects?: boolean;
                /**
                 * @description Is allowed to create prospects
                 * @example true
                 */
                create_prospects?: boolean;
                /**
                 * @description Is allowed to update prospects
                 * @example true
                 */
                update_prospects?: boolean;
                /**
                 * @description Is allowed to delete prospects
                 * @example true
                 */
                delete_prospects?: boolean;
                /**
                 * @description Is allowed to view suppliers
                 * @example true
                 */
                view_suppliers?: boolean;
                /**
                 * @description Is allowed to create suppliers
                 * @example true
                 */
                create_suppliers?: boolean;
                /**
                 * @description Is allowed to update suppliers
                 * @example true
                 */
                update_suppliers?: boolean;
                /**
                 * @description Is allowed to delete suppliers
                 * @example true
                 */
                delete_suppliers?: boolean;
                /**
                 * @description Is allowed to view contacts
                 * @example true
                 */
                view_contacts?: boolean;
                /**
                 * @description Is allowed to create contacts
                 * @example true
                 */
                create_contacts?: boolean;
                /**
                 * @description Is allowed to update contacts
                 * @example true
                 */
                update_contacts?: boolean;
                /**
                 * @description Is allowed to delete contacts
                 * @example true
                 */
                delete_contacts?: boolean;
                /**
                 * @description Is allowed to view opportunities
                 * @example true
                 */
                view_opportunities?: boolean;
                /**
                 * @description Is allowed to create opportunities
                 * @example true
                 */
                create_opportunities?: boolean;
                /**
                 * @description Is allowed to update opportunities
                 * @example true
                 */
                update_opportunities?: boolean;
                /**
                 * @description Is allowed to delete opportunities
                 * @example true
                 */
                delete_opportunities?: boolean;
                /**
                 * @description Is allowed to view estimates
                 * @example true
                 */
                view_estimates?: boolean;
                /**
                 * @description Is allowed to create estimates
                 * @example true
                 */
                create_estimates?: boolean;
                /**
                 * @description Is allowed to update estimates
                 * @example true
                 */
                update_estimates?: boolean;
                /**
                 * @description Is allowed to delete estimates
                 * @example true
                 */
                delete_estimates?: boolean;
                /**
                 * @description Is allowed to view phone calls
                 * @example true
                 */
                view_phone_calls?: boolean;
                /**
                 * @description Is allowed to create phone calls
                 * @example true
                 */
                create_phone_calls?: boolean;
                /**
                 * @description Is allowed to update phone calls
                 * @example true
                 */
                update_phone_calls?: boolean;
                /**
                 * @description Is allowed to delete phone calls
                 * @example true
                 */
                delete_phone_calls?: boolean;
                /**
                 * @description Is allowed to view document models
                 * @example true
                 */
                view_document_models?: boolean;
                /**
                 * @description Is allowed to create document models
                 * @example true
                 */
                create_document_models?: boolean;
                /**
                 * @description Is allowed to update document models
                 * @example true
                 */
                update_document_models?: boolean;
                /**
                 * @description Is allowed to delete document models
                 * @example true
                 */
                delete_document_models?: boolean;
                /**
                 * @description Is allowed to view invoices
                 * @example true
                 */
                view_invoices?: boolean;
                /**
                 * @description Is allowed to create invoices
                 * @example true
                 */
                create_invoices?: boolean;
                /**
                 * @description Is allowed to update invoices
                 * @example true
                 */
                update_invoices?: boolean;
                /**
                 * @description Is allowed to delete invoices
                 * @example true
                 */
                delete_invoices?: boolean;
                /** @description Is allowed to validate invoices */
                validate_invoices?: boolean;
                /**
                 * @description Is allowed to view credit notes
                 * @example true
                 */
                view_credit_notes?: boolean;
                /**
                 * @description Is allowed to create credit notes
                 * @example true
                 */
                create_credit_notes?: boolean;
                /**
                 * @description Is allowed to update credit notes
                 * @example true
                 */
                update_credit_notes?: boolean;
                /**
                 * @description Is allowed to delete credit notes
                 * @example true
                 */
                delete_credit_notes?: boolean;
                /**
                 * @description Is allowed to validate credit notes
                 * @example true
                 */
                validate_credit_notes?: boolean;
                /**
                 * @description Is allowed to view orders
                 * @example true
                 */
                view_orders?: boolean;
                /**
                 * @description Is allowed to create orders
                 * @example true
                 */
                create_orders?: boolean;
                /**
                 * @description Is allowed to update orders
                 * @example true
                 */
                update_orders?: boolean;
                /**
                 * @description Is allowed to delete orders
                 * @example true
                 */
                delete_orders?: boolean;
                /**
                 * @description Is allowed to view deliveries
                 * @example true
                 */
                view_deliveries?: boolean;
                /**
                 * @description Is allowed to view proformas
                 * @example true
                 */
                view_proformas?: boolean;
                /**
                 * @description Is allowed to view purchase invoices
                 * @example true
                 */
                view_purchase_invoices?: boolean;
                /**
                 * @description Is allowed to view purchase credit notes
                 * @example true
                 */
                view_purchase_credit_notes?: boolean;
                /**
                 * @description Is allowed to view purchase deliveries
                 * @example true
                 */
                view_purchase_deliveries?: boolean;
                /**
                 * @description Is allowed to view purchase orders
                 * @example true
                 */
                view_purchase_orders?: boolean;
                /**
                 * @description Is allowed to view items
                 * @example true
                 */
                view_items?: boolean;
                /**
                 * @description Is allowed to create items
                 * @example true
                 */
                create_items?: boolean;
                /**
                 * @description Is allowed to update items
                 * @example true
                 */
                update_items?: boolean;
                /**
                 * @description Is allowed to delete items
                 * @example true
                 */
                delete_items?: boolean;
                /**
                 * @description Is allowed to view payments
                 * @example true
                 */
                view_payments?: boolean;
                /**
                 * @description Is allowed to create payments
                 * @example true
                 */
                create_payments?: boolean;
                /**
                 * @description Is allowed to update payments
                 * @example true
                 */
                update_payments?: boolean;
                /**
                 * @description Is allowed to delete payments
                 * @example true
                 */
                delete_payments?: boolean;
                /**
                 * @description Is allowed to attach existing payments to objects
                 * @example true
                 */
                attach_payments?: boolean;
                /**
                 * @description Is allowed to view subscriptions
                 * @example true
                 */
                view_subscriptions?: boolean;
                /**
                 * @description Is allowed to create subscriptions
                 * @example true
                 */
                create_subscriptions?: boolean;
                /**
                 * @description Is allowed to update subscriptions
                 * @example true
                 */
                update_subscriptions?: boolean;
                /**
                 * @description Is allowed to delete subscriptions
                 * @example true
                 */
                delete_subscriptions?: boolean;
                /**
                 * @description Is allowed to view cashflow
                 * @example true
                 */
                view_cashflow?: boolean;
                /**
                 * @description Is allowed to create cashflow
                 * @example true
                 */
                create_cashflow?: boolean;
                /**
                 * @description Is allowed to view files
                 * @example true
                 */
                view_files?: boolean;
                /**
                 * @description Is allowed to attach files
                 * @example true
                 */
                attach_files?: boolean;
                /**
                 * @description Is allowed to delete files
                 * @example true
                 */
                delete_files?: boolean;
                /**
                 * @description Is allowed to view support tickets
                 * @example true
                 */
                view_tickets?: boolean;
              } | null;
              /** @description Staff licenses */
              licenses?: {
                  /**
                   * @description License identifier
                   * @example 9998a80a-7b75-4616-96d5-7ccff7ac08e8
                   */
                  id?: string;
                  /**
                   * @description License code
                   * @example pack_all_included
                   */
                  code?: string;
                  /** @description License is enabled */
                  enabled?: boolean;
                }[] | null;
              /** @description Staff preferences calendar */
              preferences_calendar?: {
                /**
                 * @description display calendar provider
                 * @example google
                 * @enum {string}
                 */
                provider?: "google" | "outlook" | "sellsy";
              };
            }) & {
              /** Profile */
              profile?: {
                /**
                 * @description Profile id
                 * @example 6657
                 */
                id: number;
                /**
                 * @description Profile name
                 * @example Collaborator
                 */
                name: string;
                /**
                 * @description Indicates if this profile grants administrator privileges
                 * @example true
                 */
                is_administrator: boolean;
              };
            } & ({
              /** Account details */
              account?: {
                /**
                 * @description Numerical identifier referencing the account
                 * @example 97417
                 */
                id: number;
                /**
                 * @description Identifier referencing the account
                 * @example 600b851b-e5c9-44f0-a66b-9b8391eff153
                 */
                uuid: string;
                /**
                 * @description Account's name
                 * @example Sellsy
                 */
                name: string;
                /**
                 * @description Account's country code
                 * @example FR
                 */
                country_code?: string | null;
                /**
                 * Format: date-time
                 * @description Created at (format at RFC3339)
                 * @example 2020-01-01T00:00:00+01:00
                 */
                created: string;
              };
            }) & {
              /** User details */
              user?: {
                /**
                 * @description Identifier referencing the user
                 * @example 600b851b-e5c9-44f0-a66b-9b8391eff153
                 */
                uuid: string;
              };
            } & ({
              /**
               * Staff subscriptions
               * @description Optional objects added through the embed parameter
               */
              subscriptions?: {
                cashflow?: ({
                  /**
                   * @description Cashflow plan
                   * @example TRIAL
                   * @enum {string}
                   */
                  plan?: "TRIAL" | "STARTER" | "PRO" | "BUSINESS" | "EXTERNAL";
                  /**
                   * Format: date-time
                   * @description Trial end date
                   * @example 2022-04-20T23:59:59+02:00
                   */
                  trial_end_date?: string | null;
                }) | null;
                marketing?: ({
                  /**
                   * @description Marketing plan
                   * @example TRIAL
                   * @enum {string}
                   */
                  plan?: "TRIAL" | "STARTER" | "PRO" | "BUSINESS";
                  /**
                   * Format: date-time
                   * @description Trial end date
                   * @example 2022-04-20T23:59:59+02:00
                   */
                  trial_end_date?: string | null;
                  /**
                   * Format: date-time
                   * @description Service start date
                   * @example 2023-09-04T00:00:00+02:00
                   */
                  service_start_date?: string | null;
                  /**
                   * Format: date-time
                   * @description Service end date
                   * @example 2024-09-03T23:59:59+02:00
                   */
                  service_end_date?: string | null;
                  /** @description Marketing options */
                  options?: ({
                      /** @example pack_marketing_dedicated_ip */
                      name?: string;
                      /** @example 4 */
                      quantity?: number;
                      metadata?: {
                        /** @description Marketing domains */
                        domains?: {
                            /** @example example.com */
                            sender_domain?: string;
                            /** @example email */
                            sub_domain?: string;
                          }[];
                      } | null;
                    })[];
                }) | null;
              };
            }) & {
              /** Intercom hmac */
              intercom_hash?: {
                /**
                 * @description Web HMAC
                 * @example 64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067
                 */
                web: string;
                /**
                 * @description iOS HMAC
                 * @example 64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067
                 */
                ios: string;
                /**
                 * @description Android HMAC
                 * @example 64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067
                 */
                android: string;
              };
            } & {
              /**
               * Staff features
               * @description Optional objects added through the embed parameter
               */
              features?: {
                /** @example false */
                collaborative_sharing_suite?: boolean;
                /** @example false */
                map_listing?: boolean;
                /** @example false */
                payment_deadlines?: boolean;
                /** @example false */
                price_exceptions?: boolean;
                /** @example false */
                product_variations?: boolean;
                /** @example false */
                promotion_management?: boolean;
                /** @example false */
                sepa_export?: boolean;
              };
            }) | null;
          })) | components["schemas"]["StaffRestrictedView"];
        };
      };
      /** @description Staff not found. Depending on your subscription plan */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update Staff
   * @description Update staff informations
   */
  "update-staff": {
    parameters: {
      query?: {
        embed?: components["parameters"]["staffEmbed"];
      };
      path: {
        /** @description Numerical identifier of the Staff. The logged-in Staff can also be retrieved by using the "/me" alias */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StaffUpdateItem"];
      };
    };
    responses: {
      /** @description Staff updated, schema content depends on current user level of visibility on staffs, a restricted version could be return */
      200: {
        content: {
          "application/json": (components["schemas"]["Activity"]["_embed"]["author"] & ({
            _embed?: paths["/staffs/%7Bid%7D"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["anyOf"]["0"]["allOf"]["1"]["_embed"]["allOf"]["0"] | null;
          })) | components["schemas"]["StaffRestrictedView"];
        };
      };
    };
  };
  /**
   * Get Staffs
   * @description Get a list of staffs.</br> The response may contain only your own staff, depending on your subscription plan.
   */
  "get-staffs": {
    parameters: {
      query?: {
        embed?: components["parameters"]["staffEmbed"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["staffOrder"];
      };
    };
    responses: {
      /** @description Schema content depends on current user level of visibility on staffs, a restricted version could be return */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: (paths["/staffs/%7Bid%7D"]["put"]["responses"]["200"]["content"]["application/json"]["schema"]["anyOf"]["0"] | components["schemas"]["StaffRestrictedView"])[];
          };
        };
      };
    };
  };
  /** Create a staff */
  "create-staff": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StaffCreateItem"];
      };
    };
    responses: {
      /** @description Staff created, schema content depends on current user level of visibility on staffs, a restricted version could be return */
      201: {
        content: {
          "application/json": paths["/staffs/%7Bid%7D"]["put"]["responses"]["200"]["content"]["application/json"]["schema"]["anyOf"]["0"] | components["schemas"]["StaffRestrictedView"];
        };
      };
    };
  };
  /**
   * Search Staffs
   * @description Search list of staffs.</br> The response may contain only your own staff, depending on your subscription plan.
   */
  "search-staffs": {
    parameters: {
      query?: {
        embed?: components["parameters"]["staffEmbed"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["staffOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StaffFilters"];
      };
    };
    responses: {
      /** @description Schema content depends on current user level of visibility on staffs, a restricted version could be return */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: (paths["/staffs/%7Bid%7D"]["put"]["responses"]["200"]["content"]["application/json"]["schema"]["anyOf"]["0"] | components["schemas"]["StaffRestrictedView"])[];
          };
        };
      };
    };
  };
  /**
   * Team List
   * @description Get a list of team
   */
  "get-teams": {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** @description Teams list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Team"][];
          };
        };
      };
    };
  };
  /**
   * Profiles list
   * @description Get profiles list
   */
  "get-profiles": {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        order?: components["parameters"]["profileOrder"];
        direction?: components["parameters"]["direction"];
      };
    };
    responses: {
      /** @description Profiles list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Profiles"][];
          };
        };
      };
    };
  };
  /**
   * Get file
   * @description Get a file <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-file": {
    parameters: {
      path: {
        /** @description File identifier */
        id: number;
      };
    };
    responses: {
      /** @description File fetched */
      200: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Delete file
   * @description Delete a file <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "delete-file": {
    parameters: {
      path: {
        /** @description File identifier */
        id: number;
      };
    };
    responses: {
      /** @description File deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Move a file to a new directory
   * @description Move a file to a new directory. The target specified could be as either a folder or a direct entity, such as "company". <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "move-file": {
    parameters: {
      path: {
        /** @description File identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MoveFileInput"];
      };
    };
    responses: {
      /** @description File moved */
      204: {
        content: never;
      };
      /** @description Conflict */
      409: {
        content: never;
      };
    };
  };
  /**
   * Search
   * @description Search for objects
   */
  search: {
    parameters: {
      query: {
        q: components["parameters"]["autocomplete"];
        type?: components["parameters"]["searchType"];
        /** @description The pagination limit. On a default search (without the `type` parameter), the limit parameter is not used because the limit is automatically calculated in relation to the relevance of the search results. */
        limit?: number;
      };
    };
    responses: {
      /** @description Search result */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["SearchResult"];
            aggregations: components["schemas"]["SearchResultAggregations"];
          };
        };
      };
    };
  };
  /**
   * Calendar events List
   * @description Get a list of calendar event
   */
  "get-calendar-events": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["calendarEventEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Calendar events list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CalendarEventItem"][];
          };
        };
      };
    };
  };
  /** Create a calendar event */
  "create-calendar-event": {
    parameters: {
      query?: {
        embed?: components["parameters"]["calendarEventEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CalendarEventCreateItem"];
      };
    };
    responses: {
      /** @description Calendar event created */
      201: {
        content: {
          "application/json": components["schemas"]["CalendarEventItem"];
        };
      };
    };
  };
  /** Get calendar event */
  "get-calendar-event": {
    parameters: {
      query?: {
        embed?: components["parameters"]["calendarEventEmbed"];
      };
      path: {
        /** @description Calendar event id */
        id: number;
      };
    };
    responses: {
      /** @description Calendar event fetched */
      200: {
        content: {
          "application/json": components["schemas"]["CalendarEventItem"];
        };
      };
    };
  };
  /** Update calendar event */
  "update-calendar-event": {
    parameters: {
      path: {
        /** @description Calendar event id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CalendarEventUpdateItem"];
      };
    };
    responses: {
      /** @description Calendar event updated */
      200: {
        content: {
          "application/json": components["schemas"]["CalendarEventItem"];
        };
      };
    };
  };
  /** Delete calendar event */
  "delete-calendar-event": {
    parameters: {
      path: {
        /** @description Calendar event id */
        id: number;
      };
    };
    responses: {
      /** @description Calendar event deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Search calendar event
   * @description Search calendar events
   */
  "search-calendar-events": {
    parameters: {
      query?: {
        order?: components["parameters"]["calendarEventOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        embed?: components["parameters"]["calendarEventEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CalendarEventFilters"];
      };
    };
    responses: {
      /** @description Calendar events list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CalendarEventItem"][];
          };
        };
      };
    };
  };
  /**
   * Search in activity
   * @description Search in activity
   */
  "search-activities": {
    parameters: {
      query?: {
        order?: components["parameters"]["activityOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["activityEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ActivityFilters"] & ({
          /** @description Activity filters */
          filters?: {
            /** @description Filter for get the activity related to an object */
            object_related?: {
              /** @enum {string} */
              type?: "company" | "individual" | "opportunity" | "contact";
              /** @example 1029 */
              id?: number;
            };
          };
        });
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Activity"][];
          };
        };
      };
    };
  };
  /**
   * Timeline search
   * @description Search in timeline activity of an object
   */
  "search-timeline": {
    parameters: {
      query?: {
        order?: components["parameters"]["activityOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["activityEmbed"];
      };
      path: {
        /** @description Object identifier */
        id: string;
        /** @description Object type */
        type: "individual" | "company" | "contact" | "opportunity";
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ActivityFilters"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Activity"][];
          };
        };
      };
    };
  };
  /**
   * Get a phoneCall
   * @description Get a phoneCall
   */
  "get-phone-call": {
    parameters: {
      query?: {
        embed?: components["parameters"]["phoneCallEmbed"];
      };
      path: {
        /** @description Numerical identifier of phone call */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PhoneCallItem"];
        };
      };
    };
  };
  /**
   * Update a phoneCall
   * @description Update a phoneCall
   */
  "update-phone-call": {
    parameters: {
      query?: {
        embed?: components["parameters"]["phoneCallEmbed"];
      };
      path: {
        /** @description Numerical identifier of phone call */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PhoneCallUpdateItem"];
      };
    };
    responses: {
      /** @description PhoneCall updated */
      200: {
        content: {
          "application/json": components["schemas"]["PhoneCallItem"];
        };
      };
    };
  };
  /** Delete a phoneCall */
  "delete-phone-call": {
    parameters: {
      path: {
        /** @description Numerical identifier of phone call */
        id: number;
      };
    };
    responses: {
      /** @description PhoneCall deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * PhoneCalls List
   * @description Get a list of phoneCalls
   */
  "get-phone-calls": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["phoneCallEmbed"];
      };
    };
    responses: {
      /** @description Phonecalls list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["PhoneCallCollectionItem"][];
          };
        };
      };
    };
  };
  /** Create a phone call */
  "create-phone-call": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["phoneCallEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PhoneCallCreateItem"];
      };
    };
    responses: {
      /** @description PhoneCall created */
      201: {
        content: {
          "application/json": components["schemas"]["PhoneCallItem"];
        };
      };
    };
  };
  /**
   * Search phoneCalls
   * @description Search a list of phoneCalls
   */
  "search-phone-calls": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["phoneCallEmbed"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PhoneCallFilter"];
      };
    };
    responses: {
      /** @description Phonecalls list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["PhoneCallCollectionItem"][];
          };
        };
      };
    };
  };
  /**
   * Get Email
   * @description Get an Email
   */
  "get-email": {
    parameters: {
      path: {
        /** @description identifier of email */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmailItem"];
        };
      };
      /** @description Partial content if the email provider is unreachable */
      206: {
        headers: {
          "X-Mail-Provider-Error"?: components["schemas"]["PartialEmailHeader"];
        };
        content: {
          "application/json": components["schemas"]["EmailItem"];
        };
      };
    };
  };
  /**
   * Get Emails Thread
   * @description Get the emails list of a thread
   */
  "get-email-thread": {
    parameters: {
      path: {
        /** @description Identifier of email thread */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description Identifier of email thread */
            id?: string;
            emails?: components["schemas"]["EmailEngineItem"][];
          };
        };
      };
    };
  };
  /**
   * Get email's domain DNS data
   * @description Get DNS data for the domain extracted from the email
   */
  "get-email-domain-dns-data": {
    parameters: {
      query: {
        /**
         * @description email whose domain should be authenticated
         * @example jonh.doe@email.com
         */
        email: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailAuthenticationItem"];
        };
      };
    };
  };
  /**
   * Validate email's DNS
   * @description Validate an email DNS
   */
  "validate-email-domain-dns": {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The email DNS
           * @example domain.com
           */
          domain?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailValidationItem"];
        };
      };
      /** @description Bad Request */
      400: {
        content: never;
      };
    };
  };
  /**
   * Get Webhooks
   * @description Get list of webhooks
   */
  "get-webhooks": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description Webhooks list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["WebhookReadItem"][];
          };
        };
      };
    };
  };
  /**
   * Create Webhook
   * @description Create a webhook
   */
  "create-webhook": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["WebhookCreateItem"];
      };
    };
    responses: {
      /** @description Webhook created */
      201: {
        content: {
          "application/json": components["schemas"]["WebhookReadItem"];
        };
      };
    };
  };
  /**
   * Search Webhooks
   * @description Get list of webhooks
   */
  "search-webhooks": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["WebhookFilters"];
      };
    };
    responses: {
      /** @description Webhooks list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["WebhookReadItem"][];
          };
        };
      };
    };
  };
  /**
   * Get Webhook
   * @description Get a webhook
   */
  "get-webhook": {
    parameters: {
      path: {
        /** @description ID of webhook */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookReadItem"];
        };
      };
    };
  };
  /**
   * Update Webhook
   * @description Update Webhook informations
   */
  "update-webhook": {
    parameters: {
      path: {
        /** @description ID of webhook */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["WebhookEditItem"];
      };
    };
    responses: {
      /** @description Webhook updated */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookReadItem"];
        };
      };
    };
  };
  /**
   * Delete Webhook
   * @description Delete a webhook
   */
  "delete-webhook": {
    parameters: {
      path: {
        /** @description ID of webhook */
        id: number;
      };
    };
    responses: {
      /** @description Webhook deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Webhook Events
   * @description List all events' name available for a webhook
   */
  "get-webhook-events": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEventsList"];
        };
      };
    };
  };
  /**
   * Get Units
   * @description Get all units of the corp
   */
  "get-units": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Unit"][];
          };
        };
      };
    };
  };
  /**
   * Get currencies
   * @description Get all currencies of the corp
   */
  "get-currencies": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Currency"][];
          };
        };
      };
    };
  };
  /**
   * Get countries list
   * @description Get a list of countries
   */
  "get-countries": {
    parameters: {
      query?: {
        language?: components["parameters"]["language"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * pagination
             * @description The pagination
             */
            pagination: {
              /** @example 25 */
              limit: number;
              /** @example 152 */
              total: number;
              /** @example 25 */
              count: number;
              offset: number | string;
            };
            data: components["schemas"]["Country"][];
          };
        };
      };
    };
  };
  /**
   * Get my Sellsy subscription informations
   * @description Retrieve the details of my Sellsy subscription
   */
  "get-account-subscription": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  /**
   * Items List
   * @description Get a list of items
   */
  "get-items": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["itemOrder"];
      };
    };
    responses: {
      /** @description Items list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ItemReadItem"][];
          };
        };
      };
    };
  };
  /**
   * Create an item
   * @description Create an item
   */
  "create-item": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateItem"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["ItemReadItem"];
        };
      };
    };
  };
  /**
   * Search items
   * @description Search items
   */
  "search-items": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["itemOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Item filters */
          filters: {
            /**
             * Item type
             * @description Filter items list by item type
             * @example [
             *   "product",
             *   "service"
             * ]
             */
            type?: ("product" | "service" | "shipping" | "packaging")[];
            favourite_filter?: components["schemas"]["ContactFilters"]["filters"]["favourite_filter"];
          };
        };
      };
    };
    responses: {
      /** @description Items list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ItemReadItem"][];
          };
        };
      };
    };
  };
  /**
   * List items favourite filters
   * @description List favourite filters for faster access to specific items <br />> Favourite filters can be applied directly to item search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-item-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Get an item
   * @description Get an item
   */
  "get-item": {
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemReadItem"];
        };
      };
    };
  };
  /**
   * Update an item
   * @description Update an item
   */
  "update-item": {
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateItem"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemReadItem"];
        };
      };
    };
  };
  /**
   * Delete item
   * @description Delete an item
   */
  "delete-item": {
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    responses: {
      /** @description Item deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get item prices
   * @description Get prices list for an item
   */
  "get-item-prices": {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ItemPrice"][];
          };
        };
      };
    };
  };
  /**
   * Update item prices
   * @description Update prices list for an item
   */
  "put-item-prices": {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
      };
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemInputPrice"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ItemPrice"][];
          };
        };
      };
    };
  };
  /**
   * Declinations List
   * @description Get the declination's list
   */
  "get-item-declinations": {
    parameters: {
      path: {
        /** @description ID of item */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Declinations filters */
          filters?: {
            /** Declination id */
            id?: number;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeclinationRead"];
        };
      };
    };
  };
  /**
   * Put staff licenses
   * @description Put staff licenses. Need to pass all existing licenses if you want to keep licenses.
   */
  "put-staff-licenses": {
    parameters: {
      path: {
        /** @description ID of staff */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LicenseEdit"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LicenseRead"];
        };
      };
    };
  };
  /**
   * Delete licenses
   * @description Delete staff licenses
   */
  "delete-staff-licenses": {
    parameters: {
      path: {
        /** @description ID of staff */
        id: number;
      };
    };
    responses: {
      /** @description licenses deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Quotas
   * @description Get quotas of the corp
   */
  "get-quotas": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Quotas"];
        };
      };
    };
  };
  /**
   * Batch request
   * @description Create a batch request
   */
  "create-batch": {
    requestBody?: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description Batch response */
      207: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Get User Notifications
   * @description Get notifications related to current user
   */
  "get-notifications": {
    responses: {
      /** @description Notifications list fetched */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Notification"][];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  /**
   * Search User Notifications
   * @description Search notifications related to current user
   */
  "search-notifications": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NotificationFilters"];
      };
    };
    responses: {
      /** @description Notifications list fetched */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Notification"][];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  /**
   * Delete notification
   * @description Delete a notification
   */
  "delete-notification": {
    parameters: {
      path: {
        /** @description ID of notification */
        id: number;
      };
    };
    responses: {
      /** @description notification deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Mark notification as read
   * @description Mark a notification as read or unread
   */
  "mark-notification-as-read": {
    parameters: {
      path: {
        /** @description ID of notification */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NotificationMarkAsRead"];
      };
    };
    responses: {
      /** @description notification read status updated */
      204: {
        content: never;
      };
    };
  };
  /**
   * Mark all unread notifications as read
   * @description Mark all unread notifications as read
   */
  "mark-all-notifications-as-read": {
    responses: {
      /** @description notifications read status updated */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Notifications settings
   * @description Get notifications settings
   */
  "get-notifications-settings": {
    responses: {
      /** @description Notification settings response */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationSettingsOutput"];
        };
      };
    };
  };
  /**
   * Update Notifications settings
   * @description Update notifications settings
   */
  "put-notifications-settings": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NotificationSettingsInput"];
      };
    };
    responses: {
      /** @description Notification settings updated response */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationSettingsOutput"];
        };
      };
    };
  };
  /**
   * Get invoice
   * @description Get an invoice by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-invoice": {
    parameters: {
      query?: {
        embed?: components["parameters"]["invoiceOneEmbed"];
      };
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    responses: {
      /** @description Invoice fetched */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceOne"];
        };
      };
    };
  };
  /**
   * Update invoice
   * @description Update an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-invoice": {
    parameters: {
      query?: {
        embed?: components["parameters"]["invoiceOneEmbed"];
      };
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InvoiceUpdate"];
      };
    };
    responses: {
      /** @description Invoice updated */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["InvoiceOne"];
        };
      };
    };
  };
  /**
   * Invoices List
   * @description Get a list of invoices <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-invoices": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["invoiceEmbed"];
        order?: components["parameters"]["invoiceOrder"];
      };
    };
    responses: {
      /** @description Invoices list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Invoice"][];
          };
        };
      };
    };
  };
  /**
   * Create invoice
   * @description Create an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-invoice": {
    parameters: {
      query?: {
        embed?: components["parameters"]["invoiceOneEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InvoiceCreate"];
      };
    };
    responses: {
      /** @description Invoice created */
      201: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["InvoiceOne"];
        };
      };
    };
  };
  /**
   * Search invoices
   * @description Search invoices <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-invoices": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["invoiceEmbed"];
        order?: components["parameters"]["invoiceOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InvoiceFilters"];
      };
    };
    responses: {
      /** @description Invoices list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Invoice"][];
          };
        };
      };
    };
  };
  /**
   * List invoices favourite filters
   * @description List favourite filters for faster access to specific invoices <br />> Favourite filters can be applied directly to invoice search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-invoice-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Compute an invoice
   * @description Compute an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "compute-invoice": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InvoiceCreate"];
      };
    };
    responses: {
      /** @description Invoice computed successfully */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["InvoiceCompute"];
        };
      };
    };
  };
  /**
   * Invoice smart-tags list
   * @description Get list of smart-tags for an invoice
   */
  "get-invoice-smart-tags": {
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to invoice
   * @description Link a list of smart-tags to an invoice
   */
  "link-invoice-smart-tags": {
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Validate Invoice
   * @description Validate an invoice, which is in draft status, into due status. <strong>After validation, the invoice can no longer be edited.</strong><br/> You could provide a date if you want to change the invoice date. <br/> <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div><br/>
   */
  "validate-invoice": {
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ValidateInvoice"];
      };
    };
    responses: {
      /** @description Invoice validated */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceOne"];
        };
      };
    };
  };
  /**
   * Get credit notes linked to invoice
   * @description Get list of credit notes linked to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div><br/>
   */
  "get-invoice-credit-notes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Invoice id */
        id: number;
      };
    };
    responses: {
      /** @description List of credit notes linked to invoice */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CreditNote"][];
          };
        };
      };
    };
  };
  /**
   * Link a credit note to an invoice
   * @description Link a credit note to an invoice for a specific amount <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-credit-note-to-invoice": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Credit note identifier */
        creditNoteId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Amount to be balanced on the document
           * @example 12.66
           */
          amount: string;
        };
      };
    };
    responses: {
      /** @description Credit note linked to invoice */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
    };
  };
  /**
   * Unlink a credit note from an invoice
   * @description Unlink a credit note from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-invoices-credit-note": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Credit note identifier */
        creditNoteId: number;
      };
    };
    responses: {
      /** @description Document unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * Invoice payments list
   * @description Get list of payments for an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-invoice-payments": {
    parameters: {
      path: {
        /** @description Invoice ID */
        id: number;
      };
    };
    responses: {
      /** @description Payments list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Link payment to invoice
   * @description Link a payment to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-invoice-payment": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkPaymentToDocument"];
      };
    };
    responses: {
      /** @description Payments list attached to the invoice */
      201: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Unlink payment from invoice
   * @description Unlink a payment from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-invoice-payment": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    responses: {
      /** @description Payment unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * List directories and files of an invoice
   * @description List directories and files attached to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-invoice-files": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an invoice
   * @description Attach file to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-invoice-file": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Invoice custom fields List
   * @description Get list of custom fields for an invoice
   */
  "get-invoice-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Invoice id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update Invoice custom fields
   * @description Update list of custom fields for an invoice
   */
  "update-invoice-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Invoice id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Invoice's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Link prime to invoice
   * @deprecated
   * @description Link a prime to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-invoice-prime": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Prime linked */
      201: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a prime from an invoice
   * @deprecated
   * @description Unlink a prime from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-invoice-prime": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    responses: {
      /** @description Prime unlinked */
      204: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested prime was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Link discount including taxes to invoice
   * @description Link a discount including taxes to an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-invoice-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Discount linked */
      201: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a discount including taxes from an invoice
   * @description Unlink a discount including from an invoice <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-invoice-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Invoice identifier */
        invoiceId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    responses: {
      /** @description Discount unlinked */
      204: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested discount was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get credit note
   * @description Get a credit note by ID <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-note": {
    parameters: {
      query?: {
        embed?: components["parameters"]["creditNoteOneEmbed"];
      };
      path: {
        /** @description Credit Note ID */
        id: number;
      };
    };
    responses: {
      /** @description Credit note fetched */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNoteOne"];
        };
      };
    };
  };
  /**
   * Update credit note
   * @description Update a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-credit-note": {
    parameters: {
      query?: {
        embed?: components["parameters"]["creditNoteOneEmbed"];
      };
      path: {
        /** @description Credit Note ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreditNoteUpdate"];
      };
    };
    responses: {
      /** @description Credit note updated */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["CreditNoteOne"];
        };
      };
    };
  };
  /**
   * Credit notes List
   * @description Get a list of credit notes <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-notes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["creditNoteEmbed"];
        order?: components["parameters"]["creditNoteOrder"];
      };
    };
    responses: {
      /** @description Credit notes list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CreditNote"][];
          };
        };
      };
    };
  };
  /**
   * Create credit note
   * @description Create a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-credit-note": {
    parameters: {
      query?: {
        embed?: components["parameters"]["creditNoteOneEmbed"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreditNoteCreate"];
      };
    };
    responses: {
      /** @description Credit note created */
      201: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["CreditNoteOne"];
        };
      };
    };
  };
  /**
   * Search credit notes
   * @description Search credit notes <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-credit-notes": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        embed?: components["parameters"]["creditNoteEmbed"];
        order?: components["parameters"]["creditNoteOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreditNoteFilters"];
      };
    };
    responses: {
      /** @description Credit notes list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["CreditNote"][];
          };
        };
      };
    };
  };
  /**
   * List credit-notes favourite filters
   * @description List favourite filters for faster access to specific credit-notes <br />> Favourite filters can be applied directly to credit-note search endpoints <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-note-favourite-filters": {
    parameters: {
      query?: {
        order?: components["parameters"]["favouriteFiltersOrder"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List favourite filters */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["FavouriteFilters"];
          };
        };
      };
    };
  };
  /**
   * Compute a credit note
   * @description Compute a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "compute-credit-note": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreditNoteCreate"];
      };
    };
    responses: {
      /** @description Credit note computed successfully */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["CreditNoteCompute"];
        };
      };
    };
  };
  /**
   * Credit note smart-tags list
   * @description Get list of smart-tags for a credit note
   */
  "get-credit-note-smart-tags": {
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Link smart tags to credit note
   * @description Link a list of smart-tags to a credit note
   */
  "link-credit-note-smart-tags": {
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7BcompanyId%7D/smart-tags"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Smart-tags list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: paths["/companies/%7BcompanyId%7D/smart-tags"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"];
          };
        };
      };
    };
  };
  /**
   * Validate credit note
   * @description Validate a credit note in status draft. Update the status to due. You could provide a date if you want to change the credit note date. <br/> <strong>Credit note can not be updated after validation.</strong> <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "validate-credit-note": {
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreditNoteValidate"];
      };
    };
    responses: {
      /** @description Credit note validated */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNoteOne"];
        };
      };
    };
  };
  /**
   * Credit note custom fields List
   * @description Get list of custom fields for a credit note
   */
  "get-credit-note-custom-fields": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Credit note id */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/companies/%7Bid%7D/custom-fields"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * Update credit note custom fields
   * @description Update list of custom fields for a credit note
   */
  "update-credit-note-custom-fields": {
    parameters: {
      query?: {
        verify?: components["parameters"]["verify"];
      };
      path: {
        /** @description Credit note id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/companies/%7Bid%7D/custom-fields"]["put"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Credit note's custom fields updated */
      200: {
        content: never;
      };
      204: components["schemas"]["Verify"];
    };
  };
  /**
   * Get invoices linked to credit note
   * @description Get list of invoices linked to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-note-invoices": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Credit note id */
        id: number;
      };
    };
    responses: {
      /** @description List of invoices linked to credit note */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Invoice"][];
          };
        };
      };
    };
  };
  /**
   * Link an invoice to a credit note
   * @description Link an invoice to a credit note for a specific amount <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-invoice-to-credit-note": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Invoice identifier */
        invoiceId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": paths["/invoices/%7BinvoiceId%7D/credit-notes/%7BcreditNoteId%7D"]["post"]["requestBody"]["content"]["application/json"]["schema"];
      };
    };
    responses: {
      /** @description Invoice linked to credit note */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  /**
   * Unlink an invoice from a credit note
   * @description Unlink an invoice from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-credit-note-invoices": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Invoice identifier */
        invoiceId: number;
      };
    };
    responses: {
      /** @description Document unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * Credit note payments list
   * @description Get list of payments for an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-note-payments": {
    parameters: {
      path: {
        /** @description Credit note ID */
        id: number;
      };
    };
    responses: {
      /** @description Payments list fetched */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Link payment to credit note
   * @description Link a payment to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-credit-note-payment": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkPaymentToDocument"];
      };
    };
    responses: {
      /** @description Payments list attached to the credit note */
      201: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["Pagination"];
            data?: components["schemas"]["InvoicingPayment"][];
          };
        };
      };
    };
  };
  /**
   * Unlink payment from credit note
   * @description Unlink a payment from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-credit-note-payment": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        documentId: number;
        /** @description Payment identifier */
        paymentId: number;
      };
    };
    responses: {
      /** @description Payment unlinked */
      204: {
        content: never;
      };
    };
  };
  /**
   * List directories and files of a credit note
   * @description List directories and files attached to an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-credit-note-files": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to an credit note
   * @description Attach file to an credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-credit-note-file": {
    parameters: {
      path: {
        /** @description Document id */
        documentId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: {
          "application/json": components["schemas"]["FileOuput"];
        };
      };
    };
  };
  /**
   * Link prime to credit note
   * @deprecated
   * @description Link a prime to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-credit-note-prime": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Prime linked */
      201: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a prime from a credit note
   * @deprecated
   * @description Unlink a prime from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-credit-note-prime": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Prime identifier */
        primeId: number;
      };
    };
    responses: {
      /** @description Prime unlinked */
      204: {
        content: never;
      };
      /** @description Either primes on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested prime was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Link discount including taxes to credit note
   * @description Link a discount including taxes to a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "link-credit-note-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesDocumentInput"];
      };
    };
    responses: {
      /** @description Discount linked */
      201: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Unlink a discount including taxes from a credit note
   * @description Unlink a discount including taxes from a credit note <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "unlink-credit-note-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Credit note identifier */
        creditNoteId: number;
        /** @description Discount including taxes identifier */
        discountId: number;
      };
    };
    responses: {
      /** @description Discount unlinked */
      204: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
      /** @description Requested discount was not applied on the document */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get a payment
   * @description Get a payment <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-payment": {
    parameters: {
      query?: {
        /** @description Optional objects added through the embed parameter */
        embed?: ("acl" | "company" | "individual")[];
      };
      path: {
        /** @description Payment identifier */
        id: number;
      };
    };
    responses: {
      /** @description Payment fetched */
      200: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  /**
   * Delete payment
   * @description Delete a payment that is not linked to a document <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "delete-payment": {
    parameters: {
      query?: {
        /** @description Optional objects added through the embed parameter */
        embed?: ("acl" | "company" | "individual")[];
      };
      path: {
        /** @description Payment identifier */
        id: number;
      };
    };
    responses: {
      /** @description Payment deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get payments
   * @description Get a list of payments <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-payments": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        /** @description The order field */
        order?: "id" | "paid_date";
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Payment"][];
          };
        };
      };
    };
  };
  /**
   * Search payments
   * @description Search through payments <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications may be subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-payments": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Payments filters */
          filters: {
            /**
             * Status
             * @description Filter payments by status
             * @example [
             *   "pending",
             *   "confirmed"
             * ]
             */
            status?: ("pending" | "confirmed" | "rejected" | "failed" | "refund")[];
            /** Related Objects */
            related_objects?: ({
                /**
                 * @example company
                 * @enum {string}
                 */
                type?: "company" | "individual";
                /** @example 22 */
                id?: number;
              })[];
          };
        };
      };
    };
    responses: {
      /** @description Payments list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Payment"][];
          };
        };
      };
    };
  };
  /**
   * Get email settings
   * @description Get email settings
   */
  "get-email-settings": {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmailSettings"];
        };
      };
    };
  };
  /**
   * Update email settings
   * @description Update email settings
   */
  "put-email-settings": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmailSettingsInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmailSettings"];
        };
      };
    };
  };
  /**
   * Get available tags for email signature settings
   * @description Get available tags for email signature settings
   */
  "get-email-signature-tags": {
    responses: {
      200: {
        content: {
          "application/json": {
              /**
               * @description Tag identifier to insert in your email signature
               * @example %{account.name}%
               */
              key?: string;
              /**
               * @description Tag's meaning
               * @example Current account's name
               */
              description?: string;
            }[];
        };
      };
    };
  };
  /**
   * Get fiscal years
   * @description Get list of fiscal years of account
   */
  "get-fiscal-years": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["FiscalYear"][];
          };
        };
      };
    };
  };
  /**
   * Get the account languages
   * @description Get the account languages
   */
  "get-languages": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageCollection"];
        };
      };
    };
  };
  /**
   * Create directory
   * @description Create a new directory and attach it to the provided parent entity <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-directory": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateDirectory"];
      };
    };
    responses: {
      /** @description Directory created */
      201: {
        content: {
          "application/json": {
            /**
             * @description Directory ID
             * @example 1
             */
            id?: number;
            /**
             * @description Directory type
             * @enum {string}
             */
            type?: "directory";
            /**
             * @description Directory name
             * @example business-cards
             */
            name?: string;
            /** @description Directory description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Creation date of directory
             * @example 1970-01-01T00:00:00+00:00
             */
            created?: string;
            /** @description Current directory location. The first element is the direct parent of the directory */
            breadcrumbs?: components["schemas"]["FileOuput"]["breadcrumbs"]["items"][];
          };
        };
      };
      /** @description Parent not found */
      404: {
        content: never;
      };
      /** @description Directory already exists */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get directory
   * @description Fetch directory informations <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-directory": {
    parameters: {
      query?: {
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
    responses: {
      /** @description Directory fetched */
      200: {
        content: {
          "application/json": paths["/directories"]["post"]["responses"]["201"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /**
   * Update directory
   * @description Update a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-directory": {
    parameters: {
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateDirectory"];
      };
    };
    responses: {
      /** @description Directory updated */
      200: {
        content: {
          "application/json": paths["/directories"]["post"]["responses"]["201"]["content"]["application/json"]["schema"];
        };
      };
      /** @description Cannot modify this directory */
      403: {
        content: never;
      };
      /** @description Directory already exists */
      409: {
        content: never;
      };
    };
  };
  /**
   * Delete the directory and all items attached
   * @description Delete the directory and all items attached <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "delete-directory": {
    parameters: {
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
    responses: {
      /** @description Directory deleted */
      204: {
        content: never;
      };
      /** @description Cannot delete this directory */
      403: {
        content: never;
      };
    };
  };
  /**
   * List directories and files in a directory
   * @description List directories and files belonging to a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-directory-files": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
    responses: {
      /** @description List fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["ListFilesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Attach file to a directory
   * @description Attach file to a directory <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "upload-directory-file": {
    parameters: {
      path: {
        /** @description Id of directory */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileInput"];
      };
    };
    responses: {
      /** @description File uploaded */
      201: {
        content: never;
      };
    };
  };
  /**
   * Fetch list of subscriptions
   * @description Fetch list of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-subscriptions": {
    responses: {
      /** @description Fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["SubscriptionOne"][];
          };
        };
      };
    };
  };
  /**
   * Create a subscription
   * @description Create a subscription <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-subscription": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionCreate"];
      };
    };
    responses: {
      /** @description Subscription created */
      201: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["SubscriptionOne"];
        };
      };
    };
  };
  /**
   * Search subscriptions
   * @description Search subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-subscriptions": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["order"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * Subscription filters
           * @description Subscription filters
           */
          filters: {
            related_objects?: ({
                /**
                 * @description ID of related
                 * @example 234
                 */
                id: number;
                /**
                 * @description Type of related
                 * @example company
                 * @enum {string}
                 */
                type: "company" | "individual";
              })[];
          };
        };
      };
    };
    responses: {
      /** @description Fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["SubscriptionOne"][];
          };
        };
      };
    };
  };
  /**
   * Get subscription
   * @description Get a subscription <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-subscription": {
    parameters: {
      path: {
        /** @description Subscription identifier */
        id: number;
      };
    };
    responses: {
      /** @description Fetched */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionOne"];
        };
      };
    };
  };
  /**
   * Delete a subscription
   * @description Delete a subscription and all future payment installments <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "delete-subscription": {
    parameters: {
      path: {
        /** @description Subscription identifier */
        id: number;
      };
    };
    responses: {
      /** @description Subscription deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Add payment installment for a subscription
   * @description Allows to add a certain number of payment installment to an existing subscription. The new payment installment will take the frequency defined on the subscription and will follow the date of the last existing payment installment <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "patch-subscription-payment-installment": {
    parameters: {
      path: {
        /** @description Subscription identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Number of deadlines to add to the subscription
           * @example 2
           */
          count: number;
        };
      };
    };
    responses: {
      /** @description Payment installment added for subscription */
      201: {
        content: never;
      };
      /** @description It is not allowed to add payment installment if the next calculated date for the 1st payment installment is not in the future. The subscription is considered completed. */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get all payment installments of subscriptions
   * @description Get all payment installments of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-subscriptions-payment-installments": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: ({
                /**
                 * @description Id of payment installment
                 * @example 2
                 */
                id?: number;
                /**
                 * @description Status of payment installment
                 * @example generated
                 * @enum {string}
                 */
                status?: "generated" | "scheduled" | "in_progress" | "failed";
                /**
                 * @description Id of subscription
                 * @example 23
                 */
                subscription_id?: number;
                /**
                 * Format: date
                 * @description Date of invoice generation
                 * @example 2023-01-01
                 */
                date?: string;
                /** @description Email sending configuration */
                sending?: {
                  /**
                   * @description Once the invoice has been generated, from subscription payment install, if sending mode is automatic, email will be sent to all recipients, otherwise, if it's manual, email should be send manually
                   * @example manual
                   * @enum {unknown}
                   */
                  mode?: "automatic" | "manual";
                };
                /** @description Document to use as a template for subscription payment installment */
                model?: {
                  /**
                   * @description Template type
                   * @example model
                   * @enum {string}
                   */
                  type?: "model";
                  /**
                   * @description Template id
                   * @example 5
                   */
                  id?: number;
                };
                /** @description Objects linked to the subscription */
                related?: ({
                    /**
                     * @description ID of related
                     * @example 234
                     */
                    id?: number;
                    /**
                     * @description Type of related
                     * @example company
                     * @enum {string}
                     */
                    type?: "company" | "individual";
                  })[];
                /** @description Generated document, even if it's deleted */
                document?: {
                  /**
                   * @description Type of document
                   * @example invoice
                   * @enum {string}
                   */
                  type?: "invoice";
                  /**
                   * @description Id of document
                   * @example 56
                   */
                  id?: number;
                } | null;
              })[];
          };
        };
      };
    };
  };
  /**
   * Search payment installments of subscriptions
   * @description Search payment installments of subscriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "search-subscriptions-payment-installments": {
    parameters: {
      query?: {
        order?: components["parameters"]["order"];
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Payment installment filters */
          filters: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: paths["/subscriptions/payment-installments"]["get"]["responses"]["200"]["content"]["application/json"]["schema"]["data"]["items"][];
          };
        };
      };
    };
  };
  /**
   * List document models
   * @description Fetch a list of document models <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-models": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /**
   * Create a document model
   * @description Create a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-model": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateModel"];
      };
    };
    responses: {
      /** @description Document model created */
      201: {
        content: {
          "application/json": components["schemas"]["ModelOne"];
        };
      };
    };
  };
  /**
   * Get document model
   * @description Get a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-model": {
    parameters: {
      path: {
        /** @description Model identifier */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ModelOne"];
        };
      };
    };
  };
  /**
   * Update document model
   * @description Update a document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-model": {
    parameters: {
      path: {
        /** @description Model identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Name of model
           * @example model#1
           */
          number?: string;
          /**
           * @description Subject of model <br><br><b>Note:</b> Date variables, called "tag", can be integrated in this property, they will be replaced by the real value when converting the document template to a document <br>> Refer to endpoint's description of list available tags for document model.
           *
           * @example Subject
           */
          subject?: string;
          /**
           * @description Currency code of the model
           * @example EUR
           */
          currency?: string;
          /** @description Global discount applied on the model */
          discount?: {
            /**
             * @example amount
             * @enum {string}
             */
            type?: "percent" | "amount";
            /**
             * @description value of discount
             * @example 25.20
             */
            value?: string;
          };
          /**
           * @description Invoice's owner (staff id)
           * @example 145
           */
          owner_id?: number;
          rows?: components["schemas"]["CreateModel"]["rows"]["items"][] | null;
        };
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json": components["schemas"]["ModelOne"];
        };
      };
    };
  };
  /**
   * Search document models
   * @description Search document models
   */
  "search-models": {
    parameters: {
      query?: {
        direction?: components["parameters"]["direction"];
        limit?: components["parameters"]["limit"];
        offset?: components["parameters"]["offset"];
        field?: components["parameters"]["fields"];
        order?: components["parameters"]["ModelOrder"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Models filters */
          filters: {
            /**
             * Created at
             * @description Filter the document models list by creation date
             */
            created?: {
              /**
               * Format: date-time
               * @example 2020-01-01T00:00:00+01:00
               */
              start?: string;
              /**
               * Format: date-time
               * @example 2020-02-01T00:00:00+01:00
               */
              end?: string;
            };
            /**
             * Owners
             * @description Filter the document models list by owner (staff id)
             */
            owners?: number[];
            /**
             * Assigned staffs
             * @description Filter the document models list by assigned staffs (staff id)
             */
            assigned_staff_ids?: number[];
            /**
             * number
             * @description Filter the document models list by number (exact search)
             * @example FAC-0001
             */
            number?: string;
            /**
             * currency
             * @description Currency code (exact search)
             * @example EUR
             */
            currency?: string;
          };
        };
      };
    };
    responses: {
      /** @description Model list fetched */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["Model"][];
          };
        };
      };
    };
  };
  /**
   * Convert a document model into a document
   * @description Build the request body expected by document create endpoint with prefilled properties from the document model <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "convert-model": {
    parameters: {
      path: {
        /** @description Document model identifier */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Type of document to generate
           * @example invoice
           * @enum {string}
           */
          doctype: "estimate" | "invoice" | "credit-note" | "order";
          /** @description Objects that should be linked to the document to be generated */
          related: ({
              /**
               * @description Type of related
               * @example company
               * @enum {string}
               */
              type?: "company" | "individual" | "opportunity";
              /**
               * @description Related identifier
               * @example 7
               */
              id?: number;
            })[];
          /**
           * @description Update the price of the rows product, service, shipping and packaging
           * @example true
           */
          refresh_rows_content: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": {
            parent?: {
              /**
               * @description Parent type
               * @example model
               * @enum {string}
               */
              type?: "model";
              /**
               * @description Parent identifier
               * @example 7
               */
              id?: number;
            };
            /**
             * @description Subject of document
             * @example Subject of document
             */
            subject?: string;
            /**
             * @description Currency code of the model
             * @example EUR
             */
            currency?: string;
            /** @description Global discount applied on the model */
            discount?: {
              /**
               * @example amount
               * @enum {string}
               */
              type?: "percent" | "amount";
              /**
               * @description value of discount
               * @example 25.20
               */
              value?: string;
            };
            /** @description Objects linked to the document */
            related?: ({
                /**
                 * @description ID of related
                 * @example 234
                 */
                id?: number;
                /**
                 * @description Type of related
                 * @example company
                 * @enum {string}
                 */
                type?: "company" | "individual" | "opportunity";
              })[];
            /**
             * @description Rate Category applied on document
             * @example 777
             */
            rate_category_id?: number;
            rows?: components["schemas"]["EstimateCompute"]["rows"]["items"][] | null;
          };
        };
      };
    };
  };
  /**
   * Get available tags for document models
   * @description Get available tags that could be used on a document model, as variable, that will be replaced when compute a concrete document.<br>Tag could be used on subject and row's descriptions <div style="padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-model-tags": {
    responses: {
      200: {
        content: {
          "application/json": ({
              /**
               * @description Tag identifier to insert
               * @example %{day.number}%
               */
              key?: string;
              /**
               * @description Tag's meaning
               * @example Current day number
               */
              description?: string;
            } | ({
              /**
               * @description Tag identifier
               * @example %{custom(direction.iterations.interval).format}%
               */
              key?: string;
              /**
               * @description Tag's meaning
               * @example Customizable date tag
               */
              description?: string;
              /**
               * @description We offer a customizable date tag format in the following form: <code>%{custom(direction.iterations.interval).format}%</code>.<br>This tag allows for customization in the following ways: <ul>
               *   <li>Define the projected date:
               *   <ul><li><code>direction</code> define if we want the past or the future</li>
               *   <li><code>iterations</code> define the number of times the <code>interval</code> is called</li>
               *   <li><code>interval</code> define the date interval to apply on date projection</li></ul></li>
               *   <li>Output format
               *   <ul><li><code>format</code> define the output format to apply on the projected date</li></ul></li>
               * </ul> <br> Using this tag format allows for the creation of dynamic content that incorporates dates and times. <br>> Example: <code>%{custom(plus.2.day).day.name}%</code> to return the name of the day in 2 days <br>> Example: <code>%{custom(minus.1.month).last_day.name}%</code> to return the name of the last day of the previous month
               */
              meta?: {
                /** @description Available values */
                direction?: ({
                    /** @enum {string} */
                    key?: "plus" | "minus";
                    description?: string;
                  })[];
                /** @description Available values */
                interval?: ({
                    /** @enum {string} */
                    key?: "day" | "week" | "month" | "year";
                    description?: string;
                  })[];
                /** @description Available values */
                tag?: ({
                    /** @enum {string} */
                    key?: "day.number" | "day.name" | "first_day.number" | "first_day.name" | "last_day.number" | "last_day.name" | "month.number" | "month.name" | "year.number";
                    description?: string;
                  })[];
              };
            }))[];
        };
      };
    };
  };
  /**
   * Get list of primes
   * @deprecated
   * @description Get primes list <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-primes": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["DiscountInclTaxesOutput"][];
          };
        };
      };
    };
  };
  /**
   * Get list of discounts including taxes
   * @description Get discounts including taxes list <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-discounts-incl-taxes": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            data: components["schemas"]["DiscountInclTaxesOutput"][];
          };
        };
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create a discount including taxes
   * @description Create a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "create-discount-incl-taxes": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DiscountInclTaxesInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DiscountInclTaxesOutput"];
        };
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get a discount including taxes
   * @description Get a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "get-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Discount including taxes id */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DiscountInclTaxesOutput"];
        };
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update a discount including taxes
   * @description Update a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "update-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Discount including taxes id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateDiscountInclTaxes"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DiscountInclTaxesOutput"];
        };
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete a discount including taxes
   * @description Delete a discount including taxes  <div style="padding:17px; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>
   */
  "delete-discount-incl-taxes": {
    parameters: {
      path: {
        /** @description Discount including taxes id */
        id: number;
      };
    };
    responses: {
      /** @description Discount deleted */
      204: {
        content: never;
      };
      /** @description Either discounts on documents are not activated on your account or you don't have the required privileges */
      403: {
        content: never;
      };
    };
  };
}
